<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oliverqueen.cn</id>
    <title>Molier • Posts by &#34;swift&#34; tag</title>
    <link href="https://oliverqueen.cn" />
    <updated>2018-05-08T02:12:00.000Z</updated>
    <category term="欢迎页" />
    <category term="网络" />
    <category term="底层" />
    <category term="DNS解析" />
    <category term="LocalDNS" />
    <category term="OpenGL" />
    <category term="UI" />
    <category term="动画" />
    <category term="性能优化" />
    <category term="xcode" />
    <category term="cocoapods" />
    <category term="podfile" />
    <category term="webview" />
    <category term="hook" />
    <category term="runtime" />
    <category term="翻译" />
    <category term="优化" />
    <category term="国外文献" />
    <category term="httpdns" />
    <category term="Cocoapods" />
    <category term="架构" />
    <category term="AlertView" />
    <category term="Hook" />
    <category term="杂谈" />
    <category term="Hexo" />
    <category term="个人博客" />
    <category term="网站" />
    <category term="屏幕适配" />
    <category term="iOS 11" />
    <category term="评论插件" />
    <category term="总结" />
    <category term="回味2017展望2018" />
    <category term="热修复" />
    <category term="JSPath" />
    <category term="swift" />
    <category term="网络请求" />
    <category term="Swift" />
    <category term="音频" />
    <category term="唱吧" />
    <category term="K歌" />
    <category term="AVFoundation" />
    <category term="git" />
    <category term="效率工作" />
    <category term="回首2018展望2019" />
    <category term="代码版本控制" />
    <category term="iOS" />
    <category term="Crash防护" />
    <category term="Apple登录" />
    <category term="WWDC2022" />
    <category term="逆向" />
    <category term="算法" />
    <category term="C语言" />
    <category term="排序" />
    <entry>
        <id>https://oliverqueen.cn/2018-05-08-RX-Swift-Study-One/</id>
        <title>关于RxSwift的一点理解</title>
        <link rel="alternate" href="https://oliverqueen.cn/2018-05-08-RX-Swift-Study-One/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;hello-rxswift&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hello-rxswift&#34;&gt;#&lt;/a&gt; Hello RxSwift!&lt;/h2&gt;
&lt;p&gt;这本书可以让你用 Swift 来编写响应式编程代码。但是到底什么是 RxSwift, 这里有很好的定义：&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=orange&amp;gt;RxSwift 是由可被观察的事件的异步队列和可操作的功能性的运算符组成的库，并且他可以由调度者通过参数的方式进行调度。&amp;lt;/font&amp;gt; &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1525870736284&amp;amp;di=9f373001bac8687d5fe11b3d7b40016f&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fcode4app.com%2Fdata%2Fattachment%2Fforum%2F201703%2F21%2F210007p6wy7buzq6hqhhdu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;听起来很复杂？其实不用担心，因为无论是你编写响应式编程，还是理解他们背后的思想和一些相关的东西，官方通常都是用一些很吓人的术语来解释。尤其是当你第一次接触，或者是之前从未有人向你介绍过这些的时候，你就会觉得很可怕。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本书的目标就是带你逐步的去理解 RxSwift 的 API，并且去运用每一个 API，然后把它们运用到实际的 iOSApp 中。&lt;/p&gt;
&lt;p&gt;你将会从 RxSwift 中最基本的功能开始，然后循序渐进的由中级到高级。花一些时间去广泛的理解里面的概念，这样以来读完本书后你就会精通 RxSwift 额思想和使用。其实 Rx 是非常广的话题，以至于不能单单通过这一本书来讲完，因此我们通过这本书让你对 RX 有一个坚实的了解，这样你就能继续提高自己的 Rx 水平了&lt;/p&gt;
&lt;p&gt;其实我们并没有非常确信 RxSwift 的思想是什么，让我们在这个章节里面通过几个简单的例子来帮助我们理解响应式编程。&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=orange&amp;gt;RxSwift 本质其实就是当你的数据或者对象发生变化时候他会把这个变化放在一个单独的管道 (队列) 里面，以此来达到简化异步并发的过程的目的 &amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;这里打个比方一个按钮我点击了就会触发一个时间 那么我每点击一次就会生成一个 Action 我们用一个管道去装在这些 Action，每加一个 Action 就会把他放管道里面，我们可以理解为管道里面流动的 Actions，且管道与管道之间相互独立。同理我们可以吧 Button 改成一个 UITExtField，Action 就是每一次输入事件。&lt;/p&gt;
&lt;p&gt;作为一个 iOS 的开发者我相信这已经很好帮你去理解什么是 RxSwift 了吧，这应该是比你在一开始看到的那些专业术语好理解的多。&lt;/p&gt;
&lt;p&gt;如果你还是不清楚，那么你至少应该理解，RxSwift 可以很轻松的帮你编写异步操作的代码，你要知道编写异步操作的代码是比较难的，所以所任何一点点的帮助都是受大家所欢迎的。&lt;/p&gt;
&lt;h3 id=&#34;异步编程的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步编程的介绍&#34;&gt;#&lt;/a&gt; 异步编程的介绍&lt;/h3&gt;
&lt;p&gt;如果你想用一种通俗简单的语言来描述异步编程，比如你在做一个 iSO 的 App，那么你一定想到如下几个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接受 Button 的点击事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 text field 的 Action 和键盘的弹出和收起动画之间的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从网上下载大图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往硬盘里面存数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;播放视频&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的所有东西看似是发生在同一时刻其实真的是吗？我们思考一个问题：比如你在看视频，这时候你点击了 textfield 弹出键盘，大家都知道键盘由下往上弹出是有一个动画的，就算键盘已经出现到了屏幕上，只要动画没有做完你的视频就不会暂停，真的是这样吗，内部又是如何实现的？如下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tKfTcgy1fr41y6xhkij31kw0q0h80.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;程序里面不同的部分不会阻塞彼此的执行，iOS 提供了几种 API，通过多核 CPU 来在不同的线程上进行不同的工作。&lt;/p&gt;
&lt;p&gt;其实编写真正并行的代码其实是很复杂的，打个比方假如两个线程同时访问同一个资源，就会产生资源争夺的问题，比如谁先访问，谁后访问。&lt;/p&gt;
&lt;h3 id=&#34;uikit中的一些异步的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uikit中的一些异步的api&#34;&gt;#&lt;/a&gt; UIKit 中的一些异步的 API&lt;/h3&gt;
&lt;p&gt;苹果在 iOS SDK 中提供了很多 api，帮助你编写异步代码。你在你的项目中使用过这些但是可能还没有考虑过它们，因为它们是编写移动应用程序的基础。毕竟苹果爸爸封装好的，我们拿来用就好了，干嘛想那么多。&lt;/p&gt;
&lt;p&gt;你一定用过以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NotificationCenter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grand Central Dispatch(GCD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closures（Block）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于大部分的类都是异步的，并且 UI 在内部也是异步的，所以很难去猜测整个程序的执行顺序，因此你的 APp 会因为一些外部的原因而表现不同，比如用户的输入不同、网络环境的不同、或者一些其他的东西。用户每次在打开你的 APp 其实代码的执行顺序都是不同的 (当然除了一些自动化测试的场景，那些条件都是预先设置好的。)&lt;/p&gt;
&lt;p&gt;其实写好异步代码并不是绝对不可能的，毕竟苹果给我提供了非常强大的 API，相比较于其他平台这要好很多。不过问题在于编写复杂的异步代码很难，部分原因是因为苹果给我们提供了大量的 SDK，而且他们并不统一。如果使用 delegate 我们需要遵循特制的格式，block，NotificationCenter 等等都是这样的，所以并没有一种通用的、贯穿所有异步方法的 API，这样就导致读懂并且书写这样的异步代码很难。可以看下下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tKfTcgy1fr4342v718j31kw0nlgzj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们来比较两个代码片段来总结下这章。一个是异步一个是同步。&lt;/p&gt;
&lt;h4 id=&#34;同步代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步代码&#34;&gt;#&lt;/a&gt; 同步代码&lt;/h4&gt;
&lt;p&gt;对数组的每个元素进行操作你应该很熟悉了吧，其实就是循环遍历嘛。这是一个非常简单而又坚实的功能，因为它保证了两件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;它是同步执行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在循环遍历时候他是不可变的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;花点时间想想这意味着什么。当你遍历一个数组的时候，你不需要检查所有的元素是否仍然存在，并且您不需要重新返回，以防另一个线程在集合的开始插入一个元素。您假定您总是在循环的开始时遍历整个集合。试试以下代码:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for number in&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(number)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 最后的输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tKfTcgy1fr43rz56omj304p02at8i.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数组在 for 循环中是不可变的吗？执行顺序是什么？&lt;/p&gt;
&lt;h4 id=&#34;异步代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步代码&#34;&gt;#&lt;/a&gt; 异步代码&lt;/h4&gt;
&lt;p&gt;再考虑一个类似的代码，如下用户通过点击事件触发下面代码，每次点击都会输出数组下一个元素，然后用户重复点击直到把数组所有的元素输出完成：&lt;br /&gt;
&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var currentIndex = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//this method is connected in IB to a button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@IBAction func printNext(_ sender: Any) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(array[currentIndex])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt; if &lt;/span&gt;currentIndex != array.count-1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    currentIndex += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 试想一下如果放在我们现实的 App 中真的可以这么执行吗？这个可说不准，因为如果在用户的两次点击之间又有其他的线程对这个数组进行了操作 (增加、删除元素) 那么数据就会发生错乱。而且如果 currentIndex 被另一个线程改变了那么你也不会得到预期的结果。&lt;/p&gt;
&lt;p&gt;其实多线程最重要的就是数据争夺的问题，然而 RxSwift 很好的解决了这个问题&lt;/p&gt;
</content>
        <category term="Swift" />
        <updated>2018-05-08T02:12:00.000Z</updated>
    </entry>
    <entry>
        <id>https://oliverqueen.cn/2018-03-30-AlamoFire/</id>
        <title>AlamoFire的使用(下载队列，断点续传)</title>
        <link rel="alternate" href="https://oliverqueen.cn/2018-03-30-AlamoFire/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;最近开始做了一个新项目，几乎没有时间来写自己的博客，大部分都在写 feature（BUG），自己研究的东西很少，本来之前说好每个月要写两篇文章也没能坚持下来，最近在项目中遇到了一些问题，就在这里总结下吧。一些小的技巧而已，大神可以忽略了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/alamofire.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;新项目包含了上传下载网络请求相关功能，由于是 swift 编写所以自然而然选择了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FsYW1vZmlyZS9BbGFtb2ZpcmU=&#34;&gt;AlamoFire&lt;/span&gt; (好像也没得选) 来做底层，正常的网络请求 post、get 等都是直接傻瓜式调用 AlamoFire 的接口，本文主要将一些细节问题&lt;/p&gt;
&lt;h2 id=&#34;设置通用超时时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置通用超时时间&#34;&gt;#&lt;/a&gt; 设置通用超时时间&lt;/h2&gt;
&lt;p&gt;使用 Alamofire 发起请求时候有这两个接口&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// Creates a `DataRequest` using the default `SessionManager` to retrieve the contents of the specified `url`,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// `method`, `parameters`, `encoding` and `headers`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter url:        The URL.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter method:     The HTTP method. `.get` by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter parameters: The parameters. `nil` by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter encoding:   The parameter encoding. `URLEncoding.default` by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter headers:    The HTTP headers. `nil` by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - returns: The created `DataRequest`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;URLConvertible&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Alamofire&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;HTTPMethod&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;parameters&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Parameters&lt;/span&gt;? &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;encoding&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;ParameterEncoding&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;headers&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;HTTPHeaders&lt;/span&gt;? &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Alamofire&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;DataRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// Creates a `DataRequest` using the default `SessionManager` to retrieve the contents of a URL based on the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// specified `urlRequest`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter urlRequest: The URL request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - returns: The created `DataRequest`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;urlRequest&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;URLRequestConvertible&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Alamofire&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;DataRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 而我们在调用的时候通常会直接这么用&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; req : URLRequest = &lt;span class=&#34;constructor&#34;&gt;URLRequest(&lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;: URL(&lt;span class=&#34;params&#34;&gt;fileURLWithPath&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;32&amp;quot;&lt;/span&gt;)&lt;/span&gt;, cachePolicy: .useProtocolCachePolicy, timeoutInterval: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 第一种方法调用，后面参数直接用default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;Alamofire&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;request(&lt;span class=&#34;constructor&#34;&gt;URL(&lt;span class=&#34;params&#34;&gt;fileURLWithPath&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;32&amp;quot;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 第二中调用，使传入request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;Alamofire&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;request(req)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; semaphore = &lt;span class=&#34;constructor&#34;&gt;DispatchSemaphore(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;: 0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中第一种方法我们不能传入超时时间，第二中方法我们可以通过传入的 URLRequest 来设置超时时间，但是我们通常一个项目中大部分的请求，可能除了某些特殊的下载请求之外所有的超时时间都是一样的，这样的话我们需要同样的代码写好多遍，这个时候有两个办法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对生成 Request 的方法做一个封装，通用的参数如超时时间、header、请求方式 写死在方法里面，对于会变动的参数如 URL 和可以通过参数传入.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建  &lt;code&gt;Alamofire.SessionManager&lt;/code&gt;  通过 sessionManager 来设置超时时间等一些通用的东西&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight verilog&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; networkManager : SessionManager = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;config&lt;/span&gt; : URLSessionConfiguration = URLSessionConfiguration&lt;span class=&#34;variable&#34;&gt;.default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.timeoutIntervalForRequest&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; manager = Alamofire&lt;span class=&#34;variable&#34;&gt;.SessionManager&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.init&lt;/span&gt;(configuration: &lt;span class=&#34;keyword&#34;&gt;config&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; manager&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;断点续传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#断点续传&#34;&gt;#&lt;/a&gt; 断点续传&lt;/h2&gt;
&lt;p&gt;Alamofire 支持断点续传下载，原理就是将下载一半的数据保存到本地，然后下次再启动时候通过 data 的拼接来进行继续下载。用法也很简单，只是调用接口而已，关键是看开发者如何自己去维护这个已下载的数据，比如是存内存还是存硬盘，要存多久，淘汰策略是什么之类的。其实就是两个步骤， 断点和续传&lt;/p&gt;
&lt;h4 id=&#34;第一步-断点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一步-断点&#34;&gt;#&lt;/a&gt; 第一步 断点&lt;/h4&gt;
&lt;p&gt;监听下载中断，中断后将已经下载的数据进行保留，我这边用一个属性来存，具体到项目实现大家可以采用自己存储方式，存到硬盘或者数据库之类的&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Alamofire&lt;span class=&#34;selector-class&#34;&gt;.download&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&amp;quot;&lt;/span&gt;, method: &lt;span class=&#34;selector-class&#34;&gt;.get&lt;/span&gt;, parameters: nil, encoding: URLEncoding&lt;span class=&#34;selector-class&#34;&gt;.default&lt;/span&gt;, headers: nil) &amp;#123; (url, response) -&amp;gt; (destinationURL: URL, options: DownloadRequest.DownloadOptions) &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return (&lt;span class=&#34;built_in&#34;&gt;URL&lt;/span&gt;(fileURLWithPath: &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;(describing : &lt;span class=&#34;built_in&#34;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&#34;selector-class&#34;&gt;.documentDirectory&lt;/span&gt;, &lt;span class=&#34;selector-class&#34;&gt;.userDomainMask&lt;/span&gt;, false)&lt;span class=&#34;selector-attr&#34;&gt;[0]&lt;/span&gt;+&lt;span class=&#34;string&#34;&gt;&amp;quot;123.mp4&amp;quot;&lt;/span&gt;)), &lt;span class=&#34;selector-attr&#34;&gt;[.createIntermediateDirectories, .removePreviousFile]&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;span class=&#34;selector-class&#34;&gt;.responseJSON&lt;/span&gt; &amp;#123; (response) &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                switch response&lt;span class=&#34;selector-class&#34;&gt;.result&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                case &lt;span class=&#34;selector-class&#34;&gt;.success&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                case &lt;span class=&#34;selector-class&#34;&gt;.failure&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;//意外中断后在此处处理下载完成的部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self&lt;span class=&#34;selector-class&#34;&gt;.tmpData&lt;/span&gt; = response&lt;span class=&#34;selector-class&#34;&gt;.resumeData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;第二步-续传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二步-续传&#34;&gt;#&lt;/a&gt; 第二步 续传&lt;/h4&gt;
&lt;p&gt;当下载再次启动时候，需要在上一步数据的基础上继续下载，我们调用 Alamofire 这个方法&lt;br /&gt;
 &lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// Creates a `DownloadRequest` using the default `SessionManager` from the `resumeData` produced from a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// previous request cancellation to retrieve the contents of the original request and save them to the `destination`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// If `destination` is not specified, the contents will remain in the temporary location determined by the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// underlying URL session.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// On the latest release of all the Apple platforms (iOS 10, macOS 10.12, tvOS 10, watchOS 3), `resumeData` is broken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// on background URL session configurations. There&amp;#x27;s an underlying bug in the `resumeData` generation logic where the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// data is written incorrectly and will always fail to resume the download. For more information about the bug and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// possible workarounds, please refer to the following Stack Overflow post:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///    - http://stackoverflow.com/a/39347461/1342462&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter resumeData:  The resume data. This is an opaque data blob produced by `URLSessionDownloadTask`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///                          when a task is cancelled. See `URLSession -downloadTask(withResumeData:)` for additional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///                          information.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - parameter destination: The closure used to determine the destination of the downloaded file. `nil` by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// - returns: The created `DownloadRequest`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resumingWith&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;resumeData&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Data&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;destination&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Alamofire&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;DownloadRequest&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;DownloadFileDestination&lt;/span&gt;? &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Alamofire&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;DownloadRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这个接口需要我们传入已存在的数据，然后基于我们传入的数据进行下载，它支持从新指定目的地路径，如果你有需要可以重新指定&lt;br /&gt;
 &lt;figure class=&#34;highlight erlang-repl&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Alamofire.download(resumingWith: tmpData!)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 同样他返回一个 request 的对象，我们可以通过点语法来拿到进度、response 等信息&lt;/p&gt;
&lt;h2 id=&#34;批量下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批量下载&#34;&gt;#&lt;/a&gt; 批量下载&lt;/h2&gt;
&lt;p&gt;当我们需要同时下载很多东西的时候，往往需要我们自己维护一个下载队列，比如下一个载素材列表之类的。Alamo 给我们提供了下载的接口，但是下载的线程队列需要我们自己去维护，其实就是一个多线程并发队列。&lt;/p&gt;
&lt;h4 id=&#34;gcd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcd&#34;&gt;#&lt;/a&gt; GCD&lt;/h4&gt;
&lt;p&gt;我们很自然而然的想到 GCD，但是 GCD 有一个问题无法控制最大并发数，而且对队列的管理也并不完善，比如我们要下载 100 个文件，如果同时下载的话开辟 100 个线程，那肯定是不行的，先不说移动设备是否支持 (最多 70 个左右)，即使支持了那这个开销太大。虽说 GCD 的话可以使用信号量进行线程控制，但是每个线程的暂停启动之类的又是问题，而且毕竟是曲线救国的方法。&lt;/p&gt;
&lt;h4 id=&#34;operationqueue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#operationqueue&#34;&gt;#&lt;/a&gt; OperationQueue&lt;/h4&gt;
&lt;p&gt;Operation 及 OperationQueue 是基于 GCD 封装的对象，作为对象可以提供更多操作选择，可以用方法或 block 实现多线程任务，同时也可以利用继承、类别等进行一些其他操作；但同时实现代码相对复杂一些。但是他毕竟不像 GCD 那样使用 C 语言实现，所以效率会相比 GCD 低一些。但是对线程的控制的灵活性要远高于 GCD，对于下载线程来说可以优先选择这个。&lt;/p&gt;
&lt;h4 id=&#34;实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h4&gt;
&lt;p&gt;我们把每一个下载任务封装成一个 operation。注意 Operation 不能直接使用，我们需要使用他的子类，这里我选择使用  &lt;code&gt;BlockOperation&lt;/code&gt;  他的闭包则是需要执行的下载任务，然后我们把他添加进 queue 中便开始执行了任务&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight roboconf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let op : BlockOperation = BlockOperation &amp;#123; [&lt;span class=&#34;attribute&#34;&gt;weak self] in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;            Alamofire.download(&amp;quot;http&lt;/span&gt;://clips&lt;span class=&#34;variable&#34;&gt;.vorwaerts-gmbh&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.de&lt;/span&gt;/big_buck_bunny&lt;span class=&#34;variable&#34;&gt;.mp&lt;/span&gt;4&amp;quot;, method: &lt;span class=&#34;variable&#34;&gt;.get&lt;/span&gt;, parameters: nil, encoding: URLEncoding&lt;span class=&#34;variable&#34;&gt;.default&lt;/span&gt;, headers: nil) &amp;#123; (url, response) -&amp;gt; (destinationURL: URL, options: DownloadRequest&lt;span class=&#34;variable&#34;&gt;.DownloadOptions&lt;/span&gt;) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return (URL(fileURLWithPath: String(describing : NSSearchPathForDirectoriesInDomains(&lt;span class=&#34;variable&#34;&gt;.documentDirectory&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;.userDomainMask&lt;/span&gt;, false)[0]+&amp;quot;123&lt;span class=&#34;variable&#34;&gt;.mp&lt;/span&gt;4&amp;quot;)), [&lt;span class=&#34;variable&#34;&gt;.createIntermediateDirectories&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;.removePreviousFile&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;span class=&#34;variable&#34;&gt;.downloadProgress&lt;/span&gt; &amp;#123; [weak self] (pro) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    let percent = Float(pro&lt;span class=&#34;variable&#34;&gt;.completedUnitCount&lt;/span&gt;) / Float(pro&lt;span class=&#34;variable&#34;&gt;.totalUnitCount&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if count == 0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self?&lt;span class=&#34;variable&#34;&gt;.downLoadLabel&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.snp&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.remakeConstraints&lt;/span&gt; &amp;#123; (make) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.width&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;(300 * percent)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.height&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.top&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;((self?&lt;span class=&#34;variable&#34;&gt;.stopButton&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.snp&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.bottom&lt;/span&gt;)!)&lt;span class=&#34;variable&#34;&gt;.offset&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.left&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalToSuperview&lt;/span&gt;()&lt;span class=&#34;variable&#34;&gt;.offset&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self?&lt;span class=&#34;variable&#34;&gt;.downLoadLabel&lt;/span&gt;2&lt;span class=&#34;variable&#34;&gt;.snp&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.remakeConstraints&lt;/span&gt; &amp;#123; (make) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.width&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;(300 * percent)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.height&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.top&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalTo&lt;/span&gt;((self?&lt;span class=&#34;variable&#34;&gt;.downLoadLabel&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.snp&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.bottom&lt;/span&gt;)!)&lt;span class=&#34;variable&#34;&gt;.offset&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            make&lt;span class=&#34;variable&#34;&gt;.left&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;.equalToSuperview&lt;/span&gt;()&lt;span class=&#34;variable&#34;&gt;.offset&lt;/span&gt;(30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;span class=&#34;variable&#34;&gt;.responseJSON&lt;/span&gt; &amp;#123; (response) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    switch response&lt;span class=&#34;variable&#34;&gt;.result&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    case &lt;span class=&#34;variable&#34;&gt;.success&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        print(&amp;quot;success&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    case &lt;span class=&#34;variable&#34;&gt;.failure&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self?&lt;span class=&#34;variable&#34;&gt;.tmpData&lt;/span&gt; = response&lt;span class=&#34;variable&#34;&gt;.resumeData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        print(&amp;quot;failed&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue&lt;span class=&#34;variable&#34;&gt;.addOperation&lt;/span&gt;(op)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 每一个 opeeation 对象我们都可以设置他的优先级、启动、暂停、等属性，简单的调用接口就可以，在此就不一一作解释了。然后我们需要对我们的 queue 进行设置，我们设置最大并发数，大家可以根据实际情况来设置，demo 中我只有两个下载任务，所以我就设置最大并发数为 1 这样就是一个一个下载。&lt;br /&gt;
&lt;figure class=&#34;highlight lasso&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;queue&lt;/span&gt; : OperationQueue = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; que : OperationQueue = OperationQueue()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        que.maxConcurrentOperationCount = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; que&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 我们运行然后点击开始下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpw0vlzbp6g308h0gnkjm.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;很奇怪我们发现他还是同时下载，我们又试了其他的个数，无论多少都是同时下载，最大线程数量完全不起作用，再反过来看下上面加入 queue 的任务。正常来说每一个 operation 都要等上一个 operation 完成后才会执行，而系统判断完成的标准就是上一个 operation 的闭包走完，我们闭包中放入的是一个下载任务，而 Alamofire 的下载都是异步执行，所以导致 operation 的闭包走完了，但是其实下载是异步在另一个线程执行的，实际上下载没有完成，知道原因我们对症下药，只需要保证 operation 闭包中的代码是同步执行的就 OK 了。而 Alamofire 是基于 URLSession 来实现的，并没有像 connection 那样提供同步的方法，所以我们使用信号量卡一下，像这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpw1444jp0j31610qbgrr.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样之后就会按照我们设置好的队列进行了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpw15riwhjg308h0gnb2i.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有人会说下载同步进行会不会有影响，其实不会的首先我们实现同步的方式是信号量，本质上还是异步的只是我们阻塞的当前的下载线程，这个被阻塞线程一定不是主线程 (除非 Alamofire 的开发者把他回调到主线程下载，这个基本不可能)，而且当我们把这个下载任务加到一个 operation 中之后，就注定不会在主线程中了，没一个 operation 都会被系统分配到一个非主线程的地方去做，所以这样不会性能有任何影响。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;因为时间紧迫，暂时做了这么多，也遇到了这些问题，所以写出了总结下，本文还会继续更新，会慢慢的整个网络层分享出来。就是可能更新会慢，毕竟工作量有点饱和。多谢关注&lt;/p&gt;
&lt;p&gt;
        &lt;div id=&#34;aplayer-bwMrXBRX&#34; class=&#34;aplayer aplayer-tag-marker&#34; style=&#34;margin-bottom: 20px;&#34;&gt;&lt;/div&gt;
			  &lt;script&gt;
				  var options = {&#34;narrow&#34;:false,&#34;autoplay&#34;:true,&#34;showlrc&#34;:0,&#34;mutex&#34;:true,&#34;music&#34;:[{&#34;title&#34;:&#34;Thank You Very Much&#34;,&#34;author&#34;:&#34;Margaret&#34;,&#34;url&#34;:&#34;https://molier-1256056152.cos.ap-guangzhou.myqcloud.com/Thankyou.mp3&#34;,&#34;pic&#34;:&#34;https://y.gtimg.cn/music/photo_new/T002R300x300M000000VbGX83hRicw.jpg?max_age=2592000&#34;,&#34;lrc&#34;:&#34;https://demo.meting.api.meto.moe/action/metingapi?server=tencent&amp;type=lrc&amp;id=001Ii3g54dIYpO&#34;}]};
				  options.element = document.getElementById(&#34;aplayer-bwMrXBRX&#34;);
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  &lt;/script&gt;&lt;/p&gt;
</content>
        <category term="swift" />
        <category term="网络请求" />
        <updated>2018-03-30T09:54:38.000Z</updated>
    </entry>
</feed>
