{
    "version": "https://jsonfeed.org/version/1",
    "title": "Molier • All posts by \"git\" tag",
    "description": "iOS 开发 移动App 博客 杂谈 随笔 相册",
    "home_page_url": "https://oliverqueen.cn",
    "items": [
        {
            "id": "https://oliverqueen.cn/2018-08-23-ChangeSvnToGit/",
            "url": "https://oliverqueen.cn/2018-08-23-ChangeSvnToGit/",
            "title": "SVN切换到Git",
            "date_published": "2018-08-23T12:47:19.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景：</h2>\n<p>SVN 和 Git 同样都是在特定时代下比较优秀的版本控制系统，但是随着时代的发展，SVN 越来越不能满足多人开发的需求，尤其是在多种多样，天马星空的业务场景面前，SVN 会显得力不从心。</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNbRwgy1fujxnf8ilhj30zk0m8gm9.jpg\" alt=\"\" /></p>\n<p><span id=\"more\"></span></p>\n<p>最近在将公司的项目从 SVN 迁移到 git，踩了不少坑，所以来记录下:</p>\n<p>因为迁移的快慢和整个仓库的大小，电脑配置有关，所以我先说下这边的情况</p>\n<ul>\n<li>\n<p>仓库：<br />\n仓库大概是 3.5G 左右，包含了 14500 + 的提交次数，其中包含了超过 500M 的单个文件</p>\n</li>\n<li>\n<p>电脑：<br />\n电脑配置就看图吧 ：</p>\n<p><img data-src=\"https://image-1256056152.cos.ap-nanjing.myqcloud.com/wz0geut3a8.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<p>在以上两种情况下，排除掉采坑的时间，总耗时在 10 小时左右，当时中途我也用过一台联系 X1 的本尝试过，配置如下：</p>\n<p><img data-src=\"https://image-1256056152.cos.ap-nanjing.myqcloud.com/072709.jpg\" alt=\"\" /><br />\n后来联想这台电脑放弃了，因为总耗时已经超过 30 小时，</p>\n<h2 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作：</h2>\n<h4 id=\"1生成作者文件\"><a class=\"anchor\" href=\"#1生成作者文件\">#</a> 1. 生成作者文件：</h4>\n<p>因为我们知道，在 SVN 上提交和在 Git 上提交对应提交者的信息展示是不同的，SVN 只会保存一个用户名，而 Git 会保存该用户的邮箱，所以我们迁移的第一步就要生成一个映射文件，将 SVN 上的用户名和其邮箱对应起来，就比如   <code>molier = molier &lt;123456@qq.com&gt;</code> , 转换的办法有很多，如果你团队里面的人不是很多的是时候，可以自己去提交记录中手动生成这样一个 TXT 文件<br />\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">XXX</span> = XXX &lt;XXX<span class=\"variable\">@XXX</span>.com&gt;XXX = XXX &lt;XXX<span class=\"variable\">@XXX</span>.com&gt;....</span><br></pre></td></tr></table></figure><br />\n 但是如果，多人开发人数很多的时候，手动转很累，我们就需要一个 Atlassian 的工具包  <code>svn-migration-scripts.jar</code> ，通过命令拉取 SVN 仓库的用户并生成对应的开发者信息映射文件，需要 Java 运行时环境支持，大家可能还需要安装 JDK：</p>\n<p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar svn-migration-scripts.jar authors https:<span class=\"regexp\">//</span>svn.example.com &gt; authors.txt</span><br></pre></td></tr></table></figure><br />\n 这样之后会在当前目录生成一个  <code>authors.txt</code>  文件</p>\n<h4 id=\"2转换仓库\"><a class=\"anchor\" href=\"#2转换仓库\">#</a> 2. 转换仓库</h4>\n<ul>\n<li>\n<p>整体转换:</p>\n<p>标准的 SVN 文件布局：<br />\n如果 SVN 仓库使用标准的了 /trunk, /branches 和 /tags 的目录结构，就可在运行命令时加上参数–stdlayout，使用如下命令<br />\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn clone --stdlayout --authors-file=authors.txt <span class=\"tag\">&lt;<span class=\"name\">svn-repo</span>&gt;</span>/<span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">克隆到文件夹的名字</span>&gt;</span>非标准的的SVN文件布局:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 如果 SVN 仓库是非标准的目录布局，那就需要分别显示指定参数–trunk, –branches, –tags。<br />\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn clone <span class=\"attribute\">--trunk</span>=/trunk <span class=\"attribute\">--branches</span>=/branches <span class=\"attribute\">--branches</span>=/bugfixes <span class=\"attribute\">--tags</span>=/tags <span class=\"attribute\">--authors-file</span>=authors.txt &lt;svn-repo&gt;/&lt;project&gt;&lt;克隆到文件夹的名字&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>部分转换:</p>\n<p>如果仓库非常庞大的话可以选择部分转换，也就只转换指定提交之后的提交，可以试用如下代码<br />\n <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn <span class=\"keyword\">clone</span> <span class=\"title\">-r123456</span>:HEAD --stdlayout --<span class=\"attr\">authors-file=</span>authors.txt <span class=\"tag\">&lt;svn-repo&gt;</span> <span class=\"tag\">&lt;克隆到文件夹的名字&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 不过这里需要注意的是如果使用这种方式来转换那么一定要指定 SVN 的代码根部，而不能指定分支，因为 SVN 的提交编号都是按照时间顺序来往下依次排列，不同的分支也可能提交编号是连续的，所以如果只关心编号的话就不能再指定分支了。</p>\n<p>以上三步中所用到的  <code>authors.txt</code>  即为上一步所生成的， <code>作者 -&gt; 作者 &lt;作者邮箱&gt;</code>  的对应关系文件.</p>\n</li>\n</ul>\n<h2 id=\"坑点\"><a class=\"anchor\" href=\"#坑点\">#</a> 坑点</h2>\n<p>完成以上操作的话如果一切正常那么你就会获得一个新的 Git 仓库，然后就可以添加到远端，进行多人开发了，至于 git 的操作并不在本文的范围内，下面会讲一下遇到的坑以及解决办法。</p>\n<h4 id=\"坑点一时间久\"><a class=\"anchor\" href=\"#坑点一时间久\">#</a> 坑点一：时间久</h4>\n<p>转换仓库是比较耗时的，因为他会一个提交一个提交的转换，转换的速度和你的仓库提交次数和电脑配置成正比，我当时转了十几个小时比较正常，而且转换完之后他还有个自己整理文件的过程也是很耗时的，不过如果你选择部分转换的话也可能很快，假如你一共 15000 个提交，然后你从 14999 来转换可能几分钟就够了。当然最好的办法就是下班前开始执行，第二天来了基本就差不多了。不过别高兴的太早，请看坑点二。</p>\n<h4 id=\"坑点二垃圾过多导致暂停\"><a class=\"anchor\" href=\"#坑点二垃圾过多导致暂停\">#</a> 坑点二：垃圾过多导致暂停</h4>\n<p>因为是要遍历所有的历史提交，所以可能会有很多的无用文件 比如项目一开始代文件结构很乱，然后慢慢的经过重构，之类的优化步入正轨，这过程中必然会删掉大量的无用、冗余的文件，虽然这些文件已经不复存在了，但是提交记录会有，而且通过 git 的原理来看他还是会把这些东西一一保存下来，所以就会造成大量无用的文件越来越多，而 Git 是有一个缓冲区 (具体大小不确定) 当你无用文件把缓冲区沾满了，那么转换过程会停止会爆出如下错误<br />\n <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auto packing <span class=\"keyword\">the</span> repository <span class=\"keyword\">in</span> background <span class=\"keyword\">for</span> optimum performance.</span><br><span class=\"line\">See <span class=\"string\">&quot;git help gc&quot;</span> <span class=\"keyword\">for</span> manual housekeeping.error: The <span class=\"keyword\">last</span> gc run reported <span class=\"keyword\">the</span> following. </span><br><span class=\"line\">Please correct <span class=\"keyword\">the</span> root cause <span class=\"keyword\">and</span> remove .git/gc.<span class=\"built_in\">log</span>.</span><br><span class=\"line\">Automatic cleanup will <span class=\"keyword\">not</span> be performed <span class=\"keyword\">until</span> <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> is removed.</span><br><span class=\"line\">warning: There are too many unreachable loose objects; </span><br><span class=\"line\">run <span class=\"string\">&#x27;git prune&#x27;</span> <span class=\"built_in\">to</span> remove them.gc <span class=\"comment\">--auto: command returned error: 255</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 大概意思是垃圾太多，转移暂停让你先清理垃圾，其实只要按照他说的 进到我们转了一半的仓库 进行  <code>git gc</code>  就可以，但是这样一来我们就需要一直守在电脑前，随时准备输入  <code>git gc</code>  而且假如你下班前开始跑结果第二天上班一看跑到一半就暂停了，白白浪费了一晚上的时间，真的会崩溃的。所以通过 google 找到了解决办法</p>\n<p><img data-src=\"https://image-1256056152.cos.ap-nanjing.myqcloud.com/073257.jpg\" alt=\"\" /></p>\n<p>也就是开始转换的时候先进入仓库输入  <code>git config gc.auto 0</code>  关闭 gc 功能，然后就可以一直跑到黑了，你大可以放心的运行命令然后下班回家。不过还有一点需要注意的是垃圾文件是否过多和你仓库大小没有太大关系，及时你仓库提交不多，但是每次提交都有很大改动的话也还是会出现这个问题，所以这里建议不管你仓库多大，都要先进行一下这个操作，以防万一。</p>\n<h4 id=\"坑点三大文件处理\"><a class=\"anchor\" href=\"#坑点三大文件处理\">#</a> 坑点三：大文件处理</h4>\n<p>git 和 SVN 不同，在 git 上提交的单个文件是有大小限制的，超过这个大小就不允许提交到仓库中，通常我们会用 git LFS 来解决，具体的安装，添加步骤网上大把的教程，就不在这里说，不过他只会告诉你大文件的大小和限制的大小，具体的大文件是哪个他不会告诉你，这里可以用以下命令查看<br />\n <figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r -<span class=\"built_in\">t</span> -l --full-name HEAD | sort -<span class=\"built_in\">n</span> -k <span class=\"number\">4</span> | tail -<span class=\"built_in\">n</span> <span class=\"number\">10</span> //查找git 仓库中排名前十的大文件(升序)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 他会输出前十个最大的文件，然后你再按需处理。但是当你把大文件添加到 LFS 中后再次推送还是会爆出同样的错误，而且还是同样的文件，也就是说你根本没添加成功，其实并不是这样的，在添加 LFS 中只要你操作没错，就是添加成功了，他还会报错的原因是因为虽然你工程中的大文件已经添加，但是你的历史提交记录中是包含大文件的代码快照的，所以你需要将历史上所有包含大文件的提交记录重写，删掉大文件相关的东西，git 中重写 commit 的命令是：<br />\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">filter</span>-branch --force --<span class=\"built_in\">index</span>-<span class=\"built_in\">filter</span> <span class=\"string\">&#x27;git rm -rf --cached --ignore-unmatch 你大文件所在的目录&#x27;</span> --prune-<span class=\"built_in\">empty</span> --<span class=\"keyword\">tag</span>-name-<span class=\"built_in\">filter</span> <span class=\"keyword\">cat</span> -- --<span class=\"keyword\">all</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 这个过程也比较漫长，他会便利你所有的提交记录并一一修改，不过就是漫长的等待就可以了，等到完成之后我们需要将代码 push 到远端，因为我们修改了所有的 commit 我们需要强制 push 使用如下命令<br />\n <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"keyword\">master</span> <span class=\"title\">--force</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"坑点四-打包时间过长\"><a class=\"anchor\" href=\"#坑点四-打包时间过长\">#</a> 坑点四：打包时间过长</h4>\n<p>再上一步我们执行完推送命令的时候，会先进行文件打包处理，这个过程也是非常漫长，而且非常消耗电脑资源的，按照我的电脑配置来说，这个过程一旦开始，电脑基本就是内存、cpu 全满的状态，鼠标也没法动，所以这个过程要有心理准备。漫长的等待之后就推送成功了。</p>\n",
            "tags": [
                "git",
                "代码版本控制"
            ]
        },
        {
            "id": "https://oliverqueen.cn/2018-08-22-GitFlow/",
            "url": "https://oliverqueen.cn/2018-08-22-GitFlow/",
            "title": "GitFlow流程",
            "date_published": "2018-08-23T06:20:39.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"关于gitflow\"><a class=\"anchor\" href=\"#关于gitflow\">#</a> 关于 gitflow</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念：</h2>\n<p>Git Flow 是构建在 Git 之上的一个组织、管理软件开发活动的模型。Git Flow 是一套使用 Git 进行源代码管理时的一套行为规范和，通过利用 Git 创建和管理分支的能力，为每个分支设定具有特定的含义名称，并将软件生命周期中的各类活动归并到不同的分支上。实现了软件开发过程不同操作的相互隔离。这种软件开发的活动模型被称为 “Git Flow”。</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h2>\n<p>gitflow 的\b核心就 branch，通过在项目的不同阶段对 branch 的不同操作包括但不限于 create、marge、rebase、等来实现一个完整的高效率的工作流程。一般而言，软件开发模型有常见的瀑布模型、迭代开发模型、以及最近出现的敏捷开发模型等不同的模型。每种模型有各自应用场景。<strong>Git Flow 重点解决的是由于源代码在开发过程中的各种冲突导致开发活动混乱的问题。因此，Git flow 可以很好的于各种现有开发模型相结合使用，尤其是多人合作开发时提高效率</strong>。用一张图来了解 gitflow 的流程：从右向左看 从上到下看</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1ftk5pkvn7ij30vy16cwhl.jpg\" alt=\"\" /></p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"branch\"><a class=\"anchor\" href=\"#branch\">#</a> Branch：</h2>\n<p>Branch 是 gitfolw 的核心。主要分为两大类 <strong>Main Branchs</strong> 和 <strong>Supporting branches</strong>, 其中 <strong>Main Branchs</strong> 中又包含了 <strong>Master</strong> 和 <strong>Develop</strong>，而 <strong>Supporting branches</strong> 中包含了 **Feature **、<strong>Release</strong>、<strong>Hotfix</strong> <strong>以及其他自定义分支</strong>，下面逐一讲解：</p>\n<h4 id=\"master\"><a class=\"anchor\" href=\"#master\">#</a> Master:</h4>\n<ul>\n<li>\n<p>描述：</p>\n<p>master 分支上存放的是最稳定的正式版的代码，并且该分支的代码应该是随时可在开发环境中使用的代码（Production Ready state）。当一个版本开发完毕后，产生了一份新的稳定的可供发布的代码时，master 分支上的代码要被更新，同时，每一次更新，都需要在 master 上打上对应的版本号 (tag)。</p>\n</li>\n<li>\n<p>生成及销毁：</p>\n<p>任何人不允许在 master 上进行代码的直接提交，只接受合入，Master 上的代码必须是要从经过多轮测试且已经发布一段时间 (根据 DAU 以及项目实际情况来定，个人建议 K 歌国际版可以定为一周) 且线上已经稳定的 <strong>release</strong> 分支合并进去，然后在 Master 上生成 tag (通常就是对应的版本号)</p>\n</li>\n<li>\n<p>命名：</p>\n<p>master</p>\n</li>\n</ul>\n<h4 id=\"develop\"><a class=\"anchor\" href=\"#develop\">#</a> Develop:</h4>\n<ul>\n<li>\n<p>描述：</p>\n<p>develop 分支是保存当前最新版本开发成果的分支。该分支上的代码允许有 BUG，但是必须保证编译通过，且该分支可以作为每天夜间测试的分支 (如果有夜间测试的话) 所以该分支也叫做 Nightly build。当 develop 分支上的代码已实现了软件需求说明书中所有的功能 (必须经过开发自测，但是不必经过 QA) 且相对稳定时候，就可以基于此分支来拉出新的 release 分支交付 QA 进行测试。</p>\n</li>\n<li>\n<p>生成及销毁：</p>\n<p>Develop 分支是由一个人 (通常是 Team Leader) 从 Master 中拉出，任何人不得在 Develop 上进行代码提交，只接受合入。Develop 上所有代码一定都是由 <strong>Supporting branches</strong> 中的 Branch 合并进来，且合入 Develop 的分支必须保证功能完整，可以独立运行，可允许包含一些 BUG (但是最好经过自测，不要有太大或者太明显的 BUG，比如一启动就 crash 之类的)。</p>\n</li>\n<li>\n<p>命名：</p>\n<p>develop</p>\n</li>\n<li>\n<p>流程：</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1ftk7aszas4j30eu0mc74p.jpg\" alt=\"\" /></p>\n<h4 id=\"feature\"><a class=\"anchor\" href=\"#feature\">#</a> Feature:</h4>\n<ul>\n<li>\n<p>描述：</p>\n<p>Feature 分支通常叫做功能分支，也可以叫做个人分支，一般命名为 <strong>feature/XXXX</strong>, 该分支就是每一个开发人员进行开发的分支，比如做一些功能、需求之类的东西，这个分支上的代码变更最终合并回 develop 分支或者干脆被抛弃掉（例如实验性且效果不好的代码变更）。一般而言，feature 分支代码可以保存在开发者自己的代码库中而不强制提交到主代码库里。</p>\n</li>\n<li>\n<p>生成及销毁：</p>\n<p>每个开发者从通常会 Develop 分支中拉取自己的 feature，且开发者可以随意的在自己的 feature 上进行操作 包括但不限于 提交、回滚、删除。如果最终需要合并入 develop 那就要保证功能的完整性以及代码的稳定新，比如我在 feature 上做了 3 个需求但是由于时间关系我只做了两个，那也可以将 feature 合并入 develop，然后剩下的那一个需求等有时间了再去 feature 上做完之后再合入 develop。所以这里说的功能的完整性并不是值得要做完所有的功能，而是要保证你所要做的所有需求中的某一个或者某几个功能已经做完，不允许把做到一半的功合并入 develop。合并入 develop 尽量上删除远端的 feature 分支，本地的 feature 可以视情况而取舍。</p>\n</li>\n<li>\n<p>命名：</p>\n<p>feature 通常是从 develope 上拉取 所有通常用 <strong>dev_功能描述_英文名</strong> 来命名。比如 <strong>feature/dev_refresh_molierzhang</strong></p>\n</li>\n<li>\n<p>流程：</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1ftk7br1fvqj307e0jugln.jpg\" alt=\"\" /></p>\n<h4 id=\"release\"><a class=\"anchor\" href=\"#release\">#</a> Release:</h4>\n<ul>\n<li>\n<p>描述：</p>\n<p>Release 分支通常叫做发布分支，也可以叫做测试 - 发布分支，一般命名为 <strong>Release/1.2.3</strong>（后面是版本号）, 该分支是为测试 - 发布新的产品版本而开辟的。因为包含测试流程，所以在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等等）。通过在 release 分支上进行这些工作可以让 develop 分支空闲出来以接受新的 feature 分支上的代码提交，进入新的软件开发迭代周期。<strong>注意：该分支上的代码一定是可编译可运行的，允许包含小 BUG</strong></p>\n</li>\n<li>\n<p>生成及销毁：</p>\n<p>当 develop 分支上的代码已经包含了该版本所有即将发布的功能和需求，并且已通过自测且已基本稳定，我们就可以考虑准备基于 develop 拉取 release 分支了。而所有在当前即将发布的版本之外的业务需求一定要确保不能混到 release 分支之内（避免由此引入一些不可控的系统缺陷）。成功的派生了 release 分支之后，develop 分支就可以为 “下一个版本” 服务了。所谓的 “下一个版本” 是在当前即将发布的版本之后发布的版本。开发人员可以在此分支上修改 BUG，进行提交、回滚等操作，但是与 feature 不同的是 release 分支是被多人操作的，不像 feature，所以一定要小心避免冲突。当现在 QA 测试没有问题，便从 release 上发布上线，且经过一段时间的验证没有问题后合入 master，并且删除 release 分支，其实根据 release 分支的特性我们可以使用 Git Hook 触发软件自动测试以及生产环境代码的自动更新工作。这些自动化操作将有利于减少新代码发布之后的一些事务性工作。</p>\n</li>\n<li>\n<p>命名：</p>\n<p>release/1.2.3 后面跟对应的版本号</p>\n</li>\n<li>\n<p>流程：</p>\n<p>同 feature</p>\n</li>\n</ul>\n<h4 id=\"hotfix\"><a class=\"anchor\" href=\"#hotfix\">#</a> Hotfix:</h4>\n<ul>\n<li>\n<p>描述：</p>\n<p>Hotfix 叫热修复分支，除了是计划外创建的以外，hotfix 分支与 release 分支十分相似，当已经发布的版本（Master 上代码）遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从 master 分支上指定的 tag 版本拉取 hotfix 分支来组织代码的紧急修复工作。这样做的显而易见的好处是不会打断正在进行的 develop 分支的开发工作，能够让团队中负责新功能开发的人与负责代码紧急修复的人并行、独立的开展工作。</p>\n</li>\n<li>\n<p>生成及销毁：</p>\n<p>由 Master 上拉取，进行修复，负责修改 BUG 的同事可以进行提交及其它操作，后续的热修复测试也在此分支上进行。通过测试验证没问题后有一个人 (通常为 teamleader)<strong> 合并入 Master 分支，且同时也要合并入 Develop 分支</strong></p>\n</li>\n<li>\n<p>命名：</p>\n<p>Hotfix/1.2.3 后面跟对应的版本号</p>\n</li>\n<li>\n<p>流程：</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1ftk81yr4iej308j0bqwf3.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>Git Flow 开发模型从源代码管理角度对通常意义上的软件开发活动进行了约束。应该说，为我们的软件开发提供了一个可供参考的管理模型。Git Flow 开发模型让开发代码仓库保持整洁，让小组各个成员之间的开发相互隔离，能够有效避免处于开发状态中的代码相互影响而导致的效率低下和混乱。</p>\n<p>所谓模型，在不同的开发团队，不同的文化，不同的项目背景情况下都有可能需要进行适当的裁剪或扩充。</p>\n<h2 id=\"效率工具\"><a class=\"anchor\" href=\"#效率工具\">#</a> 效率工具</h2>\n<p>推荐 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v\">sourceTree</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=\">gitkarken</span> (用免费版即可，不用充钱) 前者对 gitsubmodel 的支持不太好，不过目前介于我们没有实现组件化所以暂时可以无视；后者完美支持 gitsubmodel，但是在拉取一些比较大的库的时候可能会卡死，前公司一个项目 30G+ 会有卡死情况出现，后者界面炫酷一些 iOS 的话 Xcdoe 自带 git 也可以试试。</p>\n",
            "tags": [
                "git",
                "效率工作"
            ]
        }
    ]
}