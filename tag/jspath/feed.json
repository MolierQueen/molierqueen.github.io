{
    "version": "https://jsonfeed.org/version/1",
    "title": "Molier • All posts by \"jspath\" tag",
    "description": "iOS 开发 移动App 博客 杂谈 随笔 相册",
    "home_page_url": "https://oliverqueen.cn",
    "items": [
        {
            "id": "https://oliverqueen.cn/2018-03-14-Simple-HotFix-Mtehod/",
            "url": "https://oliverqueen.cn/2018-03-14-Simple-HotFix-Mtehod/",
            "title": "简单的iOS线上热修复方案",
            "date_published": "2018-03-14T06:04:46.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"向大佬致敬\"><a class=\"anchor\" href=\"#向大佬致敬\">#</a> 向大佬致敬</h2>\n<p>总是喜欢把参考资料、致谢等写在文章最前面，毕竟是站在人家的肩膀上，向大佬致敬，写这篇文章的也是参考他的 然后加上一些自己的思考，主要目的还是自己再写一遍 Demo 和文档，以便加深记忆，也帮助自己更好的理解，有句话说：看懂的东西不一定就是学会了，自己能在不看资料的前提下写出来才算是略知一二。<br />\n<img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpcbkfx1z9j319e0kkdmp.jpg\" alt=\"\" /></p>\n<p>以下是 ** <span class=\"exturl\" data-url=\"aHR0cDovL2xpbWJveS5tZS90ZWNoLzIwMTgvMDMvMDQvaW9zLWxpZ2h0d2VpZ2h0LWhvdGZpeC5odG1s\">原文链接</span><strong>有兴趣的还可以看下</strong><span class=\"exturl\" data-url=\"aHR0cDovL2xpbWJveS5tZS8=\">大佬博客</span> **<br />\n<span id=\"more\"></span></p>\n<h2 id=\"工作原理分析\"><a class=\"anchor\" href=\"#工作原理分析\">#</a> 工作原理分析</h2>\n<p>要实现热修复其实原理就是我们可以动态的修改代码，在方法前、中、后插入自己想要的东西或者代码。其实这个需求并不难，iOS 的运行时机制可以满足我们的这个要求，但是如果是已经上架了的 APP, 已经打成了 Ipa 包我们该如何修改呢？这里就需要服务端去控制，通过下发不同的内容来达到我们想要的目的，但是这里有一个要求，服务端所下发的内容并不能是任意的，而是要通过下发的内容调起我们 App 内的 RunTime 机制然后进行偷梁换柱。满足这个要求的数据格式只有字符串化的 JS 代码，因为我们知道在 iOS 中 JS 代码是可以调用 OC 的代码。综上所述打到热修复整套流程所需的技术如下：</p>\n<ul>\n<li>\n<p>Runtime：</p>\n<p>可以在本站搜索 Runtime 关键字找到 Runtime 相关资料</p>\n</li>\n<li>\n<p>与服务器交互：</p>\n<p>现在大部分 APP 都具有于服务端交互的能力，就是我们常说的网络请求 AFNetWorking 等</p>\n</li>\n<li>\n<p>JS 与 OC 交互：</p>\n<p>大家可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMTk2ODllMGVkODM=\">这篇文章</span>，主要参考方式二，使用 JavaScriptCore 进行交互</p>\n</li>\n</ul>\n<p>进行了上述操作后每次用户启动，App 都会进行如下操作</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpcce8vzimj30vg0t0wva.jpg\" alt=\"\" /></p>\n<p>这样一来如果开发在项目发布出去后发现有 Crash 那么可以立即通过服务器下发 JS 代码来制定 APp 每次执行新方法 (新方法的定义也是在下发的 JS 代码中)，可以避免一些问题。</p>\n<h2 id=\"实际使用\"><a class=\"anchor\" href=\"#实际使用\">#</a> 实际使用</h2>\n<h4 id=\"第三方\"><a class=\"anchor\" href=\"#第三方\">#</a> 第三方</h4>\n<p>这里用到一个第三方库<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0ZWlwZXRlL0FzcGVjdHM=\"> Aspects</span> 这个库可以理解为一个 iOS 中的 Runtime 库，我们不用写繁琐的代码，直接调用他的接口即可，</p>\n<p><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">id</span>&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class=\"line\">                           withOptions:(AspectOptions)options</span><br><span class=\"line\">                            usingBlock:(<span class=\"built_in\">id</span>)block</span><br><span class=\"line\">                                 <span class=\"keyword\">error</span>:(NSError **)<span class=\"keyword\">error</span>;</span><br></pre></td></tr></table></figure></p>\n<p>其中的枚举就是选择我们要插入方法的位置，其中包含</p>\n<p><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef <span class=\"type\">NS_OPTIONS</span>(<span class=\"type\">NSUInteger</span>, <span class=\"type\">AspectOptions</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">AspectPositionAfter</span>   = 0,            /// <span class=\"type\">Called</span> after the original implementation (default)</span><br><span class=\"line\">    <span class=\"type\">AspectPositionInstead</span> = 1,            /// <span class=\"type\">Will</span> replace the original implementation.</span><br><span class=\"line\">    <span class=\"type\">AspectPositionBefore</span>  = 2,            /// <span class=\"type\">Called</span> before the original implementation.</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AspectOptionAutomaticRemoval</span> = 1 &lt;&lt; 3 /// <span class=\"type\">Will</span> remove the hook after the first execution.</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 这个库据说是对上线没有影响。</p>\n<h4 id=\"配置工程\"><a class=\"anchor\" href=\"#配置工程\">#</a> 配置工程</h4>\n<p>用实际代码来证明下，这是我 Controller 中的一个代码，很明显会产生数组越界的 Crash，假如我们在上线后才发现了这个问题，这时候需要修复</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> crashMethod:<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)crashMethod:(<span class=\"built_in\">NSInteger</span>)argument</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argument == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> * arr = @[<span class=\"string\">@&quot;1&quot;</span>];</span><br><span class=\"line\">        [arr objectAtIndex:<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 导入上面说的那个第三方.h 和.m 然后自己建立一个桥接类，用来处理 JS 和 O 的交互，大概的结构就是这样</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpcdbh9ahbj307k0duwfd.jpg\" alt=\"\" /></p>\n<p>其中交互类中暴露出如下接口</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;Aspects.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;objc/runtime.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Felix</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 初始化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)fixIt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 开始执行JS代码</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @param javascriptString 需要执行的JS</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)evalString:(<span class=\"built_in\">NSString</span> *)javascriptString;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>.m 文件的内容可以到大佬博客中参考这里不放出，不然篇幅太长。</p>\n<h4 id=\"开始使用\"><a class=\"anchor\" href=\"#开始使用\">#</a> 开始使用</h4>\n<p>因为我们最好用能控制代码里面的所有方法，所以我们要尽早的注册交互类，在 APpdelegate 中如下注册</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override point for customization after application launch.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [Felix fixIt];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *fixScriptString = <span class=\"string\">@&quot; \\</span></span><br><span class=\"line\"><span class=\"string\">    fixInstanceMethodReplace(&#x27;ViewController&#x27;, &#x27;crashMethod:&#x27;, function(instance, originInvocation, originArguments)&#123; \\</span></span><br><span class=\"line\"><span class=\"string\">    if (originArguments[0] == 0) &#123; \\</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;crash！！！！！&#x27;); \\</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else &#123; \\</span></span><br><span class=\"line\"><span class=\"string\">    runInvocation(originInvocation); \\</span></span><br><span class=\"line\"><span class=\"string\">    &#125; \\</span></span><br><span class=\"line\"><span class=\"string\">    &#125;); \\</span></span><br><span class=\"line\"><span class=\"string\">    \\</span></span><br><span class=\"line\"><span class=\"string\">    &quot;</span>;</span><br><span class=\"line\">    [Felix evalString:fixScriptString];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    如果是多个方法建议用循环执行</span></span><br><span class=\"line\"><span class=\"comment\">//    NSArray * hotFixStr = @[fixScriptString];</span></span><br><span class=\"line\"><span class=\"comment\">//    for (int i = 0; i &lt; hotFixStr.count; i ++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        [Felix evalString:hotFixStr[i]];</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 其中 JS 的代码就是我们所要修改的内容，可以看到当参数为 0 的时候输出 crash！！！然后不再继续执行了。实际项目中这段代码是由服务器动态返回的，如果我们要修改多个方法，就需要服务器返回 JS 字符串数组我们这边来进行循环处理即可。这时候在运行下代码不会崩溃，下面会输出一个 crash！！！！</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fpcdjfkqkmj30i4034t8s.jpg\" alt=\"\" /></p>\n<h2 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这个方法相比较之前的 JSpatch 是非常轻量级的，而且也只是实现了简单的容错功能，并不能做一些复杂的操作，比如生成一个对象之类的，不过对于一般的控制已经可以满足了，毕竟在苹果爸爸这么严厉的管制下能有这样的方法也还不错啊。</p>\n<p>\n        <div id=\"aplayer-AtmiJQux\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":0,\"mutex\":true,\"music\":[{\"title\":\"不知归期的故人\",\"author\":\"房东的猫\",\"url\":\"https://molier-1256056152.cos.ap-guangzhou.myqcloud.com/%E4%B8%8D%E7%9F%A5%E5%BD%92%E6%9C%9F%E7%9A%84%E6%95%85%E4%BA%BA.mp3\",\"pic\":\"https://y.gtimg.cn/music/photo_new/T002R300x300M000004NFJ230yX0Nz.jpg?max_age=2592000\",\"lrc\":\"https://demo.meting.api.meto.moe/action/metingapi?server=tencent&type=lrc&id=000zreoj2VtcID\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-AtmiJQux\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script></p>\n",
            "tags": [
                "热修复",
                "JSPath"
            ]
        }
    ]
}