{
    "version": "https://jsonfeed.org/version/1",
    "title": "Molier • All posts by \"k歌\" tag",
    "description": "iOS 开发 移动App 博客 杂谈 随笔 相册",
    "home_page_url": "https://oliverqueen.cn",
    "items": [
        {
            "id": "https://oliverqueen.cn/2018-06-19-MusicAbout/",
            "url": "https://oliverqueen.cn/2018-06-19-MusicAbout/",
            "title": "关于实现唱吧清唱功能的理解",
            "date_published": "2018-06-19T06:44:56.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h4 id=\"avfoundation\"><a class=\"anchor\" href=\"#avfoundation\">#</a> AVFoundation</h4>\n<p>在 iOS 上多媒体的处理主要依赖的是 AVFoundation 框架，而 AVFoundation 是基于 CoreAudio、CoreVideo、CoreMedia、CoreAnimation 之上高层框架，在 AVFoundation 框架之上苹果还提供给我们更高层一些处理媒体数据的框架。</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fsgu5859czj30ol0et75h.jpg\" alt=\"\" /><br />\n<span id=\"more\"></span></p>\n<p>如 AVKit、iOS 的 UIKit、OS 的 AppKit。AVFoundation 提供了大量强大的工具集，可通过这个框架处理音视频编程，但是如同苹果中的的 Kit 一样，封装的越高级，个性化就会困难些，一些实际项目中的奇葩需求难以实现。本章所讲的内容是 AVFoundation 上层加下层的 AVAudioEngine 实现。</p>\n<h4 id=\"avaudioengine\"><a class=\"anchor\" href=\"#avaudioengine\">#</a> AVAudioEngine</h4>\n<p>AVAudioEngine 是 Objective-C 的音频 API 接口，具有低延迟 (low-latency) 和实时 (real-time) 的音频功能，并且具有如下特点：</p>\n<ul>\n<li>\n<p>读写所有 Core Audio 支持的格式音频文件</p>\n</li>\n<li>\n<p>播放和录音使用 (files) 和音频缓冲区 (buffers)</p>\n</li>\n<li>\n<p>动态配置音频处理模块 (audio processing blocks)</p>\n</li>\n<li>\n<p>可以进行音频挖掘处理 (tap processing)</p>\n</li>\n<li>\n<p>可以进行立体声音频信号混合和 3d 效果的混合</p>\n</li>\n<li>\n<p>音乐设备数字接口 MIDI 回放和控制，通过乐器的采样器</p>\n</li>\n</ul>\n<p>AVAudioEngine 的工作原理可以简单的分为三个部分:</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fsgusaq6ttj316208i41t.jpg\" alt=\"\" /></p>\n<p>从图中可以看出 AVAudioEngine 的每一步操作都是一个音频操作节点 (Node)，每个完整的操作都包含输入节点和输出节点以及经中间的若干个处理节点，包括但不限于，添加音效、混音、音频处理等。整体的流程和 GPUImage 的流程差不多，都是链式结构，通过节点来链接成一个完整的流水线，其中每个节点都有自己特有的属性，可以通过改变属性的值来改变经由该节点后的音频输出效果，用音效节点举例：一个声音流通过这个音效节点，假如这个节点可以给该段声音添加一个回响的效果，那么通过该节点特有的属性可以设置回想的间隔、干湿程度等，这样一来经过这个节点处理过的声音流就会变成我们想要的样子，然后他作为为一个输入了再次流入其他节点。上图的 Mixer 其实是包含若干个这样的音效节点</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fsgvxmt21cj310c0dpq4l.jpg\" alt=\"\" /></p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>清唱的功能很简单，就是通过麦克风录制声音，然后添加音效或者做一些处理之后再输出，因为不要配乐，所以省略了一大部分操作 (添加配乐完整 K 歌在下期会讲到)，但是有一个问题就是耳返，也叫返送：</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fsgv4t4pd6j30n602ujsg.jpg\" alt=\"\" /></p>\n<p>这个东西是必不可少的，因为有了耳返你就可以实时调整自己的声音，极大的降低了走调的风险和尴尬，一个很简单的例子，现在有不少人喜欢在水房唱歌或者是洗澡的时候唱歌，原因就是在水房或者是卫生间通常会有回音，而回音就是天然的耳返，所以在有回音的地方唱歌就会感觉自己的声音洪亮而且音准很好 (因为你可以实时的通过回音来调整自己的声调)。演唱会上唱歌的人的耳机中都是耳返。而且耳返要有一个要求就是，你所听到的你自己的声音一定要和观众或者是其他的人听到的一样，不然就不会有作用，我们平时自己说话自己能听到是因为声音通过骨传导到达我们的耳朵，而听众听到的是通过空气介质传播，所以是否有耳返直接决定了你演唱质量的好坏。</p>\n<p>使用 AVAudioEngine 来完成这个功能其实就是运用了他的实时音频的特点，他可以几乎在没有延迟的情况下同时创建音频的输入和输出，而且对这个做了高度的封装使我们能更加关心音效调整</p>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<h6 id=\"创建音频文件用来接收待录制的声音\"><a class=\"anchor\" href=\"#创建音频文件用来接收待录制的声音\">#</a> 创建音频文件用来接收待录制的声音：</h6>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建音频文件。</span></span><br><span class=\"line\">   <span class=\"built_in\">NSString</span> * path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"built_in\">NSString</span> * filePath = [path stringByAppendingPathComponent:<span class=\"string\">@&quot;123.caf&quot;</span>];</span><br><span class=\"line\">   <span class=\"built_in\">NSURL</span> * url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:filePath];</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"创建avaudioengine并打通输入和输出节点\"><a class=\"anchor\" href=\"#创建avaudioengine并打通输入和输出节点\">#</a> 创建 AVAudioEngine，并打通输入和输出节点：</h6>\n<ul>\n<li>\n<p>创建 AVAudioEngine，并初始化。这里要弄成属性不然会被释放，没有效果</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioEngine</span> * engine;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioMixerNode</span> * mixer;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">self.engine</span> = [[AVAudioEngine alloc] init]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">self.mixer</span> = [[AVAudioMixerNode alloc] init]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>打通输入和输出节点：</p>\n<p><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"variable\">_engine</span> connect:<span class=\"variable\">_engine</span>.inputNode <span class=\"keyword\">to</span>:<span class=\"variable\">_engine</span>.outputNode <span class=\"built_in\">format</span>:[<span class=\"variable\">_engine</span>.inputNode inputFormatForBus:AVAudioPlayerNodeBufferLoops]];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 所使用的是如下方法。<br />\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*!\t@method connect:to:format:</span></span><br><span class=\"line\"><span class=\"comment\">\t@abstract</span></span><br><span class=\"line\"><span class=\"comment\">\t\tEstablish a connection between two nodes</span></span><br><span class=\"line\"><span class=\"comment\">\t@discussion</span></span><br><span class=\"line\"><span class=\"comment\">\t\tThis calls connect:to:fromBus:toBus:format: using bus 0 on the source node,</span></span><br><span class=\"line\"><span class=\"comment\">\t\tand bus 0 on the destination node, except in the case of a destination which is a mixer,</span></span><br><span class=\"line\"><span class=\"comment\">\t\tin which case the destination is the mixer&#x27;s nextAvailableInputBus.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)connect:(<span class=\"built_in\">AVAudioNode</span> *)node1 to:(<span class=\"built_in\">AVAudioNode</span> *)node2 format:(<span class=\"built_in\">AVAudioFormat</span> * __<span class=\"keyword\">nullable</span>)format;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>开启 AVAudioEngine:</p>\n<p>该方法可能会开启失败，需要开发者自定去处理</p>\n<p><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[_engine startAndReturnError:nil]</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上步骤走完后并且开启成功你就会发现你从耳机里面可以实时的听到你的声音了。</p>\n</li>\n<li>\n<p>音效：</p>\n<p>正常来说光有耳返还不够，因为清唱虽然没有配乐伴奏，但是是支持用户调节音效的，类似于变声。这就用到 AVAudioEngine 中的 AVAudioUnitEffect 类。</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fsgxpydeq8j30hw0cwq32.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>1.AVAudioUnitReverb: 混响，混响可以模拟咱们在一个空旷的环境，比如教堂、大房间等，这样咱们在说话的时候，就会有回音，并且声音也比较有立体感。其中该类别下面又分为<br />\n <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">AVAudioUnitReverbPreset</span>) &#123;</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetSmallRoom</span>       = 0,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetMediumRoom</span>      = 1,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetLargeRoom</span>       = 2,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetMediumHall</span>      = 3,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetLargeHall</span>       = 4,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetPlate</span>           = 5,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetMediumChamber</span>   = 6,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetLargeChamber</span>    = 7,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetCathedral</span>       = 8,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetLargeRoom2</span>      = 9,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetMediumHall2</span>     = 10,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetMediumHall3</span>     = 11,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitReverbPresetLargeHall2</span>      = 12</span><br><span class=\"line\">  &#125; <span class=\"type\">NS_ENUM_AVAILABLE</span>(10_10, 8_0);</span><br></pre></td></tr></table></figure><br />\n 从名字可以看出是在模拟不同环境下的音效，比如其中的大中小屋子，大厅等。</p>\n<p>该类别可以自定义的属性是 wetDryMix，就是可以让我们的声音更空灵。</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/*! @property wetDryMix</span></span><br><span class=\"line\"><span class=\"comment\">    @abstract</span></span><br><span class=\"line\"><span class=\"comment\">    Blend of the wet and dry signals</span></span><br><span class=\"line\"><span class=\"comment\">    Range:      0 (all dry) -&gt; 100 (all wet)</span></span><br><span class=\"line\"><span class=\"comment\">    Unit:       Percent</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"type\">float</span> wetDryMix;</span><br></pre></td></tr></table></figure></p>\n<p>可以通过如下方式创建 AVAudioUnitReverb<br />\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AVAudioUnitReverb</span> <span class=\"operator\">*</span> reverd <span class=\"operator\">=</span> [[<span class=\"type\">AVAudioUnitReverb</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">reverd.wetDryMix <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">[reverd loadFactoryPreset:<span class=\"type\">AVAudioUnitReverbPresetLargeRoom</span>];</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>2.AVAudioUnitEQ: 均衡器，咱们可以使用均衡器来调节咱们音频的各个频段，比如，我想让我的低音更加浑厚，我就可以调节 EQ 的 20-150HZ 的频段，如果你想让你的声音更加明亮，那可以调节 500-1KHZ 的频段，这个调节涉及到一些专业方面的知识，如果只是想让用户去使用的话，可以用苹果给我们更封装好的几个效果即可，这个就类似于 photoshop 和美图秀秀的区别。</p>\n<p><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">AVAudioUnitEQFilterType</span>) &#123;</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeParametric</span>        = 0,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeLowPass</span>           = 1,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeHighPass</span>          = 2,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeResonantLowPass</span>   = 3,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeResonantHighPass</span>  = 4,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeBandPass</span>          = 5,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeBandStop</span>          = 6,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeLowShelf</span>          = 7,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeHighShelf</span>         = 8,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeResonantLowShelf</span>  = 9,</span><br><span class=\"line\">  <span class=\"type\">AVAudioUnitEQFilterTypeResonantHighShelf</span> = 10,</span><br><span class=\"line\">  &#125; <span class=\"type\">NS_ENUM_AVAILABLE</span>(10_10, 8_0);</span><br></pre></td></tr></table></figure></p>\n<p>上面是一些苹果帮助我们定义好的滤波器，比如低通滤波器 衰弱高频、可以引发共鸣的 低通滤波器<br />\n不过一般在清唱的时候这个用处不大，这个效果主要用到在配合伴奏的时候，如果伴奏音调过高，可以使用该方法适当的提高人声音调或者降低伴奏的音调，</p>\n<p>可以通过如下方式使用，然后更改这个节点一些属性值。<br />\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAudioUnitEQ * <span class=\"keyword\">eq</span> <span class=\"operator\">=</span> [[AVAudioUnitEQ alloc] initWithNumberOfBands:<span class=\"number\">1</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">AVAudioUnitEQFilterParameters * <span class=\"keyword\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">eq</span>.bands.firstObject<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">filter</span>.filterType <span class=\"operator\">=</span> AVAudioUnitEQFilterTypeResonantHighShelf<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">filter</span>.bandwidth <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">filter</span>.gain <span class=\"operator\">=</span> <span class=\"number\">20</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>3.AVAudioUnitDistortion：失真，这个就是我们常说的电音，一般说唱或者摇滚，重金属之类的曲风会用到这个效果，同样苹果给我们提供了预设的几个效果，如果不是有专业的需求我们可以直接使用。</p>\n<p><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">AVAudioUnitDistortionPreset</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetDrumsBitBrush</span>           = 0,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetDrumsBufferBeats</span>        = 1,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetDrumsLoFi</span>               = 2,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiBrokenSpeaker</span>      = 3,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiCellphoneConcert</span>   = 4,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDecimated1</span>         = 5,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDecimated2</span>         = 6,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDecimated3</span>         = 7,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDecimated4</span>         = 8,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDistortedFunk</span>      = 9,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDistortedCubed</span>     = 10,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiDistortedSquared</span>   = 11,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiEcho1</span>              = 12,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiEcho2</span>              = 13,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiEchoTight1</span>         = 14,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiEchoTight2</span>         = 15,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetMultiEverythingIsBroken</span> = 16,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetSpeechAlienChatter</span>      = 17,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetSpeechCosmicInterference</span> = 18,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetSpeechGoldenPi</span>          = 19,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetSpeechRadioTower</span>        = 20,</span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitDistortionPresetSpeechWaves</span>             = 21</span><br><span class=\"line\">&#125; <span class=\"type\">NS_ENUM_AVAILABLE</span>(10_10, 8_0);</span><br></pre></td></tr></table></figure><br />\n 其实里面有些还是比较有感觉的，比如扭曲的立方体，或者外星人的喋喋不休等。有兴趣的可以说都试试</p>\n<p>使用方式同之前的效果一样</p>\n<p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAudioUnitDistortion * <span class=\"keyword\">dist </span>= [[AVAudioUnitDistortion alloc] init];</span><br><span class=\"line\">[<span class=\"keyword\">dist </span>loadFactoryPreset:AVAudioUnitDistortionPresetDrumsBitBrush];</span><br><span class=\"line\"><span class=\"keyword\">dist.preGain </span>= <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">dist.wetDryMix </span>= <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>4.AVAudioUnitDelay: 延迟，延迟就是 发出一个声音之后，过段时间再次发出，一直衰减到听不见。类似咱们的回声。可以通过里面的属性去细微的调节延迟的时间、速度等。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>添加音效：<br />\n主要流程就是链式关系</p>\n<p><strong>input (Mic 或者音频文件) -&gt; 效果器 -&gt;output</strong></p>\n<p>如果是多个音效</p>\n<p><strong>input (Mic 或者音频文件) -&gt; 效果器 1-&gt; 效果器 2-&gt;output</strong></p>\n<p>我们以 AVAudioUnitReverb 效果为例</p>\n<p><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAudioUnitReverb * reverb = [[AVAudioUnitReverb alloc] init];</span><br><span class=\"line\">[reverb loadFactoryPreset:AVAudioUnitReverbPresetLargeRoom];</span><br><span class=\"line\">reverb.wetDryMix = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">//把混响附着到音频引擎</span></span><br><span class=\"line\">[<span class=\"variable\">_engine</span> attachNode:reverb];</span><br><span class=\"line\"><span class=\"comment\">//依次链接输入-&gt; 混响 -&gt; 输出</span></span><br><span class=\"line\">[<span class=\"variable\">_engine</span> connect:<span class=\"variable\">_engine</span>.inputNode <span class=\"keyword\">to</span>:reverb <span class=\"built_in\">format</span>:[<span class=\"variable\">_engine</span>.inputNode inputFormatForBus:AVAudioPlayerNodeBufferLoops]];</span><br><span class=\"line\">[<span class=\"variable\">_engine</span> connect:reverb <span class=\"keyword\">to</span>:<span class=\"variable\">_engine</span>.outputNode <span class=\"built_in\">format</span>:[<span class=\"variable\">_engine</span>.inputNode inputFormatForBus:AVAudioPlayerNodeBufferLoops]];</span><br><span class=\"line\"><span class=\"comment\">//启动引擎</span></span><br><span class=\"line\">[<span class=\"variable\">_engine</span> startAndReturnError:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 同理添加多个音效则需要严格按照 <strong>input (Mic 或者音频文件) -&gt; 效果器 1-&gt; 效果器 2-&gt;output</strong> 顺序来添加</p>\n<p>综上：完成了以上所有操作后你就可以实时在耳机中听到自己经过音效处理过的声音了，而且这样带着耳机唱歌效果会非常好，声音洪亮不易跑调。还可以针对不同的曲风调整自己的音效。</p>\n</li>\n</ul>\n<h6 id=\"声音混合-写入本地\"><a class=\"anchor\" href=\"#声音混合-写入本地\">#</a> 声音混合、写入本地：</h6>\n<p>我们需要把我们清唱的歌曲录制到本地，正常的录制时使用 AVAudioRecorder 来进行录制的，像这样</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVAudioSession</span> * session = [<span class=\"built_in\">AVAudioSession</span> sharedInstance];</span><br><span class=\"line\">    [session setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span> error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    [session setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> * path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.filePath = [path stringByAppendingPathComponent:<span class=\"string\">@&quot;SoWeak&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.recordFileUrl = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.filePath];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置参数</span></span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *recordSetting = [[<span class=\"built_in\">NSDictionary</span> alloc] initWithObjectsAndKeys:</span><br><span class=\"line\">                                   <span class=\"comment\">//采样率  8000/11025/22050/44100/96000（影响音频的质量）</span></span><br><span class=\"line\">                                   [<span class=\"built_in\">NSNumber</span> numberWithFloat: <span class=\"number\">8000.0</span>],<span class=\"built_in\">AVSampleRateKey</span>,</span><br><span class=\"line\">                                   <span class=\"comment\">// 音频格式</span></span><br><span class=\"line\">                                   [<span class=\"built_in\">NSNumber</span> numberWithInt: kAudioFormatLinearPCM],<span class=\"built_in\">AVFormatIDKey</span>,</span><br><span class=\"line\">                                   <span class=\"comment\">//采样位数  8、16、24、32 默认为16</span></span><br><span class=\"line\">                                   [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">16</span>],<span class=\"built_in\">AVLinearPCMBitDepthKey</span>,</span><br><span class=\"line\">                                   <span class=\"comment\">// 音频通道数 1 或 2</span></span><br><span class=\"line\">                                   [<span class=\"built_in\">NSNumber</span> numberWithInt: <span class=\"number\">2</span>], <span class=\"built_in\">AVNumberOfChannelsKey</span>,</span><br><span class=\"line\">                                   <span class=\"comment\">//录音质量</span></span><br><span class=\"line\">                                   [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"built_in\">AVAudioQualityHigh</span>],<span class=\"built_in\">AVEncoderAudioQualityKey</span>,</span><br><span class=\"line\">                                   <span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.recorder = [[<span class=\"built_in\">AVAudioRecorder</span> alloc] initWithURL:<span class=\"keyword\">self</span>.recordFileUrl settings:recordSetting error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.recorder) &#123;</span><br><span class=\"line\">        _recorder.meteringEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [_recorder prepareToRecord];</span><br><span class=\"line\">        [_recorder record];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是很明显这样录制声音需要开启 session 而声音的 session 是一个单利，如果这样开启了那么我们后面就不能用 AVAudioEngine 来进行音频采集了，也就没有之前的效果。所有根据以往的经验，AVAudioEngine 在开启引擎之后一定会有一个 delegate 或者是 block 回调出采集到的数据的。于是我们找到了 AudioNode 中的这个方法：<br />\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)installTapOnBus:(<span class=\"built_in\">AVAudioNodeBus</span>)bus bufferSize:(<span class=\"built_in\">AVAudioFrameCount</span>)bufferSize format:(<span class=\"built_in\">AVAudioFormat</span> * __<span class=\"keyword\">nullable</span>)format block:(<span class=\"built_in\">AVAudioNodeTapBlock</span>)tapBlock;</span><br></pre></td></tr></table></figure><br />\n 其中的 block 的 buffer 便是我们采集到的数据。</p>\n<p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*!\t<span class=\"doctag\">@typedef</span> AVAudioNodeTapBlock</span></span><br><span class=\"line\"><span class=\"comment\">\t<span class=\"doctag\">@abstract</span> A block that receives copies of the output of an AVAudioNode.</span></span><br><span class=\"line\"><span class=\"comment\">\t<span class=\"doctag\">@param</span> buffer</span></span><br><span class=\"line\"><span class=\"comment\">\t\ta buffer of audio captured from the output of an AVAudioNode</span></span><br><span class=\"line\"><span class=\"comment\">\t<span class=\"doctag\">@param</span> when</span></span><br><span class=\"line\"><span class=\"comment\">\t\tthe time at which the buffer was captured</span></span><br><span class=\"line\"><span class=\"comment\">\t<span class=\"doctag\">@discussion</span></span></span><br><span class=\"line\"><span class=\"comment\">\t\tCAUTION: This callback may be invoked on a thread other than the main thread.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">typedef <span class=\"keyword\">void</span> (^AVAudioNodeTapBlock)(AVAudioPCMBuffer *buffer, AVAudioTime *when);</span><br></pre></td></tr></table></figure></p>\n<p>我们需要把 buffer 转成 AVAudioFile 然后通过 AVAudioFile 的 write 方法写入<br />\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化<span class=\"built_in\">AVAudioFile</span></span><br><span class=\"line\"><span class=\"built_in\">AVAudioFile</span> * audioFile = [[<span class=\"built_in\">AVAudioFile</span> alloc] initForWriting:url settings:@&#123;&#125; error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">然后在block中实现</span><br><span class=\"line\">[audioFile writeFromBuffer:buffer error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 这个时候写入成功然后播放本地录音文件发现只有自己的原生，并没有后面添加的音效，回音等效果。</p>\n<p>其实是因为我们虽然添加了音效但是我们没有把音效和原生混合在一起，即使我们实时听到的是没有问题的，但是当保存到本地之后如果没有做混合，系统会默认将最原始的声音写入本地，这里我们需要用到</p>\n<p><strong>AVAudioMixerNode</strong></p>\n<p>他是继承与 AVAudioNode 也属于一个特殊音频处理节点，使用方式和之前的音效节点一样，添加在所有的处理之后、输出之前即可，像这样</p>\n<p><strong>input (Mic 或者音频文件) -&gt; 效果器 1-&gt; 效果器 2-&gt;Mixer-&gt;output</strong></p>\n<p>不过唯一需要注意的是这个 mixer 最好也写成属性、不然会出问题。</p>\n<p>所以一个完整的带音效的清唱录制为：<br />\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建音频文件。</span></span><br><span class=\"line\">    <span class=\"type\">NSString</span> <span class=\"operator\">*</span> path <span class=\"operator\">=</span> <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"type\">NSDocumentDirectory</span>, <span class=\"type\">NSUserDomainMask</span>, <span class=\"type\">YES</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">NSString</span> <span class=\"operator\">*</span> filePath <span class=\"operator\">=</span> [path stringByAppendingPathComponent:@<span class=\"string\">&quot;123.caf&quot;</span>];</span><br><span class=\"line\">    <span class=\"type\">NSURL</span> <span class=\"operator\">*</span> url <span class=\"operator\">=</span> [<span class=\"type\">NSURL</span> fileURLWithPath:filePath];</span><br><span class=\"line\">    <span class=\"type\">AVAudioFile</span> <span class=\"operator\">*</span> audioFile <span class=\"operator\">=</span> [[<span class=\"type\">AVAudioFile</span> alloc] initForWriting:url settings:@&#123;&#125; error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.recordFileUrl <span class=\"operator\">=</span> url;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AVAudioUnitReverb</span> <span class=\"operator\">*</span> reverd <span class=\"operator\">=</span> [[<span class=\"type\">AVAudioUnitReverb</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    reverd.wetDryMix <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    [reverd loadFactoryPreset:<span class=\"type\">AVAudioUnitReverbPresetLargeRoom</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine attachNode:reverd];</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine attachNode:_mixer];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine connect:<span class=\"keyword\">self</span>.engine.inputNode to:reverd format:audioFile.processingFormat];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine connect:reverd to:_mixer format:audioFile.processingFormat];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine connect:_mixer to:<span class=\"keyword\">self</span>.engine.outputNode format:audioFile.processingFormat];</span><br><span class=\"line\"></span><br><span class=\"line\">    [_mixer installTapOnBus:<span class=\"number\">0</span> bufferSize:<span class=\"number\">4096</span> format:[_engine.inputNode inputFormatForBus:<span class=\"type\">AVAudioPlayerNodeBufferLoops</span>] block:<span class=\"operator\">^</span>(<span class=\"type\">AVAudioPCMBuffer</span> <span class=\"operator\">*</span> _Nonnull buffer, <span class=\"type\">AVAudioTime</span> <span class=\"operator\">*</span> _Nonnull when) &#123;</span><br><span class=\"line\">        [audioFile writeFromBuffer:buffer error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;我录制到的数据是 === %@&quot;</span>, buffer);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.engine startAndReturnError:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过如上方法可以完整的实现清唱功能，但是唱吧清唱使用的是 AudioUnit，AudioUnit 是 iOS 中音频的非常底层的实现，由 C 语言实现，因为唱吧中除了清唱之外还有很多非常复杂的音频处理功能，所以只有 AudioUnit 可以满足，但是对于清唱这个功能来说，两种实现方式达到了同样的效果，本文介绍的更加轻量级，不过关于 AudioUnit 也正在学习过程，后续会输出相应的文章。</p>\n",
            "tags": [
                "音频",
                "唱吧",
                "K歌",
                "AVFoundation"
            ]
        }
    ]
}