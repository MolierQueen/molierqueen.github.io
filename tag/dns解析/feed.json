{
    "version": "https://jsonfeed.org/version/1",
    "title": "Molier • All posts by \"dns解析\" tag",
    "description": "iOS 开发 移动App 博客 杂谈 随笔 相册",
    "home_page_url": "https://oliverqueen.cn",
    "items": [
        {
            "id": "https://oliverqueen.cn/2018-01-23-IOS%E4%B8%8B%E4%B8%89%E7%A7%8DDNS%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F%E5%88%86%E6%9E%90%EF%BC%88LocalDns%EF%BC%89/",
            "url": "https://oliverqueen.cn/2018-01-23-IOS%E4%B8%8B%E4%B8%89%E7%A7%8DDNS%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F%E5%88%86%E6%9E%90%EF%BC%88LocalDns%EF%BC%89/",
            "title": "IOS下三种DNS解析方式分析（LocalDns）",
            "date_published": "2018-01-23T10:02:29.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h3>\n<p>最近在做 iOS 的 DNS 解析，顺便研究了下 iOS 端本地的 DNS 解析方式（localDNS）, 也就是不依赖 Http 请求，而是用原始的 API 进行解析，虽然有 HttpDNS 但是考虑到成本、第三方服务稳定性的问题，LocalDNS 仍然是一个很重要的部分，在 iOS 系统下，localDNS 的解析方式有三种，下面主要对三种方式进行下利弊分析及简单的原理介绍。</p>\n<h3 id=\"方式一\"><a class=\"anchor\" href=\"#方式一\">#</a> 方式一</h3>\n<p>这个也是我一开始在项目中使用的方式。<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>：<span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>\t*<span class=\"built_in\">gethostbyname</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *);</span><br><span class=\"line\"><span class=\"number\">2</span>：<span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>\t*<span class=\"built_in\">gethostbyname2</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *, <span class=\"type\">int</span>);</span><br></pre></td></tr></table></figure><br />\n 两个函数作用完全一样，返回值一样，但是第一个只能用于 IPV4 的网络环境，而第二个则 IPV4 和 IPV6 都可使用，可以通过第二个参数传入当前的网络环境。<br />\n<!---more---></p>\n<h6 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式：</h6>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CFAbsoluteTime</span> start = <span class=\"built_in\">CFAbsoluteTimeGetCurrent</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">char</span>   *ptr, **pptr;</span><br><span class=\"line\">   <span class=\"keyword\">struct</span> hostent *hptr;</span><br><span class=\"line\">   <span class=\"type\">char</span>   str[<span class=\"number\">32</span>];</span><br><span class=\"line\">   ptr = <span class=\"string\">&quot;www.meitu.com&quot;</span>;</span><br><span class=\"line\">   <span class=\"built_in\">NSMutableArray</span> * ips = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((hptr = gethostbyname(ptr)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(pptr=hptr-&gt;h_addr_list; *pptr!=<span class=\"literal\">NULL</span>; pptr++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> * ipStr = [<span class=\"built_in\">NSString</span> stringWithCString:inet_ntop(hptr-&gt;h_addrtype, *pptr, str, <span class=\"keyword\">sizeof</span>(str)) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">        [ips addObject:ipStr?:<span class=\"string\">@&quot;&quot;</span>];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">CFAbsoluteTime</span> end = <span class=\"built_in\">CFAbsoluteTimeGetCurrent</span>();</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;22222 === ip === %@ === time cost: %0.3fs&quot;</span>, ips,end - start);</span><br></pre></td></tr></table></figure></p>\n<p>使用 gethostbyname 方法后会得到一个 struct, 也就是上文的 struct hostent *hptr：<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t*h_name;\t<span class=\"comment\">/* official name of host */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t**h_aliases;\t<span class=\"comment\">/* alias list */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\th_addrtype;\t<span class=\"comment\">/* host address type */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\th_length;\t<span class=\"comment\">/* length of address */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t**h_addr_list;\t<span class=\"comment\">/* list of addresses from name server */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\th_addr\th_addr_list[0]\t<span class=\"comment\">/* address, for backward compatibility */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"参数解析\"><a class=\"anchor\" href=\"#参数解析\">#</a> 参数解析：</h6>\n<ul>\n<li>\n<p>hostent-&gt;h_name<br />\n 表示的是主机的规范名。<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctdWMwZXA5NmIuYmFpZHUueG4tLWNvbXd3dy1rcDJqNzRvZXN1NDJ5NjAzYjJsNWFnbXMuYS5zaGlmZW4uY29t\">例如 www.baidu.com 的规范名其实是 www.a.shifen.com</span>。</p>\n</li>\n<li>\n<p>hostent-&gt;h_aliases<br />\n 表示的是主机的别名 www.baidu.com 的别名就是他自己。有的时候，有的主机可能有好几个别名，这些，其实都是为了易于用户记忆而为自己的网站多取的名字。</p>\n</li>\n<li>\n<p>hostent-&gt;h_addrtype<br />\n 表示的是主机 ip 地址的类型，到底是 ipv4 (AF_INET)，还是 pv6 (AF_INET6)</p>\n</li>\n<li>\n<p>hostent-&gt;h_length<br />\n 表示的是主机 ip 地址的长度</p>\n</li>\n<li>\n<p>hostent-&gt;h_addr_lisst<br />\n 表示的是主机的 ip 地址，注意，这个是以网络字节序存储的。不要直接用 printf 带 % s 参数来打这个东西，会有问题的哇。所以到真正需要打印出这个 IP 的话，需要调用 <code>const char *inet_ntop(int af, const void *src, char *dst, socklen_t cnt) </code> ，来把它转成 char。详细使用见上文</p>\n</li>\n</ul>\n<h6 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点：</h6>\n<ul>\n<li>\n<p>在进行网络切换的时候小概率卡死，自测十次有一两次左右。</p>\n</li>\n<li>\n<p>在本地的 LocalDns 被破坏的时候会必卡死 30 秒，然后返回 nil 。</p>\n</li>\n<li>\n<p>缓存是个玄学东西，他会对自己解析出来的 IP 进行缓存（可能是运营商缓存）缓存时间不确定，有可能我即使切换了无数个网络，但是从早到晚同一个域名总是解析出同样的 IP，</p>\n</li>\n<li>\n<p>网上说的比较多的问题</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6myoq10ej30po01w0tb.jpg\" alt=\"image.png\" /></p>\n</li>\n</ul>\n<h3 id=\"方式二\"><a class=\"anchor\" href=\"#方式二\">#</a> 方式二</h3>\n<p>除了经常用到的 gethostbyname (3) 和 gethostbyaddr (3) 函数以外，Linux (以及其它 UNIX/UNIX-like 系统) 还提供了一套用于在底层处理 DNS 相关问题的函数 (这里所说的底层仅是相对 gethostbyname 和 gethostbyaddr 两个函数而言). 这套函数被称为地址解析函数 (resolver functions)。曾经尝试过这个方式...<br />\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>\t\tres_query <span class=\"constructor\">__P((<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span>, <span class=\"params\">int</span>, <span class=\"params\">int</span>, <span class=\"params\">u_char</span> <span class=\"operator\">*</span>, <span class=\"params\">int</span>)</span>);</span><br><span class=\"line\">函数原型为：</span><br><span class=\"line\"><span class=\"built_in\">int</span> res<span class=\"constructor\">_query(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">dname</span>, <span class=\"params\">int</span> <span class=\"params\">class</span>, <span class=\"params\">int</span> <span class=\"params\">type</span>, <span class=\"params\">unsigned</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">answer</span>, <span class=\"params\">int</span> <span class=\"params\">anslen</span>)</span></span><br></pre></td></tr></table></figure><br />\n 这个方式需要在项目中添加 <code>libresolv.tbd</code>  库，因为要依赖于库中的函数去解析。 <code>res_query</code>  用来发出一个指定类 (由参数 class 指定) 和类型 (由参数 type 指定) 的 DNS 询问. dname 是要查询的主机名。返回信息被存储在 answser 指向的内存区域中。信息的长度不能大于 anslen 个字节。这个函数会创建一个 DNS 查询报文并把它发送到指定的 DNS 服务器。</p>\n<h6 id=\"使用方式-2\"><a class=\"anchor\" href=\"#使用方式-2\">#</a> 使用方式</h6>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFAbsoluteTime start = <span class=\"constructor\">CFAbsoluteTimeGetCurrent()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    unsigned <span class=\"built_in\">char</span> auResult<span class=\"literal\">[<span class=\"number\">512</span>]</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> nBytesRead = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    nBytesRead = res<span class=\"constructor\">_query(<span class=\"string\">&quot;www.meitu.com&quot;</span>, <span class=\"params\">ns_c_in</span>, <span class=\"params\">ns_t_a</span>, <span class=\"params\">auResult</span>, <span class=\"params\">sizeof</span>(<span class=\"params\">auResult</span>)</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ns_msg handle;</span><br><span class=\"line\">    ns<span class=\"constructor\">_initparse(<span class=\"params\">auResult</span>, <span class=\"params\">nBytesRead</span>, &amp;<span class=\"params\">handle</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSMutableArray *ipList = nil;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> msg_count = ns<span class=\"constructor\">_msg_count(<span class=\"params\">handle</span>, <span class=\"params\">ns_s_an</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg_count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ipList = <span class=\"literal\">[[NSM<span class=\"identifier\">utableArray</span> <span class=\"identifier\">alloc</span>]</span> initWithCapacity:msg_count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> rrnum = <span class=\"number\">0</span>; rrnum &lt; msg_count; rrnum++) &#123;</span><br><span class=\"line\">            ns_rr rr;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ns<span class=\"constructor\">_parserr(&amp;<span class=\"params\">handle</span>, <span class=\"params\">ns_s_an</span>, <span class=\"params\">rrnum</span>, &amp;<span class=\"params\">rr</span>)</span><span class=\"operator\"> == </span><span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">char</span> ip1<span class=\"literal\">[<span class=\"number\">16</span>]</span>;</span><br><span class=\"line\">                strcpy(ip1, inet<span class=\"constructor\">_ntoa(<span class=\"operator\">*</span>(<span class=\"params\">struct</span> <span class=\"params\">in_addr</span> <span class=\"operator\">*</span>)</span>ns<span class=\"constructor\">_rr_rdata(<span class=\"params\">rr</span>)</span>));</span><br><span class=\"line\">                NSString *ipString = <span class=\"literal\">[[NSS<span class=\"identifier\">tring</span> <span class=\"identifier\">alloc</span>]</span> initWithCString:ip1 encoding:NSASCIIStringEncoding];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"literal\">[<span class=\"identifier\">ipString</span> <span class=\"identifier\">isEqualToString</span>:@&quot;&quot;]</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//将提取到的IP地址放到数组中</span></span><br><span class=\"line\">                    <span class=\"literal\">[<span class=\"identifier\">ipList</span> <span class=\"identifier\">addObject</span>:<span class=\"identifier\">ipString</span>]</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CFAbsoluteTime <span class=\"keyword\">end</span> = <span class=\"constructor\">CFAbsoluteTimeGetCurrent()</span>;</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;11111 === ip === %@ === time cost: %0.3fs&quot;</span>, <span class=\"params\">ipList</span>,<span class=\"params\">end</span> - <span class=\"params\">start</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"参数解析-2\"><a class=\"anchor\" href=\"#参数解析-2\">#</a> 参数解析</h6>\n<p>由于该逻辑是 Linux 底层提供的代码，苹果用宏做了一次封装，具体的函数含义还需要对 Linux 内核的理解，这里放一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmVuaGFvL2FyY2hpdmUvMjAxMS8xMS8xNC8yMjQ4NTI4Lmh0bWw=\">参考资料</span></p>\n<h6 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点：</h6>\n<ul>\n<li>在 LocalDns 被破坏掉的情况下能及时响应不会延迟。</li>\n<li>没有缓存，缓存由开发者控制</li>\n</ul>\n<h6 id=\"缺点-2\"><a class=\"anchor\" href=\"#缺点-2\">#</a> 缺点</h6>\n<ul>\n<li>在进行网络切换时候 3G/4G 切 wify 高概率出现卡死<br />\n这一个缺点是比较致命的，所以没有再继续使用。</li>\n</ul>\n<h3 id=\"方式三\"><a class=\"anchor\" href=\"#方式三\">#</a> 方式三</h3>\n<p>苹果原生的 DNS 解析</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean <span class=\"built_in\">CFHostStartInfoResolution</span> (<span class=\"built_in\">CFHostRef</span> theHost, <span class=\"built_in\">CFHostInfoType</span> info, <span class=\"built_in\">CFStreamError</span> *error);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法：</h6>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean result,bResolved;</span><br><span class=\"line\">CFHostRef hostRef;</span><br><span class=\"line\">CFArrayRef addresses = NULL;</span><br><span class=\"line\">NSMutableArray<span class=\"operator\"> * </span>ipsArr = <span class=\"literal\">[[NSM<span class=\"identifier\">utableArray</span> <span class=\"identifier\">alloc</span>]</span> init];</span><br><span class=\"line\"></span><br><span class=\"line\">CFStringRef hostNameRef = <span class=\"constructor\">CFStringCreateWithCString(<span class=\"params\">kCFAllocatorDefault</span>, <span class=\"string\">&quot;www.meitu.com&quot;</span>, <span class=\"params\">kCFStringEncodingASCII</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">hostRef = <span class=\"constructor\">CFHostCreateWithName(<span class=\"params\">kCFAllocatorDefault</span>, <span class=\"params\">hostNameRef</span>)</span>;</span><br><span class=\"line\">CFAbsoluteTime start = <span class=\"constructor\">CFAbsoluteTimeGetCurrent()</span>;</span><br><span class=\"line\">result = <span class=\"constructor\">CFHostStartInfoResolution(<span class=\"params\">hostRef</span>, <span class=\"params\">kCFHostAddresses</span>, NULL)</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result<span class=\"operator\"> == </span>TRUE) &#123;</span><br><span class=\"line\">    addresses = <span class=\"constructor\">CFHostGetAddressing(<span class=\"params\">hostRef</span>, &amp;<span class=\"params\">result</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bResolved = result<span class=\"operator\"> == </span>TRUE ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(bResolved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in* remoteAddr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"constructor\">CFArrayGetCount(<span class=\"params\">addresses</span>)</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CFDataRef saData = (CFDataRef)<span class=\"constructor\">CFArrayGetValueAtIndex(<span class=\"params\">addresses</span>, <span class=\"params\">i</span>)</span>;</span><br><span class=\"line\">        remoteAddr = (<span class=\"keyword\">struct</span> sockaddr_in*)<span class=\"constructor\">CFDataGetBytePtr(<span class=\"params\">saData</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(remoteAddr != NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取IP地址</span></span><br><span class=\"line\">            <span class=\"built_in\">char</span> ip<span class=\"literal\">[<span class=\"number\">16</span>]</span>;</span><br><span class=\"line\">            strcpy(ip, inet<span class=\"constructor\">_ntoa(<span class=\"params\">remoteAddr</span>-&gt;<span class=\"params\">sin_addr</span>)</span>);</span><br><span class=\"line\">            NSString<span class=\"operator\"> * </span>ipStr = <span class=\"literal\">[NSS<span class=\"identifier\">tring</span> <span class=\"identifier\">stringWithCString</span>:<span class=\"identifier\">ip</span> <span class=\"identifier\">encoding</span>:NSUTF8S<span class=\"identifier\">tringEncoding</span>]</span>;</span><br><span class=\"line\">            <span class=\"literal\">[<span class=\"identifier\">ipsArr</span> <span class=\"identifier\">addObject</span>:<span class=\"identifier\">ipStr</span>]</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CFAbsoluteTime <span class=\"keyword\">end</span> = <span class=\"constructor\">CFAbsoluteTimeGetCurrent()</span>;</span><br><span class=\"line\"><span class=\"constructor\">NSLog(@<span class=\"string\">&quot;33333 === ip === %@ === time cost: %0.3fs&quot;</span>, <span class=\"params\">ipsArr</span>,<span class=\"params\">end</span> - <span class=\"params\">start</span>)</span>;</span><br><span class=\"line\"><span class=\"constructor\">CFRelease(<span class=\"params\">hostNameRef</span>)</span>;</span><br><span class=\"line\"><span class=\"constructor\">CFRelease(<span class=\"params\">hostRef</span>)</span>;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"参数解析-3\"><a class=\"anchor\" href=\"#参数解析-3\">#</a> 参数解析：</h6>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>  CFHostStartInfoResolution()</span><br><span class=\"line\"><span class=\"bullet\"> *</span>  </span><br><span class=\"line\"> <span class=\"emphasis\">*  Discussion:</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>\tPerforms a lookup for the given host.  It will search for the</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\trequested information if there is no other active request.</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\tPreviously cached information of the given type will be released.</span><br><span class=\"line\"><span class=\"bullet\"> *</span>  </span><br><span class=\"line\"> <span class=\"emphasis\">*  Mac OS X threading:</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>\tThread safe</span><br><span class=\"line\"><span class=\"bullet\"> *</span>  </span><br><span class=\"line\"> <span class=\"emphasis\">*  Parameters:</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span></span><br><span class=\"line\"><span class=\"bullet\"> *</span>\ttheHost:  //需要被解决的CFHostRef的对象</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  The CFHostRef which should be resolved. Must be non-NULL. If</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  this reference is not a valid CFHostRef, the behavior is</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  undefined.</span><br><span class=\"line\"><span class=\"bullet\"> *</span></span><br><span class=\"line\"> <span class=\"emphasis\">*\tinfo: 返回值的类型 数组/Data/string..</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>\t  The enum representing the type of information to be retrieved.</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  If the value is not a valid type, the behavior is undefined.</span><br><span class=\"line\"><span class=\"bullet\"> *</span></span><br><span class=\"line\"> <span class=\"emphasis\">*\terror: 错误</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>\t  A reference to a CFStreamError structure which will be filled</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  with any error information should an error occur.  May be set</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\t  to NULL if error information is not wanted.</span><br><span class=\"line\"><span class=\"bullet\"> *</span>  </span><br><span class=\"line\"> <span class=\"emphasis\">*  Result: 解析结果成功还是失败</span></span><br><span class=\"line\"><span class=\"emphasis\"> *</span>\tReturns TRUE on success and FALSE on failure.  In asynchronous</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\tmode, this function will return immediately.  In synchronous</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\tmode, it will block until the resolve has completed or until the</span><br><span class=\"line\"><span class=\"bullet\"> *</span>\tresolve is cancelled.</span><br><span class=\"line\"><span class=\"bullet\"> *</span>  </span><br><span class=\"line\"> <span class=\"emphasis\">*/</span></span><br><span class=\"line\"><span class=\"emphasis\">CFN_EXPORT <span class=\"strong\">__nullable CFArrayRef</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">CFHostGetAddressing(CFHostRef theHost, Boolean * __</span>nullable hasBeenResolved) CF_AVAILABLE(10_3, 2_0);</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"优点-2\"><a class=\"anchor\" href=\"#优点-2\">#</a> 优点：</h6>\n<ul>\n<li>在网络切换时候不会卡顿。</li>\n</ul>\n<h6 id=\"缺点-3\"><a class=\"anchor\" href=\"#缺点-3\">#</a> 缺点：</h6>\n<ul>\n<li>在本地 DNS 被破坏的情况下会出现卡死的现象 (卡 30s)</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<p>以上三个方法除了第二个方法会在网络切换时候卡死不可用之外，其他两个方法都是可选择的，关于那个本地 LocalDns 破坏会卡死的问题看来是无法避免，不过开发者可以自行通过 ping 等方式来判断 LocalDns 的正确性，在被破坏的情况下使用 httpDns 来进行解析即可。具体的 demo 可以到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW5nbmluZ2hhby9Mb2NhbERucw==\">这里</span>查看</p>\n",
            "tags": [
                "DNS解析",
                "LocalDNS"
            ]
        }
    ]
}