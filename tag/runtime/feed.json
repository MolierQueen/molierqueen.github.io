{
    "version": "https://jsonfeed.org/version/1",
    "title": "Molier • All posts by \"runtime\" tag",
    "description": "iOS 开发 移动App 博客 杂谈 随笔 相册",
    "home_page_url": "https://oliverqueen.cn",
    "items": [
        {
            "id": "https://oliverqueen.cn/2018-01-24-iOS-Runtime%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%B1%BB%E7%9A%84Method-Swizzling/",
            "url": "https://oliverqueen.cn/2018-01-24-iOS-Runtime%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%B1%BB%E7%9A%84Method-Swizzling/",
            "title": "iOS Runtime简单介绍，以及不同类的Method Swizzling",
            "date_published": "2018-01-24T04:18:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h5 id=\"runtime介绍\"><a class=\"anchor\" href=\"#runtime介绍\">#</a> Runtime 介绍：</h5>\n<p>runtime 顾名思义就是运行时，其实我们的 App 从你按下 command+R 开始一直到 App 运行起来经历了大致两个阶段，1：编译时，2：运行时。还记得一道很经典的面试题<br />\n<img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kbsn9yxj30kk03et8z.jpg\" alt=\"\" /></p>\n<p>这里给大家解释下：首先， * testObject 是告诉编译器，testObject 是一个指向某个 Objective-C 对象的指针。因为不管指向的是什么类型的对象，<br />\n<span id=\"more\"></span><br />\n 一个指针所占的内存空间都是固定的，所以这里声明成任何类型的对象，最终生成的可执行代码都是没有区别的。这里限定了 NSString 只不过是告诉编译器，请把 testObject 当做一个 NSString 来检查，如果后面调用了非 NSString 的方法，会产生警告。接着，你创建了一个 NSData 对象，然后把这个对象所在的内存地址保存在 testObject 里。那么运行时 (从这段代码执行开始，到程序结束)，testObject 指向的内存空间就是一个 NSData 对象。你可以把 testObject 当做一个 NSData 对象来用。 所以编译时是 NSString，运行时是 NSData。<br />\nruntime 是什么：<br />\n在 runtime 中，所有的类在 OC 中都会被定义成一个结构体，像这样<br />\n类在 runtime 中的表示<br />\n struct objc_class {<br />\n    Class isa;// 指针，顾名思义，表示是一个什么，  // 实例的 isa 指向类对象，类对象的 isa 指向元类<br />\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !__OBJC2__</span></span><br><span class=\"line\">        Class super_class;  <span class=\"comment\">//指向父类</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char</span> *name;  <span class=\"comment\">//类名</span></span><br><span class=\"line\">        <span class=\"type\">long</span> version;     <span class=\"comment\">//类的版本信息，默认初始化为 0。我们可以在运行期对其进行修改（class_setVersion）或获取（class_getVersion）。</span></span><br><span class=\"line\">        <span class=\"type\">long</span> info;   <span class=\"comment\">/*供运行期使用的一些位标识。有如下一些位掩码：</span></span><br><span class=\"line\"><span class=\"comment\">                        CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含实例方法和变量；</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法；</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_INITIALIZED (0x4L) 表示该类已经被运行期初始化了，这个标识位只被 objc_addClass 所设置；</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_POSING (0x8L) 表示该类被 pose 成其他的类；（poseclass 在ObjC 2.0中被废弃了）；</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_MAPPED (0x10L) 为ObjC运行期所使用</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_FLUSH_CACHE (0x20L) 为ObjC运行期所使用</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_GROW_CACHE (0x40L) 为ObjC运行期所使用</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_NEED_BIND (0x80L) 为ObjC运行期所使用</span></span><br><span class=\"line\"><span class=\"comment\">                      CLS_METHOD_ARRAY (0x100L) 该标志位指示 methodlists 是指向一个 objc_method_list 还是一个包含 objc_method_list 指针的数组；*/</span></span><br><span class=\"line\">        <span class=\"type\">long</span> instance_size  <span class=\"comment\">//该类的实例变量大小（包括从父类继承下来的实例变量）；</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">objc_ivar_list</span> *ivars <span class=\"comment\">//成员变量列表</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">objc_method_list</span> **methodLists; <span class=\"comment\">//方法列表</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">objc_cache</span> *cache;<span class=\"comment\">//缓存   一种优化，调用过的方法存入缓存列表，下次调用先找缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">objc_protocol_list</span> *protocols <span class=\"comment\">//协议列表</span></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure><br />\n 相关的定义<br />\n /// 描述类中的一个方法<br />\n typedef struct objc_method *Method;</p>\n<p>/// 实例变量<br />\n typedef struct objc_ivar *Ivar;</p>\n<p>/// 类别 Category<br />\ntypedef struct objc_category *Category;</p>\n<p>/// 类中声明的属性<br />\n typedef struct objc_property *objc_property_t;</p>\n<p>ObjC 为每个类的定义生成两个 objc_class ，一个即普通的 class，另一个即 metaclass。我们可以在运行期创建这两个 objc_class 数据结构，然后使用 objc_addClass 动态地创建新的类定义。</p>\n<h5 id=\"runtime能干什么\"><a class=\"anchor\" href=\"#runtime能干什么\">#</a> runtime 能干什么：</h5>\n<ul>\n<li>：1：获取一个类中的列表比如方法列表、属性列表、协议列表、成员变量列表像如下这样 其中获取到的属性、方法都是可以获取 public 和 private 的。</li>\n</ul>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned <span class=\"built_in\">int</span> count;</span><br><span class=\"line\">    Class clas = <span class=\"literal\">[WKW<span class=\"identifier\">ebViewController</span> <span class=\"identifier\">class</span>]</span>; <span class=\"comment\">//是我自己的类，之所以不用系统的类是因为系统的类方法属性太多了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    objc_property_t<span class=\"operator\"> * </span>propertyList = <span class=\"keyword\">class</span><span class=\"constructor\">_copyPropertyList(<span class=\"params\">clas</span>, &amp;<span class=\"params\">count</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        const <span class=\"built_in\">char</span> *propertyName = property<span class=\"constructor\">_getName(<span class=\"params\">propertyList</span>[<span class=\"params\">i</span>])</span>;</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;  %@  属性(包括私有) --------&gt;&gt;&gt;&gt;&gt;    %@&quot;</span>,<span class=\"params\">clas</span>,[NSString <span class=\"params\">stringWithUTF8String</span>:<span class=\"params\">propertyName</span>])</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;-------------------------------------------------------------------------------------------------------------- &quot;</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method<span class=\"operator\"> * </span>methodList = <span class=\"keyword\">class</span><span class=\"constructor\">_copyMethodList(<span class=\"params\">clas</span>, &amp;<span class=\"params\">count</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        Method methodName = methodList<span class=\"literal\">[<span class=\"identifier\">i</span>]</span>;</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;  %@ 方法(包括私有)  --------&gt;&gt;&gt;&gt;&gt;    %@&quot;</span>,<span class=\"params\">clas</span>,NSStringFromSelector(<span class=\"params\">method_getName</span>(<span class=\"params\">methodName</span>)</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;-------------------------------------------------------------------------------------------------------------- &quot;</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Ivar *ivarList = <span class=\"keyword\">class</span><span class=\"constructor\">_copyIvarList(<span class=\"params\">clas</span>, &amp;<span class=\"params\">count</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt;count; i++) &#123;</span><br><span class=\"line\">        Ivar myIvar = ivarList<span class=\"literal\">[<span class=\"identifier\">i</span>]</span>;</span><br><span class=\"line\">        const <span class=\"built_in\">char</span> *ivarName = ivar<span class=\"constructor\">_getName(<span class=\"params\">myIvar</span>)</span>;</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;%@ 成员变量(包括私有) --------&gt;&gt;&gt;&gt;&gt; %@&quot;</span>,<span class=\"params\">clas</span>, [NSString <span class=\"params\">stringWithUTF8String</span>:<span class=\"params\">ivarName</span>])</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;-------------------------------------------------------------------------------------------------------------- &quot;</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取协议列表</span></span><br><span class=\"line\">    __unsafe_unretained Protocol **protocolList = <span class=\"keyword\">class</span><span class=\"constructor\">_copyProtocolList([<span class=\"params\">self</span> <span class=\"params\">class</span>], &amp;<span class=\"params\">count</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt;count; i++) &#123;</span><br><span class=\"line\">        Protocol *myProtocal = protocolList<span class=\"literal\">[<span class=\"identifier\">i</span>]</span>;</span><br><span class=\"line\">        const <span class=\"built_in\">char</span> *protocolName = protocol<span class=\"constructor\">_getName(<span class=\"params\">myProtocal</span>)</span>;</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;%@ 协议 --------&gt;&gt;&gt;&gt;&gt; %@&quot;</span>,<span class=\"params\">clas</span>, [NSString <span class=\"params\">stringWithUTF8String</span>:<span class=\"params\">protocolName</span>])</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><br />\n 输出后的结果是<br />\n<img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kc7w3zcj30pk0ajdks.jpg\" alt=\"image.png\" /><br />\n 其中也包括了私有方法。</p>\n<ul>\n<li>2：拦截方法调用<br />\n有的时候我们用一个类或者一个实例变量去调用一个方法，由于操作失误或者是其他原因，导致这个所被调用的方法并不存在，报出这样的错误，然后闪退！<br />\n<img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kcfrky6j30tr0120sy.jpg\" alt=\"image.png\" /></li>\n</ul>\n<p>这个时候如果我们想避免这些崩溃，我们就需要在运行时对其做一些手脚。iOS 中方法调用的流程：其实调用方法就是发送消息，所有调用方法的代码例如   [obj aaa]  在运行时 runtime 会将这段代码转换为 objc_msgSend (obj, [@selector]);（本质就是发送消息）然后 obj 会通过其中 isa 指针去该类的缓存中 (cache) 查找对应函数的 Method, 如果没有找到，再去该类的方法列表（methodList）中查找，如果没有找到再去该类的父类找，如果找到了，就先将方法添加到缓存中，以便下次查找，然后通过 method 中的指针定位到指定方法执行。如果一直没有找到，便会走完如下四个方法之后崩溃。</p>\n<p><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    如果调用的是不存在的实例方法则会在奔溃前进入该方法，防止崩溃可以在此处做处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 如果调用的是不存在的类方法则会在奔溃前进入该方法，防止崩溃可以在此处做处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveClassMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 这个方法会把你所调用的不存在的方法重定向到一个声明了该方法的类中，只需要你返回一个有该方法的</span></span><br><span class=\"line\"><span class=\"comment\"> 类就可以，如果你重定向的这个类仍然不具有该方法那么会继续崩溃</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-(<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 将你不存在的方法打包成NSInvocation对象，做完你自己的处理之后</span></span><br><span class=\"line\"><span class=\"comment\"> 调用invokeWithTarget让某个target来处理该方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation &#123;</span><br><span class=\"line\">    [anInvocation invokeWithTarget:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>3：动态添加方法<br />\n因为我们调用了一个不存在的方法导致崩溃，那么我们在判断出不存在后就动态添加上一个方法吧 这样不就不会蹦了吗？我们先写一个方法用来给我们做出提示</li>\n</ul>\n<p><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"params\">(void)</span> errorMethod &#123;</span><br><span class=\"line\">    NSLog<span class=\"params\">(@<span class=\"string\">&quot;no method!!!!!!!&quot;</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 如果调用了没有的方法，那么就把这个方法添加进去，然后把被调用的方法的指针指向这个 error1：，那么一旦调用了没有的方法就会走这个。我们来看代码</p>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    Method errorMethod =  <span class=\"keyword\">class</span><span class=\"constructor\">_getInstanceMethod([<span class=\"params\">self</span> <span class=\"params\">class</span>], @<span class=\"params\">selector</span>(<span class=\"params\">errorMethod</span>)</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">[NSS<span class=\"identifier\">tringFromSelector</span>(<span class=\"identifier\">sel</span>) <span class=\"identifier\">isEqualToString</span>:@&quot;<span class=\"identifier\">testMethod</span>&quot;]</span>) &#123;</span><br><span class=\"line\">        BOOL isAdd =  <span class=\"keyword\">class</span><span class=\"constructor\">_addMethod([<span class=\"params\">self</span> <span class=\"params\">class</span>], <span class=\"params\">sel</span>, <span class=\"params\">method_getImplementation</span>(<span class=\"params\">errorMethod</span>)</span>, <span class=\"keyword\">method</span><span class=\"constructor\">_getTypeEncoding(<span class=\"params\">errorMethod</span>)</span>);</span><br><span class=\"line\">        <span class=\"constructor\">NSLog(@<span class=\"string\">&quot;tinajia  = %d&quot;</span>,<span class=\"params\">isAdd</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Do something</span></span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主要用到</p>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    添加方法</span></span><br><span class=\"line\"><span class=\"comment\">     @param class] 在哪个类里添加</span></span><br><span class=\"line\"><span class=\"comment\">     @param sel 添加的方法的名字</span></span><br><span class=\"line\"><span class=\"comment\">     @param errorMethod 添加的方法的实现IMP指</span></span><br><span class=\"line\"><span class=\"comment\">     @param types 方法的标示符</span></span><br><span class=\"line\"><span class=\"comment\">     @return 是否添加成功</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">BOOL isAdd =  <span class=\"keyword\">class</span><span class=\"constructor\">_addMethod([<span class=\"params\">self</span> <span class=\"params\">class</span>], <span class=\"params\">sel</span>, <span class=\"params\">method_getImplementation</span>(<span class=\"params\">errorMethod</span>)</span>, <span class=\"keyword\">method</span><span class=\"constructor\">_getTypeEncoding(<span class=\"params\">errorMethod</span>)</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>然后运行下：</p>\n<p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">WKWebViewController</span> <span class=\"operator\">*</span> vc<span class=\"operator\">=</span> [[<span class=\"type\">WKWebViewController</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">[vc performSelector:<span class=\"meta\">@selector</span>(testMethod)];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>我调用了并不存在的 testMethod 方法并没有崩溃并且方法已经成功添加了</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kexyuzgj30f801mwel.jpg\" alt=\"image.png\" /></p>\n<ul>\n<li>\n<p>4：动态交换方法（也叫 iOS 黑魔法，慎用）<br />\n没什么好例子，用一个网上说的例子 (引用别人的东西，懒得复制了，就截了图)</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kg3i5z6j30hv0fj0z9.jpg\" alt=\"\" /></p>\n<p>其实本质即使 SEL 和 IMP 的交换，原理是这样的：在 iOS 中每一个类中都有一个叫 dispatch table 的东西，里面存放在 SEL 和他所对应的 IMP 指针，之前也说过方法调用就是通过 sel 找 IMP 指针然后指针定位调用方法。方法交换就是对这个 dispatch table 进行操作。让 A 的 SEL 去对应 B 的 IMP，B 的 SEL 对应 A 的 IMP，如图</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kgrq52oj30f80betcz.jpg\" alt=\"\" /></p>\n<p>这样就达到方法交换的目的，下面看代码：</p>\n</li>\n</ul>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)changeMethod &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  如果是类方法 要使用 !</span></span><br><span class=\"line\">    <span class=\"comment\">//  如果是系统的集合类的属性要用元类 比如 __NSSetM = NSMutableSet</span></span><br><span class=\"line\">    <span class=\"comment\">//  Class  class = NSClassFromString(@&quot;__NSSetM&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//  Class metaClass = objc_getMetaClass([NSStringFromClass(class) UTF8String]);</span></span><br><span class=\"line\">    Class systemClass = <span class=\"constructor\">NSClassFromString(<span class=\"params\">__NSSetM</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    SEL sel_System = <span class=\"constructor\">NSSelectorFromString(<span class=\"params\">addObject</span>:)</span>;</span><br><span class=\"line\">    SEL sel_Custom = @selector(swizzle_addObject:);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method method_System = <span class=\"keyword\">class</span><span class=\"constructor\">_getInstanceMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_System</span>)</span>;</span><br><span class=\"line\">    Method method_Custom = <span class=\"keyword\">class</span><span class=\"constructor\">_getInstanceMethod([<span class=\"params\">self</span> <span class=\"params\">class</span>], <span class=\"params\">sel_Custom</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    IMP imp_System = <span class=\"keyword\">method</span><span class=\"constructor\">_getImplementation(<span class=\"params\">method_System</span>)</span>;</span><br><span class=\"line\">    IMP imp_Custom = <span class=\"keyword\">method</span><span class=\"constructor\">_getImplementation(<span class=\"params\">method_Custom</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">method</span><span class=\"constructor\">_exchangeImplementations(<span class=\"params\">method_System</span>, <span class=\"params\">method_Custom</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)swizzle_addObject:(id) obj &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj) &#123;</span><br><span class=\"line\">        <span class=\"literal\">[<span class=\"identifier\">self</span> <span class=\"identifier\">swizzle_addObject</span>:<span class=\"identifier\">obj</span>]</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>主要代码  method_exchangeImplementations (method1, method2); 这两个参数很简单，就是两个需要交换的方法。<br />\n最后我调用了 m1 但是实际上走了 m2。</p>\n<h5 id=\"动态交换方法的原理以及交换过程中指针的变化\"><a class=\"anchor\" href=\"#动态交换方法的原理以及交换过程中指针的变化\">#</a> 动态交换方法的原理以及交换过程中指针的变化</h5>\n<p>在通常的方法交换中我们通常有两种情景，一种是我会针对被交换的类建一个 category，然后 hook 的方法会写在 category 中。另一种是自己创建一个 Tool 类里面放些常用的工具方法其中包含了方法交换。可能大家普遍选择第一种方法，但是如果你需要 hook 的类非常多的 (我实际项目中就遇到这样的问题) 那你就需要针对不同的类创建 category，就会导致文件过多，且每一个文件中只有一个 hook 方法，这样一来左侧一堆文件，所以我用了第二种方法，但是在使用过程中出现一个问题，先看下我的代码结构</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6khw8c97j30740ag74v.jpg\" alt=\"image.png\" /></p>\n<p>我要 hook 的是 ViewController 中的 viewDidLoad 方法，我建立了两个类一个是 ViewController 的 category，另一个是 Tool 类，为了一会区别演示不同类 hook 的不同 (两个类中 hook 的代码完全一样)</p>\n<ul>\n<li>ViewController 中将要被替换的系统方法</li>\n</ul>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kir8y63j309a02rglq.jpg\" alt=\"被替换的方法(系统方法)\" /></p>\n<ul>\n<li>Category 中将要用来替换的自定义方法</li>\n</ul>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kj5dcykj308z02lwep.jpg\" alt=\"用来替换的方法(自定义方法)\" /></p>\n<ul>\n<li>然后在 ViewController 中的 load 中做方法替换</li>\n</ul>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kjlzvdqj30f90b43zw.jpg\" alt=\"进行方法替换\" /></p>\n<p>运行一下的输出结果想必大家已经猜到了先执行 custom 再执行 system，这是通常情况下大家的做法。<br />\n<img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kjxsheej30d701h3yl.jpg\" alt=\"结果\" /></p>\n<p>下面再来看下如果我将替换方法写在不同类中会怎样，调用 Tool 中的交换方法</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kka2s8uj30dx0anwfp.jpg\" alt=\"执行Tool中的交换方法\" /></p>\n<p>然后直接看结果了，因为代码都是一模一样的我直接复制过去的</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kliitupj30yd08w422.jpg\" alt=\"结果\" /></p>\n<p>发生了 crash，原因是 ViewController 中没有 swizzel_viewDidLoad_custom 这个方法，为什么不同类的交换会出现这种问题，我们用个图来说明下</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6km0wogkj30yg0pz43q.jpg\" alt=\"image.png\" /></p>\n<p>解决的办法是我们在交换方法之前要先像其中添加方法，也就是说把 customMethod 添加到 SystemClass 中，但是注意要把 customMethod 的实现指向 syetemMethod 的实现。这样一来就可以达到 SystemClass 调用 customMethod 却执行 systemMethod 的代码的效果，实现以上要求我们需要在交换之前执行这个方法。</p>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span><span class=\"constructor\">_addMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_Custom</span>, <span class=\"params\">imp_System</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>)</span><br></pre></td></tr></table></figure></p>\n<p>其中第一个参数是需要往哪个类添加；第二个参数是要添加的方法的方法名；第三个参数是所添加的方法的方法实现，第四个是方法的标识符。经过就该之后我们的代码是这样</p>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">之前的都一样就省略</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">class</span><span class=\"constructor\">_addMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_Custom</span>, <span class=\"params\">imp_System</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">class</span><span class=\"constructor\">_replaceMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_System</span>, <span class=\"params\">imp_Custom</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">method</span><span class=\"constructor\">_exchangeImplementations(<span class=\"params\">method_System</span>, <span class=\"params\">method_Custom</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>我们来看下执行完 add 操作之后此时的方法和类的对应关系 (红色的为 add 的修改)</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kmhkzidj30yg0g378f.jpg\" alt=\"关系\" /></p>\n<p>因为 SystemClass 中本身不包含 customMethod 所以 add 一定是成功的，也就是说会进入判断执行 replace 方法。</p>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span><span class=\"constructor\">_replaceMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_System</span>, <span class=\"params\">imp_Custom</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>第一个参数：需要修改的方法的所在的类；第二个参数：需要替换其实现的方法名；第三个参数：需要把哪个实现替换给他；第四个参数：方法标识符。此时看下我们做完 replace 之后的类与方法名以及他们实现的关系 (红色的为 replace 的修改)。</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kn9m5btj30yg0ifgqa.jpg\" alt=\"关系\" /></p>\n<p>此时大家已经看出来了，虽然没有执行 exchange 方法，但是我已经达到了方法交换的目的。系统执行 systemMethod 时候会走 customMethod 的实现但是因为在 customMethod 方法中我会递归执行 [self customMethod]，所以又会走到 systemMethod 的实现，因为之前进行了方法添加，所以此时 A 类中有了 customMethod 方法，不会再发生之前的 crash。达到一个不同类进行 Method Swizzling 的目的。</p>\n<h5 id=\"综上来看一个完整严谨的methodswizzling应该在交换前先add并且add方法的参数不能错\"><a class=\"anchor\" href=\"#综上来看一个完整严谨的methodswizzling应该在交换前先add并且add方法的参数不能错\">#</a> 综上来看一个完整严谨的 MethodSwizzling 应该在交换前先 add，并且 add 方法的参数不能错</h5>\n<p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)changeMethod &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class systemClass = <span class=\"constructor\">NSClassFromString(@<span class=\"string\">&quot;你的类&quot;</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    SEL sel_System = @selector(系统方法);</span><br><span class=\"line\">    SEL sel_Custom = @selector(你自己的方法);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method method_System = <span class=\"keyword\">class</span><span class=\"constructor\">_getInstanceMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_System</span>)</span>;</span><br><span class=\"line\">    Method method_Custom = <span class=\"keyword\">class</span><span class=\"constructor\">_getInstanceMethod([<span class=\"params\">self</span> <span class=\"params\">class</span>], <span class=\"params\">sel_Custom</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    IMP imp_System = <span class=\"keyword\">method</span><span class=\"constructor\">_getImplementation(<span class=\"params\">method_System</span>)</span>;</span><br><span class=\"line\">    IMP imp_Custom = <span class=\"keyword\">method</span><span class=\"constructor\">_getImplementation(<span class=\"params\">method_Custom</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">class</span><span class=\"constructor\">_addMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_Custom</span>, <span class=\"params\">imp_System</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">class</span><span class=\"constructor\">_replaceMethod(<span class=\"params\">systemClass</span>, <span class=\"params\">sel_System</span>, <span class=\"params\">imp_Custom</span>, <span class=\"params\">method_getTypeEncoding</span>(<span class=\"params\">method_System</span>)</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">method</span><span class=\"constructor\">_exchangeImplementations(<span class=\"params\">method_System</span>, <span class=\"params\">method_Custom</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"以上代码无论是写在工具类中还是category中都是没有问题的\"><a class=\"anchor\" href=\"#以上代码无论是写在工具类中还是category中都是没有问题的\">#</a> 以上代码无论是写在工具类中还是 category 中都是没有问题的。</h5>\n",
            "tags": [
                "底层",
                "runtime"
            ]
        },
        {
            "id": "https://oliverqueen.cn/2018-01-24-%E8%AE%B0%E4%B8%80%E6%AC%A1Runtime-Hook%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://oliverqueen.cn/2018-01-24-%E8%AE%B0%E4%B8%80%E6%AC%A1Runtime-Hook%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "记一次Runtime Hook的问题",
            "date_published": "2018-01-24T03:35:57.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h4>\n<p>项目中遇到一个问题，需要引入两个 SDK，我们暂且命名为 A 和 B，由于业务需要这两个 SDK 都需要对一个系统函数 C 进行 hook, 但是有一个前提，由于 B 所做的是一个统计相关的 SDK，所以 B 要监控 App 内的所有代码这其中也包括了 SDK A 所做的一些操作，所以我们必须确保 B 在 hook C 函数时候  A 已经对 C 函数 hook 完毕，其实这就涉及到 hook 顺序的问题。<br />\n<span id=\"more\"></span></p>\n<h4 id=\"研究\"><a class=\"anchor\" href=\"#研究\">#</a> 研究</h4>\n<p>先看下代码，我用 hookMethod 来模仿系统方法。<br />\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>) TEST_HOOK_TWICE &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> changeOrginalSelectorName:<span class=\"string\">@&quot;hookedMethod&quot;</span> inClass:<span class=\"string\">@&quot;RootViewController&quot;</span> withCustomSelectorName:<span class=\"string\">@&quot;swizzle_hookedMethod1&quot;</span> isClassMethod:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> changeOrginalSelectorName:<span class=\"string\">@&quot;hookedMethod&quot;</span> inClass:<span class=\"string\">@&quot;RootViewController&quot;</span> withCustomSelectorName:<span class=\"string\">@&quot;swizzle_hookedMethod2&quot;</span> isClassMethod:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> hookedMethod];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)hookedMethod &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;原始方法&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)swizzle_hookedMethod1 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;1&quot;</span>);</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzle_hookedMethod1];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)swizzle_hookedMethod2 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;2&quot;</span>);</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzle_hookedMethod2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 然后看下没有 hook 之前的样子</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6ll1zt21j30j80jk3zc.jpg\" alt=\"原本的样子\" /></p>\n<p>然后我们执行代码<br />\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步：交换A中的方法和系统方法</span></span><br><span class=\"line\"> [<span class=\"keyword\">self</span> changeOrginalSelectorName:<span class=\"string\">@&quot;hookedMethod&quot;</span> inClass:<span class=\"string\">@&quot;RootViewController&quot;</span> withCustomSelectorName:<span class=\"string\">@&quot;swizzle_hookedMethod1&quot;</span> isClassMethod:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"><span class=\"comment\">//第二步：交换B中的方法和系统方法</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> changeOrginalSelectorName:<span class=\"string\">@&quot;hookedMethod&quot;</span> inClass:<span class=\"string\">@&quot;RootViewController&quot;</span> withCustomSelectorName:<span class=\"string\">@&quot;swizzle_hookedMethod2&quot;</span> isClassMethod:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"><span class=\"comment\">//第三步：调用系统方法</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> hookedMethod];</span><br></pre></td></tr></table></figure><br />\n 然后我们一步一步来看，先看调用第一步之后是什么样子的 (红色箭头为第一步之后的样子)</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6llhzf0uj30ki0k2q3z.jpg\" alt=\"第一步之后\" /></p>\n<p>然后看第二步调用完之后的样子 (绿色是第二步调用)</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lm7mfshj30jo0iu75m.jpg\" alt=\"第二部之后的样子\" /></p>\n<p>接下来我们调用系统方法也就是第三步，然后我们看下流程是怎样的 (每个方法实现里面都会递归调用下自身，为了是 hook 时候不改变原有逻辑)</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lmi43vmj30yg03v756.jpg\" alt=\"调用顺序\" /></p>\n<p>这样一来就很明显 如果想想监控住所有的代码那就需要在 A IMP 这步，因为之前的 Hook 顺序是先 A -&gt; B -&gt; System 这样一来只要我们改一下顺序改为 B -&gt; A -&gt; System 就可以让 B SDK 监控到所有的代码。</p>\n<p><img data-src=\"https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6ln0wmlyj30yg07ign0.jpg\" alt=\"调用顺序\" /></p>\n",
            "tags": [
                "底层",
                "runtime",
                "Hook"
            ]
        }
    ]
}