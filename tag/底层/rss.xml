<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Molier • Posts by &#34;底层&#34; tag</title>
        <link>https://oliverqueen.cn</link>
        <description>iOS 开发 移动App 博客 杂谈 随笔 相册</description>
        <language>zh-CN</language>
        <pubDate>Wed, 24 Jan 2018 13:54:36 +0800</pubDate>
        <lastBuildDate>Wed, 24 Jan 2018 13:54:36 +0800</lastBuildDate>
        <category>欢迎页</category>
        <category>网络</category>
        <category>底层</category>
        <category>DNS解析</category>
        <category>LocalDNS</category>
        <category>OpenGL</category>
        <category>UI</category>
        <category>动画</category>
        <category>性能优化</category>
        <category>xcode</category>
        <category>cocoapods</category>
        <category>podfile</category>
        <category>webview</category>
        <category>hook</category>
        <category>runtime</category>
        <category>翻译</category>
        <category>优化</category>
        <category>国外文献</category>
        <category>httpdns</category>
        <category>Cocoapods</category>
        <category>架构</category>
        <category>AlertView</category>
        <category>Hook</category>
        <category>杂谈</category>
        <category>Hexo</category>
        <category>个人博客</category>
        <category>网站</category>
        <category>屏幕适配</category>
        <category>iOS 11</category>
        <category>评论插件</category>
        <category>总结</category>
        <category>回味2017展望2018</category>
        <category>热修复</category>
        <category>JSPath</category>
        <category>swift</category>
        <category>网络请求</category>
        <category>Swift</category>
        <category>音频</category>
        <category>唱吧</category>
        <category>K歌</category>
        <category>AVFoundation</category>
        <category>git</category>
        <category>效率工作</category>
        <category>回首2018展望2019</category>
        <category>代码版本控制</category>
        <category>iOS</category>
        <category>Crash防护</category>
        <category>Apple登录</category>
        <category>WWDC2022</category>
        <category>逆向</category>
        <category>算法</category>
        <category>C语言</category>
        <category>排序</category>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2018-01-24-%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%85%A8%E7%9A%84iOS%E7%AB%AFHttpDns%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88/</guid>
            <title>可能是最全的iOS端HttpDns集成方案</title>
            <link>https://oliverqueen.cn/2018-01-24-%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%85%A8%E7%9A%84iOS%E7%AB%AFHttpDns%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88/</link>
            <category>网络</category>
            <category>底层</category>
            <category>httpdns</category>
            <pubDate>Wed, 24 Jan 2018 13:54:36 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;科普片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#科普片&#34;&gt;#&lt;/a&gt; 科普片&lt;/h1&gt;
&lt;h5 id=&#34;1-dns劫持的危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-dns劫持的危害&#34;&gt;#&lt;/a&gt; 1、DNS 劫持的危害&lt;/h5&gt;
&lt;p&gt;不知道大家有没有发现这样一个现象，在打开一些网页的时候会弹出一些与所浏览网页不相关的内容比如这样奇 (se) 怪 (qing) 的东西&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6jm5b190j30h60ugqkg.jpg&#34; alt=&#34;图一&#34; /&gt;&lt;/p&gt;
&lt;p&gt;或者这样&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6jmr1afuj30ww0ue4qp.jpg&#34; alt=&#34;图二&#34; /&gt;，&lt;/p&gt;
&lt;p&gt;其实造成这样的原因就是 DNS 劫持，在我们正常浏览的网页链接里面被恶意插入一些奇怪的东西。不止是这些，DNS 劫持还会对我们的个人信息安全造成很大的伤害，钓鱼网站之类的，也许我们所访问的网站根本不是我们需要的网站，或者根本打不开网页，有时还会消耗我们过多的流量。&lt;/p&gt;
&lt;h5 id=&#34;2-什么是dns解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-什么是dns解析&#34;&gt;#&lt;/a&gt; 2、什么是 DNS 解析&lt;/h5&gt;
&lt;p&gt;现在假如我们访问一个网站 www.baidu.com 从按下回车到百度页面显示到我们的电脑上会经历如下几个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：计算机会向我们的运营商 (移动、电信、联通等) 发出打开 www.baidu.com 的请求。&lt;/li&gt;
&lt;li&gt;2：运营商收到请求后会到自己的 DNS 服务器中找 www.baidu.com 这个域名所对应的服务器的 IP 地址 (也就是百度的服务器的 IP 地址)，这里比如是 180.149.132.47。&lt;/li&gt;
&lt;li&gt;3：运营商用第二步得到的 IP 地址去找到百度的服务器请求得到数据后返回给我们。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中第二步就是我们所说的 DNS 解析过程，域名和 IP 地址的关系其实就是我们的身份证号和姓名的关系，都是来标记一个人或者是一个网站的，只是 IP 地址 \ 身份证号只是一串没有意义的数字，辨识度低，又不好记，所以就会在 IP 上加上一个域名以便区分，或是做的更加个性化，但是如果真的要来准确的区分还是要靠身份证号码或者是 IP 的，所以 DNS 解析就应运而生了。&lt;/p&gt;
&lt;h5 id=&#34;3什么是dns劫持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3什么是dns劫持&#34;&gt;#&lt;/a&gt; 3：什么是 DNS 劫持&lt;/h5&gt;
&lt;p&gt;DNS 劫持，是指在 DNS 解析过程中拦截域名解析的请求，然后做一些自己的处理，比如返回假的 IP 地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能反应或访问的是假网址。根本原因就是以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：恶意攻击，拦截运营商的解析过程，把自己的非法东西嵌入其中。&lt;/li&gt;
&lt;li&gt;2：运营商为了利益或者一些其他的因素，允许一些第三方在自己的链接里打打广告之类的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4防止dns劫持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4防止dns劫持&#34;&gt;#&lt;/a&gt; 4：防止 DNS 劫持&lt;/h5&gt;
&lt;p&gt;了解了 DNS 劫持的相关资料后我们就知道了，防止 NDS 劫持就要从第二步入手，因为 DNS 解析过程是运营商来操作的，我们不能去干涉他们，不然我们也就成了劫持者了，所以我们要做的就是在我们请求之前对我们的请求链接做一些修改，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13d3ctb3Q5ZHg4c3k0bm9qa284Y2c2azl1bmtwMWF3ODBkb3N5YS5iYWlkdS5jb20=&#34;&gt;将我们原本的请求链接 www.baidu.com&lt;/span&gt; 修改为 180.149.132.47，然后请求出去，这样的话就运营商在拿到我们的请求后发现我们直接用的就是 IP 地址就会直接给我们放行，而不会去走他自己 DNS 解析了，也就是说我们把运营商要做的事情自己先做好了。不走他的 DNS 解析也就不会存在 DNS 被劫持的问题，从根本是解决了。&lt;/p&gt;
&lt;h1 id=&#34;技术篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术篇&#34;&gt;#&lt;/a&gt; 技术篇&lt;/h1&gt;
&lt;h5 id=&#34;5项目中的实际操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5项目中的实际操作&#34;&gt;#&lt;/a&gt; 5：项目中的实际操作&lt;/h5&gt;
&lt;h6 id=&#34;51dnspod相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51dnspod相关&#34;&gt;#&lt;/a&gt; 5.1：DNSPOD 相关&lt;/h6&gt;
&lt;p&gt;我们知道要要把项目中请求的接口替换成成 IP 其实很简单，URL 是字符串，域名替换 IP，无非就是一个字符串替换而已，的确这块其实没有什么技术含量，而且现在像阿里云 (没开源)，七牛云 (开源)，等一些比较大的平台在这方面也都有了比较成熟的解决方案，一个 SDK，传个普通的 URL 进去就会返回一个域名被替换成 IP 的 URL 出来，也比较好用，这里要说一下 IP 地址的来源，如何拿到一个域名所对应的 IP 呢？这里就是需要用到另一个服务 ——HTTPDNS，国内比较有名的就是 DNSPOD，包括阿里，七牛等也是使用他们的 DNS 服务来解析，就是这个&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6jnbe2zhj30sa0i8dwv.jpg&#34; alt=&#34;DNSPOD logo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6jnt2uw9j31kw0icava.jpg&#34; alt=&#34;简介&#34; /&gt;&lt;/p&gt;
&lt;p&gt;他会给我们提供一个接口，我们使用 HTTP 请求的方式去请求这个接口，参数带上我们的域名，他们就会把域名对应的 IP 列表返回回来。类似这样：&lt;br /&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///这个请求URL的结构是固定的119.29.29.29是DNSPOD固定的服务器地址，ttl参数的意思是返回结果是否带ttl是个BOOL，dn就是我们需要解析的域名，id就是我们在dnspod上注册时候他给我们的一个KEY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *url = [&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&#34;string&#34;&gt;@&amp;quot;http://119.29.29.29/d?ttl=1&amp;amp;dn=www.baidu.com&amp;amp;id=KEY&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSMutableURLRequest&lt;/span&gt; * request = [&lt;span class=&#34;built_in&#34;&gt;NSMutableURLRequest&lt;/span&gt; requestWithURL:[&lt;span class=&#34;built_in&#34;&gt;NSURL&lt;/span&gt; URLWithString:url] cachePolicy:&lt;span class=&#34;built_in&#34;&gt;NSURLRequestUseProtocolCachePolicy&lt;/span&gt; timeoutInterval:&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSData&lt;/span&gt; * data = [&lt;span class=&#34;built_in&#34;&gt;NSURLConnection&lt;/span&gt; sendSynchronousRequest:request returningResponse:&lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; error:&amp;amp;networkError];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里使用同步还是异步都是可以的，具体根据你们业务需求。&lt;/p&gt;
&lt;h6 id=&#34;52项目中的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52项目中的使用&#34;&gt;#&lt;/a&gt; 5.2：项目中的使用&lt;/h6&gt;
&lt;p&gt;其实 dnspod 最难的部分是接入的部分，因为不同的 APP 不同的网络环境会导致各种各样的问题，如果你是一个新的项目那么接入难度会大大降低，因为你完全可以自己封装一套网络请求，把 DNS 解析相关的逻辑都封装到自己的网络请求中，这样你就可以得到 APP 所有的网络层的控制权，想干什么就干什么，但是如果是在一个已经比较完善的 APP 中加入 DNS 防劫持的话那就是比较困难，因为你不能拿到所有网络请求的控制权这篇文章中我主要使用是 NSURLProtocol + Runtime hook 方式来处理这些东西的，NSURLProtocol 属于 iOS 黑魔法的一种可以拦截任何从 APP 的 URL Loading System 系统中发出的请求，其中包括如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File Transfer Protocol (ftp://)&lt;/li&gt;
&lt;li&gt;Hypertext Transfer Protocol (http://)&lt;/li&gt;
&lt;li&gt;Hypertext Transfer Protocol with encryption (https://)&lt;/li&gt;
&lt;li&gt;Local file URLs (file:///)&lt;/li&gt;
&lt;li&gt;Data URLs (data://)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的请求不在以上列表中就不能进行拦截了，比如 WKWebview，AVPlayer (比较特殊，虽然请求也是 http/https 但是就是不走这套系统，苹果爸爸就是这样～) 等，其实对于正常来说光用已经 NSURLProtocol 足够了。&lt;br /&gt;
  NSURLProtocol 这个类我们不能直接使用，我们需要自己创建一个他的子类然后在我们的子类中操作他们像这样&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// 注册自定义protocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;built_in&#34;&gt;NSURLProtocol&lt;/span&gt; registerClass:[CustomURLProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *configuration = [&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;configuration.protocolClasses = @[[CustomURLProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 在这个类中我们可以拦截到请求，然后进行处理。这个类中有四个非常重要的方法&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+ (&lt;span class=&#34;type&#34;&gt;BOOL&lt;/span&gt;)canInitWithRequest:(&lt;span class=&#34;built_in&#34;&gt;NSURLRequest&lt;/span&gt; *)request;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+ (&lt;span class=&#34;built_in&#34;&gt;NSURLRequest&lt;/span&gt; *)canonicalRequestForRequest:(&lt;span class=&#34;built_in&#34;&gt;NSURLRequest&lt;/span&gt; *)request;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)startLoading;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//对于拦截的请求，NSURLProtocol对象在停止加载时调用该方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)stopLoading;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;boolcaninitwithrequestnsurlrequest-request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boolcaninitwithrequestnsurlrequest-request&#34;&gt;#&lt;/a&gt; + (BOOL)canInitWithRequest:(NSURLRequest *)request;&lt;/h6&gt;
&lt;p&gt;通过返回值来告诉 NSUrlProtocol 对进来的请求是否拦截，比如我只拦截 HTTP 的，或者是某个域名的请求之类&lt;/p&gt;
&lt;h6 id=&#34;nsurlrequest-canonicalrequestforrequestnsurlrequest-request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nsurlrequest-canonicalrequestforrequestnsurlrequest-request&#34;&gt;#&lt;/a&gt; + (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request;&lt;/h6&gt;
&lt;p&gt;如果上面的方法返回 YES 那么 request 会传到这里，这个地方通常不做处理 直接返回 request&lt;/p&gt;
&lt;h6 id=&#34;-voidstartloading&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-voidstartloading&#34;&gt;#&lt;/a&gt; - (void)startLoading;&lt;/h6&gt;
&lt;p&gt;这个地方就是对我们拦截的请求做一些处理，我们文中所做的 IP 对域名的替换就在这里进行，处理完之后将请求转发出去，比如这样&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)startLoading &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///其中customRequest是处理过的请求(域名替换后的)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *session = [&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; sessionWithConfiguration:[[&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; alloc] init] delegate:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; delegateQueue:&lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSURLSessionDataTask&lt;/span&gt; *task = [session dataTaskWithRequest:customRequest];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [task resume];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 你可以在 - startLoading 中使用任何方法来对协议对象持有的 request 进行转发，包括 NSURLSession、 NSURLConnection 甚至使用 AFNetworking 等网络库，只要你能在回调方法中把数据传回 client，帮助其正确渲染就可以，比如这样：&lt;br /&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)URLSession:(&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *)session dataTask:(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTask didReceiveResponse:(&lt;span class=&#34;built_in&#34;&gt;NSURLResponse&lt;/span&gt; *)response completionHandler:(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (^)(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionResponseDisposition&lt;/span&gt;))completionHandler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; client] URLProtocol:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; didReceiveResponse:response cacheStoragePolicy:&lt;span class=&#34;built_in&#34;&gt;NSURLCacheStorageAllowed&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    completionHandler(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionResponseAllow&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)URLSession:(&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *)session dataTask:(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTask didReceiveData:(&lt;span class=&#34;built_in&#34;&gt;NSData&lt;/span&gt; *)data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; client] URLProtocol:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; didLoadData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
client 在后面会有讲解。&lt;/p&gt;
&lt;h6 id=&#34;-voidstoploading&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-voidstoploading&#34;&gt;#&lt;/a&gt; - (void)stopLoading;&lt;/h6&gt;
&lt;p&gt;请求完毕后调用&lt;br /&gt;
大概的执行流程是这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6jtpp3z0j30ze1by122.jpg&#34; alt=&#34;流程&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 NSURLProtocol 中有一个贯穿始终的变量&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    @method client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    @abstract Returns the NSURLProtocolClient of the receiver.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    @result The NSURLProtocolClient of the receiver.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@property&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;retain&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&#34;built_in&#34;&gt;NSURLProtocolClient&lt;/span&gt;&amp;gt; client;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 你可以认为是这个是请求的发送者，打个比方，A 想给 B 发送一个消息，由于距离遥远于是 A 去了邮局，A 把消息内容告诉了邮局，并且 A 在邮局登记了自己名字方便 B 有反馈的时候邮局来通知 A 查收。这个例子中邮局就是 NSURLProtocol，A 在邮局登记的名字就是 client。所有的 client 都实现了 NSURLProtocolClient 协议，协议的作用就是在 HTTP 请求发出以及接受响应时向其它对象传输数据：&lt;br /&gt;
&lt;figure class=&#34;highlight erlang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@protocol NSURLProtocolClient &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;params&#34;&gt;(void)&lt;/span&gt;URLProtocol:&lt;span class=&#34;params&#34;&gt;(NSURLProtocol *)&lt;/span&gt;protocol didReceiveResponse:&lt;span class=&#34;params&#34;&gt;(NSURLResponse *)&lt;/span&gt;response cacheStoragePolicy:&lt;span class=&#34;params&#34;&gt;(NSURLCacheStoragePolicy)&lt;/span&gt;policy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;params&#34;&gt;(void)&lt;/span&gt;URLProtocol:&lt;span class=&#34;params&#34;&gt;(NSURLProtocol *)&lt;/span&gt;protocol didLoadData:&lt;span class=&#34;params&#34;&gt;(NSData *)&lt;/span&gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;params&#34;&gt;(void)&lt;/span&gt;URLProtocolDidFinishLoading:&lt;span class=&#34;params&#34;&gt;(NSURLProtocol *)&lt;/span&gt;protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 当然这个协议中还有很多其他的方法，比如 HTTPS 验证、重定向以及响应缓存相关的方法，你需要在合适的时候调用这些代理方法，对信息进行传递。&lt;br /&gt;
到此正常情况下的 DNS 的解析过程已经结束，如果你发现按照如上操作之后并没有达到预期效果那么请往下看，(通常情况下完成以上操作 原有的 URL 的就会变成 http://123.456.789.123/XXX/XXX/XXX 的格式。如果发现请求不成功就往下看吧)&lt;/p&gt;
&lt;h5 id=&#34;6遇到的坑点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6遇到的坑点&#34;&gt;#&lt;/a&gt; 6：遇到的坑点&lt;/h5&gt;
&lt;h6 id=&#34;61我们知道运营商本来是根据域名来确定一个url的我们将域名改为ip之后虽然不用运营商帮我们解析了但是运营商在收到一串数字的时候也是懵逼状态我们还是需要将域名传给他们但是不能用正常的方式传我们需要把原来的域名加到http请求的header中的host字段下根据http协议的规定如果在url中无法找到域名的话就会去header中找这样一来我们既把域名告诉了运营商同时也直接制定了ip地址这个是必须配置的不然的话是请求不成功的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61我们知道运营商本来是根据域名来确定一个url的我们将域名改为ip之后虽然不用运营商帮我们解析了但是运营商在收到一串数字的时候也是懵逼状态我们还是需要将域名传给他们但是不能用正常的方式传我们需要把原来的域名加到http请求的header中的host字段下根据http协议的规定如果在url中无法找到域名的话就会去header中找这样一来我们既把域名告诉了运营商同时也直接制定了ip地址这个是必须配置的不然的话是请求不成功的&#34;&gt;#&lt;/a&gt; 6.1：我们知道运营商本来是根据域名来确定一个 URL 的，我们将域名改为 IP 之后虽然不用运营商帮我们解析了，但是运营商在收到一串数字的时候也是懵逼状态，我们还是需要将域名传给他们，但是不能用正常的方式传，我们需要把原来的域名加到 http 请求的 Header 中的 host 字段下，根据 Http 协议的规定，如果在 URL 中无法找到域名的话就会去 Header 中找，这样一来我们既把域名告诉了运营商同时也直接制定了 IP 地址，这个是必须配置的，不然的话是请求不成功的。&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight pf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[mutableRequest &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;Value:&lt;span class=&#34;literal&#34;&gt;self&lt;/span&gt;.request.URL.host &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;HTTPHeaderField:@&lt;span class=&#34;string&#34;&gt;&amp;quot;HOST&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;加上header再去请求就没问题了不过有些特殊的情况下会需要带上cookie同样也是加到header中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加上header再去请求就没问题了不过有些特殊的情况下会需要带上cookie同样也是加到header中&#34;&gt;#&lt;/a&gt; 加上 Header 再去请求就没问题了，不过有些特殊的情况下会需要带上 cookie，同样也是加到 Header 中&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;mutableRequest setValue:YOUR Cookie forHTTPHeaderField:@&lt;span class=&#34;string&#34;&gt;&amp;quot;Cookie&amp;quot;&lt;/span&gt;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;62关于afnetworking的问题现在大部分网络请求是基于afnetworking的这里有一个坑我们知道我们注册customprotocol的时候是这样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62关于afnetworking的问题现在大部分网络请求是基于afnetworking的这里有一个坑我们知道我们注册customprotocol的时候是这样&#34;&gt;#&lt;/a&gt; 6.2：关于 AfNetworking 的问题，现在大部分网络请求是基于 Afnetworking 的，这里有一个坑，我们知道我们注册 CustomProtocol 的时候是这样&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// 注册自定义protocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;built_in&#34;&gt;NSURLProtocol&lt;/span&gt; registerClass:[CustomURLProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *configuration = [&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;configuration.protocolClasses = @[[CustomURLProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;在系统的configuration加入我们的customprotocolprotocolclasses是一个数组里面可以放很多各种不同的customprotocol我们看一下afnetworking的初始化方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在系统的configuration加入我们的customprotocolprotocolclasses是一个数组里面可以放很多各种不同的customprotocol我们看一下afnetworking的初始化方法&#34;&gt;#&lt;/a&gt; 在系统的 configuration 加入我们的 CustomProtocol，protocolClasses 是一个数组里面可以放很多各种不同的 CustomProtocol，我们看一下 afnetworking 的初始化方法。&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight abnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;AFHTTPSessionManager * sessionManager &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [AFHTTPSessionManager manager]&lt;span class=&#34;comment&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;我相信大家通常都会这么来创建但是这里我要说下manager并不是一个单利最后都会调到一个方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我相信大家通常都会这么来创建但是这里我要说下manager并不是一个单利最后都会调到一个方法&#34;&gt;#&lt;/a&gt; 我相信大家通常都会这么来创建，但是这里我要说下 manager 并不是一个单利，最后都会调到一个方法&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; (instancetype)initWithSessionConfiguration:(&lt;span class=&#34;type&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;)configuration &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;configuration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        configuration &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.sessionConfiguration &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.operationQueue &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;NSOperationQueue&lt;/span&gt; alloc] &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.operationQueue.maxConcurrentOperationCount &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.session &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;NSURLSession&lt;/span&gt; sessionWithConfiguration:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.sessionConfiguration delegate:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; delegateQueue:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.operationQueue];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;大家注意第二个判断如果没有传入configuration的话他会创建一个默认的这样以至于我们之前在configuration的protocolclasses中注册类全部被这个新的configuration替换掉了所以无法解析-这里我采取的办法就是runtime-hook因为hook第三方的代码并不是一个很好的办法所以我直接hook-nsurlsession的sessionwithconfiguration方法因为通过观察afnetworking的源码最终都是走到这里的-hook之后把自己的configuration换进去像这样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大家注意第二个判断如果没有传入configuration的话他会创建一个默认的这样以至于我们之前在configuration的protocolclasses中注册类全部被这个新的configuration替换掉了所以无法解析-这里我采取的办法就是runtime-hook因为hook第三方的代码并不是一个很好的办法所以我直接hook-nsurlsession的sessionwithconfiguration方法因为通过观察afnetworking的源码最终都是走到这里的-hook之后把自己的configuration换进去像这样&#34;&gt;#&lt;/a&gt; 大家注意第二个判断，如果没有传入 configuration 的话他会创建一个默认的，这样以至于我们之前在 configuration 的 protocolClasses 中注册类全部被这个新的 configuration 替换掉了，所以无法解析。这里我采取的办法就是 runtime hook，因为 hook 第三方的代码并不是一个很好的办法，所以我直接 hook NSURLSession 的 sessionWithConfiguration 方法，因为通过观察 Afnetworking 的源码最终都是走到这里的。Hook 之后把自己的 configuration 换进去，像这样&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+ (&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *)swizzle_sessionWithConfiguration:(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *)configuration &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *newConfiguration = configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在现有的Configuration中插入我们自定义的protocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (configuration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;NSMutableArray&lt;/span&gt; *protocolArray = [&lt;span class=&#34;built_in&#34;&gt;NSMutableArray&lt;/span&gt; arrayWithArray:configuration.protocolClasses];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [protocolArray insertObject:[CustomProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;] atIndex:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newConfiguration.protocolClasses = protocolArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newConfiguration = [&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;NSMutableArray&lt;/span&gt; *protocolArray = [&lt;span class=&#34;built_in&#34;&gt;NSMutableArray&lt;/span&gt; arrayWithArray:configuration.protocolClasses];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [protocolArray insertObject:[CustomProtocol &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;] atIndex:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newConfiguration.protocolClasses = protocolArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; swizzle_sessionWithConfiguration:newConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;然后就完美解决了-不过要注意下系统的是有两个方法的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#然后就完美解决了-不过要注意下系统的是有两个方法的&#34;&gt;#&lt;/a&gt; 然后就完美解决了。不过要注意下系统的是有两个方法的&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Customization of NSURLSession occurs during creation of a new session.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * If you only need to use the convenience routines with custom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * configuration options it is not necessary to specify a delegate.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * If you do specify a delegate, the delegate will be retained until after&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the delegate has been sent the URLSession:didBecomeInvalidWithError: message.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+ (&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *)sessionWithConfiguration:(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *)configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+ (&lt;span class=&#34;built_in&#34;&gt;NSURLSession&lt;/span&gt; *)sessionWithConfiguration:(&lt;span class=&#34;built_in&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; *)configuration delegate:(&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&#34;built_in&#34;&gt;NSURLSessionDelegate&lt;/span&gt;&amp;gt;)delegate delegateQueue:(&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSOperationQueue&lt;/span&gt; *)queue;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;这两个方法不能确定最终会走那个所以为了保险起见都hook下hook的方式是一样的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这两个方法不能确定最终会走那个所以为了保险起见都hook下hook的方式是一样的&#34;&gt;#&lt;/a&gt; 这两个方法不能确定最终会走那个，所以为了保险起见都 hook 下，hook 的方式是一样的&lt;/h6&gt;
&lt;h6 id=&#34;63avplayer请求avplayer是我们ios系统中系统自带的播放视频的框架用到地方也很多但是这个是比较坑的因为avplayer虽然也有httphttpsfile请求这个概念但是avplayer所有的请求都不会走url-loading-system也就是说所有由avplayer发出的请求都不能被我们的customprotocol拦截这时候大家也许会问不对呀我们正常调试的时候可以被拦截到的啊-其实苹果官方上是说avplayer在真机调试和模拟器调试时候走的完全不是一套策略也就是说在模拟器运行时候是完全正常的可以被拦截到也可以被解析但是在真机上面就恰恰相反了因为我们最后还是以真机为准所以我们采取的办法还是hook因为我们需要在媒体url传给avplayer前就要将相关东西配置好域名替换啊加host啊之类的所以我们要找avplayer的入口先看初始化方法我发现项目中使用一个avurlasset来初始化avplayer那么avurlasset又是什么呢继续查到avurlasset的初始化方法可以发现这个方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#63avplayer请求avplayer是我们ios系统中系统自带的播放视频的框架用到地方也很多但是这个是比较坑的因为avplayer虽然也有httphttpsfile请求这个概念但是avplayer所有的请求都不会走url-loading-system也就是说所有由avplayer发出的请求都不能被我们的customprotocol拦截这时候大家也许会问不对呀我们正常调试的时候可以被拦截到的啊-其实苹果官方上是说avplayer在真机调试和模拟器调试时候走的完全不是一套策略也就是说在模拟器运行时候是完全正常的可以被拦截到也可以被解析但是在真机上面就恰恰相反了因为我们最后还是以真机为准所以我们采取的办法还是hook因为我们需要在媒体url传给avplayer前就要将相关东西配置好域名替换啊加host啊之类的所以我们要找avplayer的入口先看初始化方法我发现项目中使用一个avurlasset来初始化avplayer那么avurlasset又是什么呢继续查到avurlasset的初始化方法可以发现这个方法&#34;&gt;#&lt;/a&gt; 6.3：AVPlayer 请求，AVPlayer 是我们 iOS 系统中系统自带的播放视频的框架，用到地方也很多，但是这个是比较坑的，因为 AVPlayer 虽然也有 http/https/file…… 请求这个概念，但是 AVPlayer 所有的请求都不会走 URL Loading System，也就是说所有由 AVPlayer 发出的请求都不能被我们的 CustomProtocol 拦截，这时候大家也许会问，不对呀，我们正常调试的时候可以被拦截到的啊。其实苹果官方上是说 AVPlayer 在真机调试和模拟器调试时候走的完全不是一套策略，也就是说在模拟器运行时候是完全正常的，可以被拦截到也可以被解析，但是在真机上面就恰恰相反了，因为我们最后还是以真机为准，所以我们采取的办法还是 hook，因为我们需要在媒体 URL 传给 AVPlayer 前就要将相关东西配置好，域名替换啊，加 host 啊之类的，所以我们要找 AVPlayer 的入口，先看初始化方法，我发现项目中使用一个 AVURLAsset 来初始化 AVPlayer，那么 AVURLAsset 又是什么呢？继续查到 AVURLAsset 的初始化方法，可以发现这个方法：&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @method		initWithURL:options:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @abstract		Initializes an&lt;span class=&#34;built_in&#34;&gt; instance &lt;/span&gt;of AVURLAsset for inspection of a media resource.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @param		URL&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				An&lt;span class=&#34;built_in&#34;&gt; instance &lt;/span&gt;of NSURL that references a media resource.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @param		options&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				An&lt;span class=&#34;built_in&#34;&gt; instance &lt;/span&gt;of NSDictionary that contains keys for specifying options for the initialization of the AVURLAsset. See AVURLAssetPreferPreciseDurationAndTimingKey&lt;span class=&#34;built_in&#34;&gt; and &lt;/span&gt;AVURLAssetReferenceRestrictionsKey above.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @result		An&lt;span class=&#34;built_in&#34;&gt; instance &lt;/span&gt;of AVURLAsset.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (instancetype)initWithURL:(NSURL *)URL options:(nullable NSDictionary&amp;lt;NSString *, id&amp;gt; *)options NS_DESIGNATED_INITIA&lt;span class=&#34;class&#34;&gt;LIZER;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;其中url就是我们传给avplayer播放的url找到目标就hook下就可以了具体过程就不多说了还是字符串替换但是有一点需要注意的是我之前上文说过做完ip对域名的替换之后还需要设置下request的host但是这个地方只有一个url并没有request该如何处理呢其实这个方法里面的opinion参数就是处理这个的可以添加cookie之类的类似与httpheader的东西可以添加这几个key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其中url就是我们传给avplayer播放的url找到目标就hook下就可以了具体过程就不多说了还是字符串替换但是有一点需要注意的是我之前上文说过做完ip对域名的替换之后还需要设置下request的host但是这个地方只有一个url并没有request该如何处理呢其实这个方法里面的opinion参数就是处理这个的可以添加cookie之类的类似与httpheader的东西可以添加这几个key&#34;&gt;#&lt;/a&gt; 其中 URL 就是我们传给 AVPlayer 播放的 URL，找到目标就 Hook 下就可以了，具体过程就不多说了还是字符串替换，但是有一点需要注意的是，我之前上文说过做完 IP 对域名的替换之后还需要设置下 request 的 Host，但是这个地方只有一个 URL 并没有 Request 该如何处理呢？其实这个方法里面的 opinion 参数就是处理这个的，可以添加 cookie 之类的类似与 httpheader 的东西，可以添加这几个 Key&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;AVF_EXPORT&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AVURLAssetPreferPreciseDurationAndTimingKey&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NS_AVAILABLE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_7, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;AVF_EXPORT&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AVURLAssetReferenceRestrictionsKey&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NS_AVAILABLE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_7, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;AVF_EXPORT&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AVURLAssetHTTPCookiesKey&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;AVF_EXPORT&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AVURLAssetAllowsCellularAccessKey&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;但是并没有发现和host相关的key其实这个key是有的就是avurlassethttpheaderfieldskey只是因为这个key没暴露出来-这个地方不太确定是不是苹果的私有api网上查了大量的资料也没有个说法甚至我亲自去苹果开发者去问苹果也没有给任何答复各种说法都有具体使用的话就是&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#但是并没有发现和host相关的key其实这个key是有的就是avurlassethttpheaderfieldskey只是因为这个key没暴露出来-这个地方不太确定是不是苹果的私有api网上查了大量的资料也没有个说法甚至我亲自去苹果开发者去问苹果也没有给任何答复各种说法都有具体使用的话就是&#34;&gt;#&lt;/a&gt; 但是并没有发现和 Host 相关的 Key，其实这个 key 是有的就是 AVURLAssetHTTPHeaderFieldsKey 只是因为这个 Key 没暴露出来。这个地方不太确定是不是苹果的私有 API，网上查了大量的资料也没有个说法，甚至我亲自去苹果开发者去问，苹果也没有给任何答复，各种说法都有，具体使用的话就是&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;swizzle_initWithURL:&lt;/span&gt;videoURL &lt;span class=&#34;symbol&#34;&gt;options:&lt;/span&gt;@&amp;#123;AVURLAssetHTTPHeaderFieldsKey : @&amp;#123;@&lt;span class=&#34;string&#34;&gt;&amp;quot;Host&amp;quot;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;:host&lt;/span&gt;&amp;#125;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;这样使用是没有任何问题的但是毕竟是没有暴露出来的方法我们不能这样明目张胆的使用其实对于字符串来说还是比较好规避的只要不要明文出现这个key就可以我在这里使用了一个加密吧key变成密文然后这个地方通过解密获取就像这样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这样使用是没有任何问题的但是毕竟是没有暴露出来的方法我们不能这样明目张胆的使用其实对于字符串来说还是比较好规避的只要不要明文出现这个key就可以我在这里使用了一个加密吧key变成密文然后这个地方通过解密获取就像这样&#34;&gt;#&lt;/a&gt; 这样使用是没有任何问题的，但是毕竟是没有暴露出来的方法，我们不能这样明目张胆的使用，其实对于字符串来说还是比较好规避的，只要不要明文出现这个 KEY 就可以，我在这里使用了一个加密，吧 key 变成密文然后这个地方通过解密获取，就像这样：&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//加密后的KEY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; * headerKey = &lt;span class=&#34;string&#34;&gt;@&amp;quot;35905FF45AFA4C579B7DE2403C7CA0CCB59AA83D660E60C9D444AFE13323618F&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//getRequestHeaderKey方法为解密方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; swizzle_initWithURL:videoURL options:@&amp;#123;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; getRequestHeaderKey] : @&amp;#123;&lt;span class=&#34;string&#34;&gt;@&amp;quot;Host&amp;quot;&lt;/span&gt;:host&amp;#125;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;这样之后就大功告成了avplayer可以在dns被劫持的情况下播放了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这样之后就大功告成了avplayer可以在dns被劫持的情况下播放了&#34;&gt;#&lt;/a&gt; 这样之后就大功告成了，AVPlayer 可以在 DNS 被劫持的情况下播放了，&lt;/h6&gt;
&lt;h6 id=&#34;64post请求这块也算是一个大坑我们知道http的post请求会包含一个body体里面包含我们需要上传的参数等一些资料对于post请求我们的nsurlprotocol是可以正常拦截的但是我们拦截之后发现无论怎么样我们获得的body体都为nil后来查了一些资料发下又是苹果爸爸在做手脚-nsurlprotocol在拦截nsurlsession的post请求时不能获取到request中的httpbody这个貌似早就国外的论坛上传开了但国内好像还鲜有人知据苹果官方的解释是body是nsdata类型即可能为二进制内容而且还没有大小限制所以可能会很大为了性能考虑索性就拦截时就不拷贝了内流满面脸-为了解决这个问题我们可以通过把body数据放到header中不过header的大小好像是有限制的我试过2m是没有问题不过超过10m就直接request-timeout了-而且当body数据为二进制数据时这招也没辙了因为header里都是文本数据另一种方案就是用一个nsdictionary或nscache保存没有请求的body数据用url为key最后方法就是别用nsurlsession老老实实用古老的nsurlconnection算了-你以为这么就结束了吗并没有后来查了大量的资料发现既然post请求的httpbody没有苹果复制下来那我们就不用httpbody我们再往底层去看就会发现httpbodystream这个东西我们可以通过他来获取请求的body体具体代吗如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64post请求这块也算是一个大坑我们知道http的post请求会包含一个body体里面包含我们需要上传的参数等一些资料对于post请求我们的nsurlprotocol是可以正常拦截的但是我们拦截之后发现无论怎么样我们获得的body体都为nil后来查了一些资料发下又是苹果爸爸在做手脚-nsurlprotocol在拦截nsurlsession的post请求时不能获取到request中的httpbody这个貌似早就国外的论坛上传开了但国内好像还鲜有人知据苹果官方的解释是body是nsdata类型即可能为二进制内容而且还没有大小限制所以可能会很大为了性能考虑索性就拦截时就不拷贝了内流满面脸-为了解决这个问题我们可以通过把body数据放到header中不过header的大小好像是有限制的我试过2m是没有问题不过超过10m就直接request-timeout了-而且当body数据为二进制数据时这招也没辙了因为header里都是文本数据另一种方案就是用一个nsdictionary或nscache保存没有请求的body数据用url为key最后方法就是别用nsurlsession老老实实用古老的nsurlconnection算了-你以为这么就结束了吗并没有后来查了大量的资料发现既然post请求的httpbody没有苹果复制下来那我们就不用httpbody我们再往底层去看就会发现httpbodystream这个东西我们可以通过他来获取请求的body体具体代吗如下&#34;&gt;#&lt;/a&gt; 6.4：POST 请求这块也算是一个大坑，我们知道 http 的 post 请求会包含一个 body 体，里面包含我们需要上传的参数等一些资料，对于 POST 请求我们的 NSURLProtocol 是可以正常拦截的，但是我们拦截之后发现无论怎么样我们获得的 body 体都为 nil！后来查了一些资料发下又是苹果爸爸在做手脚。NSURLProtocol 在拦截 NSURLSession 的 POST 请求时不能获取到 Request 中的 HTTPBody，这个貌似早就国外的论坛上传开了，但国内好像还鲜有人知，据苹果官方的解释是 Body 是 NSData 类型，即可能为二进制内容，而且还没有大小限制，所以可能会很大，为了性能考虑，索性就拦截时就不拷贝了（内流满面脸）。为了解决这个问题，我们可以通过把 Body 数据放到 Header 中，不过 Header 的大小好像是有限制的，我试过 2M 是没有问题，不过超过 10M 就直接 Request timeout 了。。。而且当 Body 数据为二进制数据时这招也没辙了，因为 Header 里都是文本数据，另一种方案就是用一个 NSDictionary 或 NSCache 保存没有请求的 Body 数据，用 URL 为 key，最后方法就是别用 NSURLSession，老老实实用古老的 NSURLConnection 算了。。。你以为这么就结束了吗？并没有，后来查了大量的资料发现，既然 post 请求的 httpbody 没有苹果复制下来，那我们就不用 httpbody，我们再往底层去看就会发现 HTTPBodyStream 这个东西我们可以通过他来获取请求的 body 体具体代吗如下&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark 处理POST请求相关POST  用HTTPBodyStream来处理BODY体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;built_in&#34;&gt;NSMutableURLRequest&lt;/span&gt; *)handlePostRequestBodyWithRequest:(&lt;span class=&#34;built_in&#34;&gt;NSMutableURLRequest&lt;/span&gt; *)request &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSMutableURLRequest&lt;/span&gt; * req = [request mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ([request.HTTPMethod isEqualToString:&lt;span class=&#34;string&#34;&gt;@&amp;quot;POST&amp;quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!request.HTTPBody) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            uint8_t d[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;NSInputStream&lt;/span&gt; *stream = request.HTTPBodyStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;NSMutableData&lt;/span&gt; *data = [[&lt;span class=&#34;built_in&#34;&gt;NSMutableData&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [stream open];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ([stream hasBytesAvailable]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;NSInteger&lt;/span&gt; len = [stream read:d maxLength:&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; stream.streamError == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [data appendBytes:(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *)d length:len];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            req.HTTPBody = [data &lt;span class=&#34;keyword&#34;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [stream close];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; req;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;这样之后的req就是携带了body体的request啦可以愉快地做post请求啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这样之后的req就是携带了body体的request啦可以愉快地做post请求啦&#34;&gt;#&lt;/a&gt; 这样之后的 req 就是携带了 body 体的 request 啦，可以愉快地做 post 请求啦。&lt;/h6&gt;
&lt;h6 id=&#34;65wkwebview是新出的浏览器控件这里就不多说了wkwebview不走url-loading-system所以也不会被拦截不过也是有办法的但是因为这次项目中没有用到所以没有过多的去研究后续我会写一篇关于这个博客不是很难依旧是runtime大法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#65wkwebview是新出的浏览器控件这里就不多说了wkwebview不走url-loading-system所以也不会被拦截不过也是有办法的但是因为这次项目中没有用到所以没有过多的去研究后续我会写一篇关于这个博客不是很难依旧是runtime大法&#34;&gt;#&lt;/a&gt; 6.5：WKWebview 是新出的浏览器控件，这里就不多说了，WKWebview 不走 URL Loading System，所以也不会被拦截，不过也是有办法的，但是因为这次项目中没有用到，所以没有过多的去研究，后续我会写一篇关于这个博客，不是很难，依旧是 runtime 大法。&lt;/h6&gt;
&lt;h6 id=&#34;66sni环境这个可是坑了我好久好久的东西所以我会放在最后去说sni环境因为涉及到证书验证所以是在https的基础上来说的sniserver-name-indication是为了解决一个服务器使用多个域名和证书的扩展-一句话简述它的工作原理就是在连接到服务器建立ssl链接之前先发送要访问站点的域名hostname这样服务器根据这个域名返回一个合适的证书-其实关于sni环境在这里就不过多解释阿里云文档有很明白的解释同时他也有安卓和ios在sni环境下的处理文档我们发现安卓部分写的很详细可是已到了ios这边就这样了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#66sni环境这个可是坑了我好久好久的东西所以我会放在最后去说sni环境因为涉及到证书验证所以是在https的基础上来说的sniserver-name-indication是为了解决一个服务器使用多个域名和证书的扩展-一句话简述它的工作原理就是在连接到服务器建立ssl链接之前先发送要访问站点的域名hostname这样服务器根据这个域名返回一个合适的证书-其实关于sni环境在这里就不过多解释阿里云文档有很明白的解释同时他也有安卓和ios在sni环境下的处理文档我们发现安卓部分写的很详细可是已到了ios这边就这样了&#34;&gt;#&lt;/a&gt; 6.6：SNI 环境，这个可是坑了我好久好久的东西，所以我会放在最后去说，SNI 环境因为涉及到证书验证所以是在 https 的基础上来说的，SNI（Server Name Indication）是为了解决一个服务器使用多个域名和证书的扩展。一句话简述它的工作原理就是，在连接到服务器建立 SSL 链接之前先发送要访问站点的域名（Hostname），这样服务器根据这个域名返回一个合适的证书。其实关于 SNI 环境在这里就不过多解释，**&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzMwMTQzLmh0bWw=&#34;&gt; 阿里云文档&lt;/span&gt; ** 有很明白的解释，同时他也有安卓和 iOS 在 SNI 环境下的处理文档，我们发现安卓部分写的很详细，可是已到了 iOS 这边就这样了：&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6juzsqdqj31kw0bbn5v.jpg&#34; alt=&#34;阿里云文档截图&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;三行文字加三个链接就完事了-其实在遇到这个坑的时候我也查过很多相关资料无非就是这三行话加这三个链接复制来复制去没有实质性的进展大部分公司或者是项目没有这么重的httpdns需求所以也就不会有这个环境即使遇到了也就直接关闭httpdns了后来只能自己去用cfnetwork一点点实现-具体代码就不跟大家粘贴了因为涉及到一些公司内部的代码不过我会把我主要的参考资料发给大家-这里有个小技巧因为都在说cfnetwork是比较底层的网络实现好多东西需要开发者自行处理比如一些变量的释放之类的所以我们能少用尽量少用因为cfnetwork是为snihttps环境服务所以我们在拦截判断的时候可以区分是用上层的网络请求转发还是用底层的cfnetwork来转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三行文字加三个链接就完事了-其实在遇到这个坑的时候我也查过很多相关资料无非就是这三行话加这三个链接复制来复制去没有实质性的进展大部分公司或者是项目没有这么重的httpdns需求所以也就不会有这个环境即使遇到了也就直接关闭httpdns了后来只能自己去用cfnetwork一点点实现-具体代码就不跟大家粘贴了因为涉及到一些公司内部的代码不过我会把我主要的参考资料发给大家-这里有个小技巧因为都在说cfnetwork是比较底层的网络实现好多东西需要开发者自行处理比如一些变量的释放之类的所以我们能少用尽量少用因为cfnetwork是为snihttps环境服务所以我们在拦截判断的时候可以区分是用上层的网络请求转发还是用底层的cfnetwork来转发&#34;&gt;#&lt;/a&gt; 三行文字加三个链接就完事了。其实在遇到这个坑的时候我也查过很多相关资料，无非就是这三行话加这三个链接复制来复制去，没有实质性的进展，大部分公司或者是项目没有这么重的 Httpdns 需求，所以也就不会有这个环境，即使遇到了也就直接关闭 httpdns 了，后来只能自己去用 CFNetwork 一点点实现。具体代码就不跟大家粘贴了因为涉及到一些公司内部的代码，不过我会把我 **&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0RhdmUxOTkxL2FsaWNsb3VkLWlvcy1kZW1vL2Jsb2IvbWFzdGVyL2h0dHBkbnNfaW9zX2RlbW8vaHR0cGRuc19pb3NfZGVtby9DRkh0dHBNZXNzYWdlVVJMUHJvdG9jb2wubQ==&#34;&gt; 主要的参考资料&lt;/span&gt; ** 发给大家。这里有个小技巧，因为都在说 CFNetwork 是比较底层的网络实现，好多东西需要开发者自行处理比如一些变量的释放之类的，所以我们能少用尽量少用，因为 Cfnetwork 是为 SNI (https) 环境服务，所以我们在拦截判断的时候可以区分是用上层的网络请求转发还是用底层的 cfnetwork 来转发，&lt;/h6&gt;
&lt;p&gt;&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ([&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.request.&lt;span class=&#34;type&#34;&gt;URL&lt;/span&gt;.scheme isEqualToString:@&lt;span class=&#34;string&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用CFnetwork&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        curRequest &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; req;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.task &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;CustomCFNetworkRequestTask&lt;/span&gt; alloc] initWithURLRequest:originalRequest swizzleRequest:curRequest delegate:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.task) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.task startLoading];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用普通网络请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;configuration &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.session &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;NSURLSession&lt;/span&gt; sessionWithConfiguration:configuration delegate:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; delegateQueue:[&lt;span class=&#34;type&#34;&gt;NSOperationQueue&lt;/span&gt; mainQueue]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NSURLSessionTask&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;task &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.session dataTaskWithRequest:req];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [task resume];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&#34;我是这么做的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我是这么做的&#34;&gt;#&lt;/a&gt; 我是这么做的。&lt;/h6&gt;
&lt;h6 id=&#34;67在nsurlprotocol中的那几个类方法中是可以发送同步请求的但是在实例方法发送同步请求就会卡死所以实例方法中不能有任何的阻塞进行同步操作-不然就卡死&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#67在nsurlprotocol中的那几个类方法中是可以发送同步请求的但是在实例方法发送同步请求就会卡死所以实例方法中不能有任何的阻塞进行同步操作-不然就卡死&#34;&gt;#&lt;/a&gt; 6.7：在 NSURLProtocol 中的那几个类方法中是可以发送同步请求的，但是在实例方法发送同步请求就会卡死，所以实例方法中不能有任何的阻塞，进行同步操作。不然就卡死。&lt;/h6&gt;
&lt;h5 id=&#34;7总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7总结&#34;&gt;#&lt;/a&gt; 7：总结&lt;/h5&gt;
&lt;p&gt;完成了以上的步骤之后你回发现在 DNS 坏掉的情况下手机里面除了微信 QQ (他们也做了 DNS 解析) 之外其他应用都不能上网了但是你的 App 依然可以正常浏览网络数据。这就是我最近在做的时候遇到的一些问题，有什么问题及时与我交流吧&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2018-01-24-iOS-Runtime%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%B1%BB%E7%9A%84Method-Swizzling/</guid>
            <title>iOS Runtime简单介绍，以及不同类的Method Swizzling</title>
            <link>https://oliverqueen.cn/2018-01-24-iOS-Runtime%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%B1%BB%E7%9A%84Method-Swizzling/</link>
            <category>底层</category>
            <category>runtime</category>
            <pubDate>Wed, 24 Jan 2018 12:18:50 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h5 id=&#34;runtime介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#runtime介绍&#34;&gt;#&lt;/a&gt; Runtime 介绍：&lt;/h5&gt;
&lt;p&gt;runtime 顾名思义就是运行时，其实我们的 App 从你按下 command+R 开始一直到 App 运行起来经历了大致两个阶段，1：编译时，2：运行时。还记得一道很经典的面试题&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kbsn9yxj30kk03et8z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里给大家解释下：首先， * testObject 是告诉编译器，testObject 是一个指向某个 Objective-C 对象的指针。因为不管指向的是什么类型的对象，&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
 一个指针所占的内存空间都是固定的，所以这里声明成任何类型的对象，最终生成的可执行代码都是没有区别的。这里限定了 NSString 只不过是告诉编译器，请把 testObject 当做一个 NSString 来检查，如果后面调用了非 NSString 的方法，会产生警告。接着，你创建了一个 NSData 对象，然后把这个对象所在的内存地址保存在 testObject 里。那么运行时 (从这段代码执行开始，到程序结束)，testObject 指向的内存空间就是一个 NSData 对象。你可以把 testObject 当做一个 NSData 对象来用。 所以编译时是 NSString，运行时是 NSData。&lt;br /&gt;
runtime 是什么：&lt;br /&gt;
在 runtime 中，所有的类在 OC 中都会被定义成一个结构体，像这样&lt;br /&gt;
类在 runtime 中的表示&lt;br /&gt;
 struct objc_class {&lt;br /&gt;
    Class isa;// 指针，顾名思义，表示是一个什么，  // 实例的 isa 指向类对象，类对象的 isa 指向元类&lt;br /&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !__OBJC2__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class super_class;  &lt;span class=&#34;comment&#34;&gt;//指向父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *name;  &lt;span class=&#34;comment&#34;&gt;//类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; version;     &lt;span class=&#34;comment&#34;&gt;//类的版本信息，默认初始化为 0。我们可以在运行期对其进行修改（class_setVersion）或获取（class_getVersion）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; info;   &lt;span class=&#34;comment&#34;&gt;/*供运行期使用的一些位标识。有如下一些位掩码：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                        CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含实例方法和变量；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_INITIALIZED (0x4L) 表示该类已经被运行期初始化了，这个标识位只被 objc_addClass 所设置；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_POSING (0x8L) 表示该类被 pose 成其他的类；（poseclass 在ObjC 2.0中被废弃了）；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_MAPPED (0x10L) 为ObjC运行期所使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_FLUSH_CACHE (0x20L) 为ObjC运行期所使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_GROW_CACHE (0x40L) 为ObjC运行期所使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_NEED_BIND (0x80L) 为ObjC运行期所使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;                      CLS_METHOD_ARRAY (0x100L) 该标志位指示 methodlists 是指向一个 objc_method_list 还是一个包含 objc_method_list 指针的数组；*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; instance_size  &lt;span class=&#34;comment&#34;&gt;//该类的实例变量大小（包括从父类继承下来的实例变量）；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;objc_ivar_list&lt;/span&gt; *ivars &lt;span class=&#34;comment&#34;&gt;//成员变量列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;objc_method_list&lt;/span&gt; **methodLists; &lt;span class=&#34;comment&#34;&gt;//方法列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;objc_cache&lt;/span&gt; *cache;&lt;span class=&#34;comment&#34;&gt;//缓存   一种优化，调用过的方法存入缓存列表，下次调用先找缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;objc_protocol_list&lt;/span&gt; *protocols &lt;span class=&#34;comment&#34;&gt;//协议列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; OBJC2_UNAVAILABLE;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 相关的定义&lt;br /&gt;
 /// 描述类中的一个方法&lt;br /&gt;
 typedef struct objc_method *Method;&lt;/p&gt;
&lt;p&gt;/// 实例变量&lt;br /&gt;
 typedef struct objc_ivar *Ivar;&lt;/p&gt;
&lt;p&gt;/// 类别 Category&lt;br /&gt;
typedef struct objc_category *Category;&lt;/p&gt;
&lt;p&gt;/// 类中声明的属性&lt;br /&gt;
 typedef struct objc_property *objc_property_t;&lt;/p&gt;
&lt;p&gt;ObjC 为每个类的定义生成两个 objc_class ，一个即普通的 class，另一个即 metaclass。我们可以在运行期创建这两个 objc_class 数据结构，然后使用 objc_addClass 动态地创建新的类定义。&lt;/p&gt;
&lt;h5 id=&#34;runtime能干什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#runtime能干什么&#34;&gt;#&lt;/a&gt; runtime 能干什么：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;：1：获取一个类中的列表比如方法列表、属性列表、协议列表、成员变量列表像如下这样 其中获取到的属性、方法都是可以获取 public 和 private 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unsigned &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class clas = &lt;span class=&#34;literal&#34;&gt;[WKW&lt;span class=&#34;identifier&#34;&gt;ebViewController&lt;/span&gt; &lt;span class=&#34;identifier&#34;&gt;class&lt;/span&gt;]&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//是我自己的类，之所以不用系统的类是因为系统的类方法属性太多了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    objc_property_t&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;propertyList = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_copyPropertyList(&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;, &amp;amp;&lt;span class=&#34;params&#34;&gt;count&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *propertyName = property&lt;span class=&#34;constructor&#34;&gt;_getName(&lt;span class=&#34;params&#34;&gt;propertyList&lt;/span&gt;[&lt;span class=&#34;params&#34;&gt;i&lt;/span&gt;])&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;  %@  属性(包括私有) --------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;    %@&amp;quot;&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;,[NSString &lt;span class=&#34;params&#34;&gt;stringWithUTF8String&lt;/span&gt;:&lt;span class=&#34;params&#34;&gt;propertyName&lt;/span&gt;])&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;-------------------------------------------------------------------------------------------------------------- &amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;methodList = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_copyMethodList(&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;, &amp;amp;&lt;span class=&#34;params&#34;&gt;count&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Method methodName = methodList&lt;span class=&#34;literal&#34;&gt;[&lt;span class=&#34;identifier&#34;&gt;i&lt;/span&gt;]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;  %@ 方法(包括私有)  --------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;    %@&amp;quot;&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;,NSStringFromSelector(&lt;span class=&#34;params&#34;&gt;method_getName&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;methodName&lt;/span&gt;)&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;-------------------------------------------------------------------------------------------------------------- &amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Ivar *ivarList = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_copyIvarList(&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;, &amp;amp;&lt;span class=&#34;params&#34;&gt;count&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Ivar myIvar = ivarList&lt;span class=&#34;literal&#34;&gt;[&lt;span class=&#34;identifier&#34;&gt;i&lt;/span&gt;]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *ivarName = ivar&lt;span class=&#34;constructor&#34;&gt;_getName(&lt;span class=&#34;params&#34;&gt;myIvar&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;%@ 成员变量(包括私有) --------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; %@&amp;quot;&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;, [NSString &lt;span class=&#34;params&#34;&gt;stringWithUTF8String&lt;/span&gt;:&lt;span class=&#34;params&#34;&gt;ivarName&lt;/span&gt;])&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;-------------------------------------------------------------------------------------------------------------- &amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//获取协议列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __unsafe_unretained Protocol **protocolList = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_copyProtocolList([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], &amp;amp;&lt;span class=&#34;params&#34;&gt;count&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Protocol *myProtocal = protocolList&lt;span class=&#34;literal&#34;&gt;[&lt;span class=&#34;identifier&#34;&gt;i&lt;/span&gt;]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *protocolName = protocol&lt;span class=&#34;constructor&#34;&gt;_getName(&lt;span class=&#34;params&#34;&gt;myProtocal&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;%@ 协议 --------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; %@&amp;quot;&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;clas&lt;/span&gt;, [NSString &lt;span class=&#34;params&#34;&gt;stringWithUTF8String&lt;/span&gt;:&lt;span class=&#34;params&#34;&gt;protocolName&lt;/span&gt;])&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 输出后的结果是&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kc7w3zcj30pk0ajdks.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;br /&gt;
 其中也包括了私有方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2：拦截方法调用&lt;br /&gt;
有的时候我们用一个类或者一个实例变量去调用一个方法，由于操作失误或者是其他原因，导致这个所被调用的方法并不存在，报出这样的错误，然后闪退！&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kcfrky6j30tr0120sy.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个时候如果我们想避免这些崩溃，我们就需要在运行时对其做一些手脚。iOS 中方法调用的流程：其实调用方法就是发送消息，所有调用方法的代码例如   [obj aaa]  在运行时 runtime 会将这段代码转换为 objc_msgSend (obj, [@selector]);（本质就是发送消息）然后 obj 会通过其中 isa 指针去该类的缓存中 (cache) 查找对应函数的 Method, 如果没有找到，再去该类的方法列表（methodList）中查找，如果没有找到再去该类的父类找，如果找到了，就先将方法添加到缓存中，以便下次查找，然后通过 method 中的指针定位到指定方法执行。如果一直没有找到，便会走完如下四个方法之后崩溃。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    如果调用的是不存在的实例方法则会在奔溃前进入该方法，防止崩溃可以在此处做处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+(&lt;span class=&#34;type&#34;&gt;BOOL&lt;/span&gt;)resolveInstanceMethod:(SEL)sel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; 如果调用的是不存在的类方法则会在奔溃前进入该方法，防止崩溃可以在此处做处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+(&lt;span class=&#34;type&#34;&gt;BOOL&lt;/span&gt;)resolveClassMethod:(SEL)sel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; 这个方法会把你所调用的不存在的方法重定向到一个声明了该方法的类中，只需要你返回一个有该方法的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; 类就可以，如果你重定向的这个类仍然不具有该方法那么会继续崩溃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-(&lt;span class=&#34;type&#34;&gt;id&lt;/span&gt;)forwardingTargetForSelector:(SEL)aSelector &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; 将你不存在的方法打包成NSInvocation对象，做完你自己的处理之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; 调用invokeWithTarget让某个target来处理该方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)forwardInvocation:(&lt;span class=&#34;built_in&#34;&gt;NSInvocation&lt;/span&gt; *)anInvocation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [anInvocation invokeWithTarget:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3：动态添加方法&lt;br /&gt;
因为我们调用了一个不存在的方法导致崩溃，那么我们在判断出不存在后就动态添加上一个方法吧 这样不就不会蹦了吗？我们先写一个方法用来给我们做出提示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight erlang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;params&#34;&gt;(void)&lt;/span&gt; errorMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NSLog&lt;span class=&#34;params&#34;&gt;(@&lt;span class=&#34;string&#34;&gt;&amp;quot;no method!!!!!!!&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 如果调用了没有的方法，那么就把这个方法添加进去，然后把被调用的方法的指针指向这个 error1：，那么一旦调用了没有的方法就会走这个。我们来看代码&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+(BOOL)resolveInstanceMethod:(SEL)sel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method errorMethod =  &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], @&lt;span class=&#34;params&#34;&gt;selector&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;errorMethod&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;[NSS&lt;span class=&#34;identifier&#34;&gt;tringFromSelector&lt;/span&gt;(&lt;span class=&#34;identifier&#34;&gt;sel&lt;/span&gt;) &lt;span class=&#34;identifier&#34;&gt;isEqualToString&lt;/span&gt;:@&amp;quot;&lt;span class=&#34;identifier&#34;&gt;testMethod&lt;/span&gt;&amp;quot;]&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BOOL isAdd =  &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], &lt;span class=&#34;params&#34;&gt;sel&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getImplementation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;errorMethod&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getTypeEncoding(&lt;span class=&#34;params&#34;&gt;errorMethod&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;constructor&#34;&gt;NSLog(@&lt;span class=&#34;string&#34;&gt;&amp;quot;tinajia  = %d&amp;quot;&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;isAdd&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//Do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要用到&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;    添加方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     @param class] 在哪个类里添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     @param sel 添加的方法的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     @param errorMethod 添加的方法的实现IMP指&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     @param types 方法的标示符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     @return 是否添加成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BOOL isAdd =  &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], &lt;span class=&#34;params&#34;&gt;sel&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getImplementation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;errorMethod&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getTypeEncoding(&lt;span class=&#34;params&#34;&gt;errorMethod&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后运行下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;WKWebViewController&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; vc&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;WKWebViewController&lt;/span&gt; alloc] &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[vc performSelector:&lt;span class=&#34;meta&#34;&gt;@selector&lt;/span&gt;(testMethod)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我调用了并不存在的 testMethod 方法并没有崩溃并且方法已经成功添加了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kexyuzgj30f801mwel.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;4：动态交换方法（也叫 iOS 黑魔法，慎用）&lt;br /&gt;
没什么好例子，用一个网上说的例子 (引用别人的东西，懒得复制了，就截了图)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kg3i5z6j30hv0fj0z9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其实本质即使 SEL 和 IMP 的交换，原理是这样的：在 iOS 中每一个类中都有一个叫 dispatch table 的东西，里面存放在 SEL 和他所对应的 IMP 指针，之前也说过方法调用就是通过 sel 找 IMP 指针然后指针定位调用方法。方法交换就是对这个 dispatch table 进行操作。让 A 的 SEL 去对应 B 的 IMP，B 的 SEL 对应 A 的 IMP，如图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kgrq52oj30f80betcz.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样就达到方法交换的目的，下面看代码：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+ (void)changeMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  如果是类方法 要使用 !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  如果是系统的集合类的属性要用元类 比如 __NSSetM = NSMutableSet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  Class  class = NSClassFromString(@&amp;quot;__NSSetM&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  Class metaClass = objc_getMetaClass([NSStringFromClass(class) UTF8String]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class systemClass = &lt;span class=&#34;constructor&#34;&gt;NSClassFromString(&lt;span class=&#34;params&#34;&gt;__NSSetM&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEL sel_System = &lt;span class=&#34;constructor&#34;&gt;NSSelectorFromString(&lt;span class=&#34;params&#34;&gt;addObject&lt;/span&gt;:)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEL sel_Custom = @selector(swizzle_addObject:);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method method_System = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_System&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method method_Custom = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], &lt;span class=&#34;params&#34;&gt;sel_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IMP imp_System = &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getImplementation(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IMP imp_Custom = &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getImplementation(&lt;span class=&#34;params&#34;&gt;method_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_exchangeImplementations(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (void)swizzle_addObject:(id) obj &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;literal&#34;&gt;[&lt;span class=&#34;identifier&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;identifier&#34;&gt;swizzle_addObject&lt;/span&gt;:&lt;span class=&#34;identifier&#34;&gt;obj&lt;/span&gt;]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要代码  method_exchangeImplementations (method1, method2); 这两个参数很简单，就是两个需要交换的方法。&lt;br /&gt;
最后我调用了 m1 但是实际上走了 m2。&lt;/p&gt;
&lt;h5 id=&#34;动态交换方法的原理以及交换过程中指针的变化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态交换方法的原理以及交换过程中指针的变化&#34;&gt;#&lt;/a&gt; 动态交换方法的原理以及交换过程中指针的变化&lt;/h5&gt;
&lt;p&gt;在通常的方法交换中我们通常有两种情景，一种是我会针对被交换的类建一个 category，然后 hook 的方法会写在 category 中。另一种是自己创建一个 Tool 类里面放些常用的工具方法其中包含了方法交换。可能大家普遍选择第一种方法，但是如果你需要 hook 的类非常多的 (我实际项目中就遇到这样的问题) 那你就需要针对不同的类创建 category，就会导致文件过多，且每一个文件中只有一个 hook 方法，这样一来左侧一堆文件，所以我用了第二种方法，但是在使用过程中出现一个问题，先看下我的代码结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6khw8c97j30740ag74v.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我要 hook 的是 ViewController 中的 viewDidLoad 方法，我建立了两个类一个是 ViewController 的 category，另一个是 Tool 类，为了一会区别演示不同类 hook 的不同 (两个类中 hook 的代码完全一样)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewController 中将要被替换的系统方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kir8y63j309a02rglq.jpg&#34; alt=&#34;被替换的方法(系统方法)&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category 中将要用来替换的自定义方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kj5dcykj308z02lwep.jpg&#34; alt=&#34;用来替换的方法(自定义方法)&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后在 ViewController 中的 load 中做方法替换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kjlzvdqj30f90b43zw.jpg&#34; alt=&#34;进行方法替换&#34; /&gt;&lt;/p&gt;
&lt;p&gt;运行一下的输出结果想必大家已经猜到了先执行 custom 再执行 system，这是通常情况下大家的做法。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kjxsheej30d701h3yl.jpg&#34; alt=&#34;结果&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面再来看下如果我将替换方法写在不同类中会怎样，调用 Tool 中的交换方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kka2s8uj30dx0anwfp.jpg&#34; alt=&#34;执行Tool中的交换方法&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后直接看结果了，因为代码都是一模一样的我直接复制过去的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kliitupj30yd08w422.jpg&#34; alt=&#34;结果&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发生了 crash，原因是 ViewController 中没有 swizzel_viewDidLoad_custom 这个方法，为什么不同类的交换会出现这种问题，我们用个图来说明下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6km0wogkj30yg0pz43q.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解决的办法是我们在交换方法之前要先像其中添加方法，也就是说把 customMethod 添加到 SystemClass 中，但是注意要把 customMethod 的实现指向 syetemMethod 的实现。这样一来就可以达到 SystemClass 调用 customMethod 却执行 systemMethod 的代码的效果，实现以上要求我们需要在交换之前执行这个方法。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中第一个参数是需要往哪个类添加；第二个参数是要添加的方法的方法名；第三个参数是所添加的方法的方法实现，第四个是方法的标识符。经过就该之后我们的代码是这样&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;之前的都一样就省略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_replaceMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_exchangeImplementations(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们来看下执行完 add 操作之后此时的方法和类的对应关系 (红色的为 add 的修改)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kmhkzidj30yg0g378f.jpg&#34; alt=&#34;关系&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为 SystemClass 中本身不包含 customMethod 所以 add 一定是成功的，也就是说会进入判断执行 replace 方法。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_replaceMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个参数：需要修改的方法的所在的类；第二个参数：需要替换其实现的方法名；第三个参数：需要把哪个实现替换给他；第四个参数：方法标识符。此时看下我们做完 replace 之后的类与方法名以及他们实现的关系 (红色的为 replace 的修改)。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6kn9m5btj30yg0ifgqa.jpg&#34; alt=&#34;关系&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时大家已经看出来了，虽然没有执行 exchange 方法，但是我已经达到了方法交换的目的。系统执行 systemMethod 时候会走 customMethod 的实现但是因为在 customMethod 方法中我会递归执行 [self customMethod]，所以又会走到 systemMethod 的实现，因为之前进行了方法添加，所以此时 A 类中有了 customMethod 方法，不会再发生之前的 crash。达到一个不同类进行 Method Swizzling 的目的。&lt;/p&gt;
&lt;h5 id=&#34;综上来看一个完整严谨的methodswizzling应该在交换前先add并且add方法的参数不能错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综上来看一个完整严谨的methodswizzling应该在交换前先add并且add方法的参数不能错&#34;&gt;#&lt;/a&gt; 综上来看一个完整严谨的 MethodSwizzling 应该在交换前先 add，并且 add 方法的参数不能错&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+ (void)changeMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class systemClass = &lt;span class=&#34;constructor&#34;&gt;NSClassFromString(@&lt;span class=&#34;string&#34;&gt;&amp;quot;你的类&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEL sel_System = @selector(系统方法);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEL sel_Custom = @selector(你自己的方法);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method method_System = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_System&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method method_Custom = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod([&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;], &lt;span class=&#34;params&#34;&gt;sel_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IMP imp_System = &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getImplementation(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IMP imp_Custom = &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getImplementation(&lt;span class=&#34;params&#34;&gt;method_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_replaceMethod(&lt;span class=&#34;params&#34;&gt;systemClass&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;sel_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imp_Custom&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getTypeEncoding&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_exchangeImplementations(&lt;span class=&#34;params&#34;&gt;method_System&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_Custom&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;以上代码无论是写在工具类中还是category中都是没有问题的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以上代码无论是写在工具类中还是category中都是没有问题的&#34;&gt;#&lt;/a&gt; 以上代码无论是写在工具类中还是 category 中都是没有问题的。&lt;/h5&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2018-01-24-%E8%AE%B0%E4%B8%80%E6%AC%A1Runtime-Hook%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
            <title>记一次Runtime Hook的问题</title>
            <link>https://oliverqueen.cn/2018-01-24-%E8%AE%B0%E4%B8%80%E6%AC%A1Runtime-Hook%E7%9A%84%E9%97%AE%E9%A2%98/</link>
            <category>底层</category>
            <category>runtime</category>
            <category>Hook</category>
            <pubDate>Wed, 24 Jan 2018 11:35:57 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h4&gt;
&lt;p&gt;项目中遇到一个问题，需要引入两个 SDK，我们暂且命名为 A 和 B，由于业务需要这两个 SDK 都需要对一个系统函数 C 进行 hook, 但是有一个前提，由于 B 所做的是一个统计相关的 SDK，所以 B 要监控 App 内的所有代码这其中也包括了 SDK A 所做的一些操作，所以我们必须确保 B 在 hook C 函数时候  A 已经对 C 函数 hook 完毕，其实这就涉及到 hook 顺序的问题。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;研究&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#研究&#34;&gt;#&lt;/a&gt; 研究&lt;/h4&gt;
&lt;p&gt;先看下代码，我用 hookMethod 来模仿系统方法。&lt;br /&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;) TEST_HOOK_TWICE &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; changeOrginalSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;hookedMethod&amp;quot;&lt;/span&gt; inClass:&lt;span class=&#34;string&#34;&gt;@&amp;quot;RootViewController&amp;quot;&lt;/span&gt; withCustomSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;swizzle_hookedMethod1&amp;quot;&lt;/span&gt; isClassMethod:&lt;span class=&#34;literal&#34;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; changeOrginalSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;hookedMethod&amp;quot;&lt;/span&gt; inClass:&lt;span class=&#34;string&#34;&gt;@&amp;quot;RootViewController&amp;quot;&lt;/span&gt; withCustomSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;swizzle_hookedMethod2&amp;quot;&lt;/span&gt; isClassMethod:&lt;span class=&#34;literal&#34;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; hookedMethod];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)hookedMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;原始方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)swizzle_hookedMethod1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; swizzle_hookedMethod1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)swizzle_hookedMethod2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; swizzle_hookedMethod2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 然后看下没有 hook 之前的样子&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6ll1zt21j30j80jk3zc.jpg&#34; alt=&#34;原本的样子&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我们执行代码&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第一步：交换A中的方法和系统方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; changeOrginalSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;hookedMethod&amp;quot;&lt;/span&gt; inClass:&lt;span class=&#34;string&#34;&gt;@&amp;quot;RootViewController&amp;quot;&lt;/span&gt; withCustomSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;swizzle_hookedMethod1&amp;quot;&lt;/span&gt; isClassMethod:&lt;span class=&#34;literal&#34;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第二步：交换B中的方法和系统方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; changeOrginalSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;hookedMethod&amp;quot;&lt;/span&gt; inClass:&lt;span class=&#34;string&#34;&gt;@&amp;quot;RootViewController&amp;quot;&lt;/span&gt; withCustomSelectorName:&lt;span class=&#34;string&#34;&gt;@&amp;quot;swizzle_hookedMethod2&amp;quot;&lt;/span&gt; isClassMethod:&lt;span class=&#34;literal&#34;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第三步：调用系统方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; hookedMethod];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 然后我们一步一步来看，先看调用第一步之后是什么样子的 (红色箭头为第一步之后的样子)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6llhzf0uj30ki0k2q3z.jpg&#34; alt=&#34;第一步之后&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后看第二步调用完之后的样子 (绿色是第二步调用)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lm7mfshj30jo0iu75m.jpg&#34; alt=&#34;第二部之后的样子&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来我们调用系统方法也就是第三步，然后我们看下流程是怎样的 (每个方法实现里面都会递归调用下自身，为了是 hook 时候不改变原有逻辑)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lmi43vmj30yg03v756.jpg&#34; alt=&#34;调用顺序&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样一来就很明显 如果想想监控住所有的代码那就需要在 A IMP 这步，因为之前的 Hook 顺序是先 A -&amp;gt; B -&amp;gt; System 这样一来只要我们改一下顺序改为 B -&amp;gt; A -&amp;gt; System 就可以让 B SDK 监控到所有的代码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6ln0wmlyj30yg07ign0.jpg&#34; alt=&#34;调用顺序&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2018-01-23-iOS%E4%B8%AD%E4%BD%BF%E7%94%A8OpenGL%E5%AE%9E%E7%8E%B0%E5%A2%9E%E9%AB%98%E5%8A%9F%E8%83%BD/</guid>
            <title>iOS中使用OpenGL实现增高功能</title>
            <link>https://oliverqueen.cn/2018-01-23-iOS%E4%B8%AD%E4%BD%BF%E7%94%A8OpenGL%E5%AE%9E%E7%8E%B0%E5%A2%9E%E9%AB%98%E5%8A%9F%E8%83%BD/</link>
            <category>底层</category>
            <category>OpenGL</category>
            <category>UI</category>
            <pubDate>Tue, 23 Jan 2018 21:23:49 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;功能效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能效果&#34;&gt;#&lt;/a&gt; 功能效果&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lpd4q64g308u0fqnpe.gif&#34; alt=&#34;demo示例&#34; /&gt;&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;功能分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能分析&#34;&gt;#&lt;/a&gt; 功能分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：渲染一张传入的图片 -&amp;gt; 手动选择编辑区域 -&amp;gt; 通过滑块来编辑区域的增高或者缩短&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenGL 原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为 OpenGL 只能绘制三角形，所以在处理图像或者图形的时候我们需要将被处理的对象用三角行来分割转换为三角形和顶点的组成的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenGL 里面坐标是以左下角为原点 X 轴向上为正，Y 轴向右为正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能实现&#34;&gt;#&lt;/a&gt; 功能实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;渲染图片拆分图片：
&lt;ul&gt;
&lt;li&gt;拆分方法 1：通过图形看出是一个矩形，而矩形是可以分成两个三角形和四个顶点，通过此可以用 GL 渲染出图片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lpjw6g3j30dw0ee7ft.jpg&#34; alt=&#34;拆分三角形&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样拆分之后虽然可以正常渲染，但是带来的问题是我的四个顶点都是死的，也就是四个顶点必须是画布的四个顶点，改变顶点的坐标后只能导致整张画布的变动，而不是某一个区域的变动，拉伸的话也是整张图片的拉伸，所以想要实现局部处理的话这种分割方式不可行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分方法 2：将整张图片先拆分为三个矩形，然后再把每个矩形拆分成两个三角形，得到 6 个三角形，8 个顶点，如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6lprpvrrj30dw0eddrh.jpg&#34; alt=&#34;拆分2&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样一来就可以保证中间的矩形的高度可以任意变化而上下两部分的高度不变只改变位置，也就是说我们这个 DEMO 中所做的任何拉伸操作都是对中间矩形的操作，换而言之就是改变最上面的矩形和最下面的矩形之间的距离来达到对中间区域的拉伸和压缩的目的。根据拆分的方式我们用顶点的坐标创建一个数组&lt;br /&gt;
 &lt;figure class=&#34;highlight jboss-cli&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;顶点数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GLfloat vertices[] = &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -1.2, -1.2,     &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;左下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1.2, -1.2,      &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;右下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -1.2, -0.4,     &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形左下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1.2, -0.4,      &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形右下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -1.2,  0.4,     &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形左上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1.2,  0.4,      &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形右上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -1.2,  1.2,     &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;左上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1.2,  1.2,      &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;右上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;填充纹理的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GLfloat texCoords[] = &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0, 0,        &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;左下                  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1, 0,        &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;右下                  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0, 1.0/3.0,  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形左下             &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1, 1.0/3.0,  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形右下             &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0, 2.0/3.0,  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形左上角           &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为8 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1, 2.0/3.0,  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;小矩形右上角           &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为10 11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0, 1,        &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;左上                  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为12 13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1, 1,        &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;右上                  &lt;span class=&#34;string&#34;&gt;//&lt;/span&gt;下标为14 15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动选择区域：通过添加带有自定义手势的 UIView 来实现拖动修改选择区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;*****************CustomPanView代码******************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#import &lt;span class=&#34;string&#34;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@protocol&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CustomPanViewDelegate&lt;/span&gt; &amp;lt;&lt;span class=&#34;title&#34;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  开始拖拽&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  @param customPanView 自身&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  @param centerY       自身所在的y坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)beginDragWithCoustomPanView:(&lt;span class=&#34;built_in&#34;&gt;UIView&lt;/span&gt; *)customPanView centerY:(&lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt;)centerY;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CustomPanView&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;UIView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@property&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;nonatomic&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;assign&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;id&lt;/span&gt;&amp;lt;CustomPanViewDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;*****************CustomPanViewDelegate代码******************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark 拖拽View的代理方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)beginDragWithCoustomPanView:(&lt;span class=&#34;built_in&#34;&gt;UIView&lt;/span&gt; *)customPanView centerY:(&lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt;)centerY &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 限制范围：裁剪区不能大于图片区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (customPanView.center.y &amp;gt;= imageBottom) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        customPanView.center = &lt;span class=&#34;built_in&#34;&gt;CGPointMake&lt;/span&gt;(customPanView.center.x, imageBottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (customPanView.center.y &amp;lt;= imageTop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        customPanView.center = &lt;span class=&#34;built_in&#34;&gt;CGPointMake&lt;/span&gt;(customPanView.center.x, imageTop);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    获取两条线的坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt; topY = _topView.center.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt; bottomY = _bottomView.center.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    根据两条线的坐标刷新裁剪区域UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [_cutLabel setFrame:&lt;span class=&#34;built_in&#34;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, topY &amp;lt; bottomY ? topY : bottomY, SCREEN_WIDTH, fabs(bottomY - topY))];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    算出裁剪起始坐标和结束坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt; fromPoint = topY &amp;lt; bottomY ? (imageBottom - bottomY) / imageHeight : (imageBottom - topY) / imageHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CGFloat&lt;/span&gt; toPoint = topY &amp;lt; bottomY ? (imageBottom - topY) / imageHeight : (imageBottom - bottomY) / imageHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;//将中间的矩形的顶点坐标和坐标联系裁剪区域联系起来。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; sendFromePoint:fromPoint endPoint:toPoint];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_cutLabel.frame.size.height &amp;lt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;) &amp;#123;  &lt;span class=&#34;comment&#34;&gt;//隐藏文字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _cutLabel.text = &lt;span class=&#34;string&#34;&gt;@&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _cutLabel.text = &lt;span class=&#34;string&#34;&gt;@&amp;quot;编辑区域&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.slider setValue:&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt; animated:&lt;span class=&#34;literal&#34;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tmpHeight = &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 使用一个 Delegate 将拖移后的 Y 坐标返回，因为是竖直运动的所以我们只关心 Y 轴坐标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改变大小：通过将 UISliderBar 的 ValueChange 和顶点坐标关联来实现改变顶点坐标，之后调用 GLKView 的 display 的方法来刷新 UI，将变化的过程展现出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- (void)action:(UISlider *)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;判断是否是向右滑动&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    isRightDirection = sender.value &amp;gt;= judgeDirection ? YES : NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;所改变的高度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    changeHeight = sender.value - tmpHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;遍历数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (int i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;; i ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;将Y坐标筛选出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;下半部分矩形&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;lt;= &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;下半部分矩形Y轴做减法减去变化的高度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[i] = verticesCopy[i] - changeHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;上半部分矩形&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;gt;= &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;上半部分矩形Y轴做加法加上变化的高度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[i] = verticesCopy[i] + changeHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;缩小时候如果编辑区域已经成为一条线了就不能在缩小了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (vertices[&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;] &amp;gt; vertices[&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [self.glView display];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 glReadPixels 来从内存中读取像素数据，GLubyte -&amp;gt; CGImageRef -&amp;gt; UIimage 然后最相关的保存或者其他操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#pragma mark -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#pragma mark 获取处理后的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (UIImage *) createImage &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; imageY = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; imgHeight = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isRightDirection) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 判断slider滑动方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        imageY = fabs(imageTop - fabs(changeHeight&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;perOpengleseCoordinate))&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;screenScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        imgHeight = fabs(imageHeight + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;fabs(changeHeight&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;perOpengleseCoordinate))&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;screenScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        imageY = fabs(imageTop + fabs(changeHeight&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;perOpengleseCoordinate))&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;screenScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        imgHeight = fabs(imageHeight - &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;fabs(changeHeight&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;perOpengleseCoordinate))&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;screenScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; imageWidth = SCREEN_WIDTH&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;screenScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; dataLength = imageWidth&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;imgHeight&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GLubyte *data = (GLubyte*)malloc(dataLength&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;sizeof(GLubyte));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gl&lt;span class=&#34;constructor&#34;&gt;PixelStorei(GL_PACK_ALIGNMENT, 4)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gl&lt;span class=&#34;constructor&#34;&gt;ReadPixels(0, &lt;span class=&#34;params&#34;&gt;imageY&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imageWidth&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imgHeight&lt;/span&gt;, GL_RGBA, GL_UNSIGNED_BYTE, &lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;)&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//从内存中读取像素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CGDataProviderRef &lt;span class=&#34;built_in&#34;&gt;ref&lt;/span&gt; = &lt;span class=&#34;constructor&#34;&gt;CGDataProviderCreateWithData(NULL, &lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;dataLength&lt;/span&gt;, NULL)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CGColorSpaceRef colorspace = &lt;span class=&#34;constructor&#34;&gt;CGColorSpaceCreateDeviceRGB()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CGImageRef iref = &lt;span class=&#34;constructor&#34;&gt;CGImageCreate(&lt;span class=&#34;params&#34;&gt;imageWidth&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imgHeight&lt;/span&gt;, 8, 32, &lt;span class=&#34;params&#34;&gt;imageWidth&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; 4, &lt;span class=&#34;params&#34;&gt;colorspace&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;kCGBitmapByteOrder32Big&lt;/span&gt; | &lt;span class=&#34;params&#34;&gt;kCGImageAlphaPremultipliedLast&lt;/span&gt;,&lt;span class=&#34;params&#34;&gt;ref&lt;/span&gt;, NULL, &lt;span class=&#34;params&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;kCGRenderingIntentDefault&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;UIGraphicsBeginImageContext(CGSizeMake(&lt;span class=&#34;params&#34;&gt;imageWidth&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imgHeight&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CGContextRef cgcontext = &lt;span class=&#34;constructor&#34;&gt;UIGraphicsGetCurrentContext()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;CGContextSetBlendMode(&lt;span class=&#34;params&#34;&gt;cgcontext&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;kCGBlendModeCopy&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;CGContextDrawImage(&lt;span class=&#34;params&#34;&gt;cgcontext&lt;/span&gt;, CGRectMake(0, 0, &lt;span class=&#34;params&#34;&gt;imageWidth&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;imgHeight&lt;/span&gt;)&lt;/span&gt;, iref);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CGImageRef imageMasked = &lt;span class=&#34;constructor&#34;&gt;CGBitmapContextCreateImage(&lt;span class=&#34;params&#34;&gt;cgcontext&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UIImage&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;image = &lt;span class=&#34;literal&#34;&gt;[UII&lt;span class=&#34;identifier&#34;&gt;mage&lt;/span&gt; &lt;span class=&#34;identifier&#34;&gt;imageWithCGImage&lt;/span&gt;:&lt;span class=&#34;identifier&#34;&gt;imageMasked&lt;/span&gt; &lt;span class=&#34;identifier&#34;&gt;scale&lt;/span&gt;:&lt;span class=&#34;identifier&#34;&gt;screenScale&lt;/span&gt; &lt;span class=&#34;identifier&#34;&gt;orientation&lt;/span&gt;:UII&lt;span class=&#34;identifier&#34;&gt;mageOrientationUp&lt;/span&gt;]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;UIGraphicsEndImageContext()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    free(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;CFRelease(&lt;span class=&#34;params&#34;&gt;ref&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;CFRelease(&lt;span class=&#34;params&#34;&gt;colorspace&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;constructor&#34;&gt;CGImageRelease(&lt;span class=&#34;params&#34;&gt;iref&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return image;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2018-01-23-CFNetwork%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
            <title>CFNetwork的介绍和使用</title>
            <link>https://oliverqueen.cn/2018-01-23-CFNetwork%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
            <category>网络</category>
            <category>底层</category>
            <pubDate>Tue, 23 Jan 2018 21:04:15 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;cfnetwork背景简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfnetwork背景简介&#34;&gt;#&lt;/a&gt; CFNetwork 背景简介&lt;/h3&gt;
&lt;p&gt;CFNetwork 是 ISO 中一个比较底层的网络框架，C 语言编写，可以控制一些更底层的东西，如各种常用网络协议、socket 通讯等，我们通常使用的 NSURL 则更倾向于 API 数据请求等，虽然框架也提供了一些操作，但是远不如 CFNetwork 丰富。CFNetwork 已经接近于 UNIX 系统的 socket 通信了，使用 CFHttpMessageRef 进行 HTTP 连接的好处就是控制的粒度更细了，例如你可以设置 SSL 连接的 PeerName，证书验证的方式，还可以控制每个响应包的接收。不过 CFNetwork 本质上还是应用层上的封装的通用 API。使用者可以不用关心底层协议的实际细节。下图是 CFNetwork 在 iOS 系统中的位置 (图片来源于官方文档)。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6mit8tsij30bn06lwen.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图可以看出目前 iOS 的网络编程分四层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebKit：属于 Cocoa 层，苹果很多地方用到的页面渲染引擎 WKWebview；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NSURL：也属于 Cocoa 层，对各类 URL 请求的封装 (NSURLRequest)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CFNetwork：属于 Core Foundation 层，基于 C 的封装，同样的还有 CFNetServices (write/readstream)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BSD sockets：属于 OS 层，也是基于 C 的封装；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cfnetwork结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfnetwork结构&#34;&gt;#&lt;/a&gt; CFNetwork 结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tvax3.sinaimg.cn/large/006tNc79gy1fo6mlt3gwcj30od0a474w.jpg&#34; alt=&#34;image.png&#34; /&gt;&lt;br /&gt;
 上图也是官方文档的图片，描述了 CFNetwork 的结构，下面逐一讲解。&lt;/p&gt;
&lt;h5 id=&#34;cfsocket-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfsocket-api&#34;&gt;#&lt;/a&gt; CFSocket API&lt;/h5&gt;
&lt;p&gt;Socket 是网络通讯的底层基础，两个 socket 端口可以互发数据。我们通常使用的是 BSD socket，CFSocket 则是 BSD socket 的抽象，基本上实现了几乎所有 BSD socket 的功能，并且还融入了 run loop。&lt;/p&gt;
&lt;h5 id=&#34;cfstream-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfstream-api&#34;&gt;#&lt;/a&gt; CFStream API&lt;/h5&gt;
&lt;p&gt;CFStream API 提供了数据读写的方法，即读写流，使用它可以为内存、文件、网络（使用 socket）的数据建立 stream，我们进行网络请求就是对数据的读写，CFStream 提供 API 对两种 CFType 对象提供抽象：CFReadStream and CFWriteStream。它同时也是 CFHTTP 和 CFFTP 的基础。stream 有一个很重要的特性就是一旦数据流被提供或者被消耗，就不能从流中重新取出。比如这样&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uint8_t d[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//循环条件：流中是否有可用数据(被读过的数据不可用了)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ([&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inputStream hasBytesAvailable]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//读取相应长度的数据数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSInteger&lt;/span&gt; len = [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inputStream read:d maxLength:&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//如果读取到数据，便将数据快拼接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inputStream.streamError) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [data appendBytes:(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *)d length:len];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;cfftp-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfftp-api&#34;&gt;#&lt;/a&gt; CFFTP API&lt;/h5&gt;
&lt;p&gt;对用 FTP 协议通信的封装，能下载、上传文件和目录到 FTP 服务器。CFFTP 建立的连接可以是同步或者异步，此次不做详解。&lt;/p&gt;
&lt;h5 id=&#34;cfhttp-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfhttp-api&#34;&gt;#&lt;/a&gt; CFHTTP API&lt;/h5&gt;
&lt;p&gt;是 HTTP 协议的抽象，主要对象是 CFHTTPMessageRef (类似于我们通常的 NSURLRequest) 我们需要像构建 NSURLRequest 那样来构建 CFHTTPMessageRef，同样包含一下几个元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;必须元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求方法 (类型为 CFStringRef)：POST、GET、DELETE 等..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求的 URL 地址 (类型为 CFURLRef)：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmFpZHUuY29t&#34;&gt;https://www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求的 HTTP 版本 (类型为 CFStringRef)：通常使用 kCFHTTPVersion1_1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kCFAllocatorDefault：用于创建消息引用的指定默认的系统内存分配器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;body 体 (类型为 CFDataRef)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageSetBody&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageRef&lt;/span&gt; message, &lt;span class=&#34;built_in&#34;&gt;CFDataRef&lt;/span&gt; bodyData) &lt;span class=&#34;built_in&#34;&gt;CF_AVAILABLE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_1, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息头部，如 User-Agent 等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageSetHeaderFieldValue&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageRef&lt;/span&gt; message, &lt;span class=&#34;built_in&#34;&gt;CFStringRef&lt;/span&gt; headerField, &lt;span class=&#34;built_in&#34;&gt;CFStringRef&lt;/span&gt; __&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt; value) &lt;span class=&#34;built_in&#34;&gt;CF_AVAILABLE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_1, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;cfnetwork请求过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cfnetwork请求过程&#34;&gt;#&lt;/a&gt; CFNetwork 请求过程&lt;/h3&gt;
&lt;h5 id=&#34;1构造并创建cfhttpmessageref对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1构造并创建cfhttpmessageref对象&#34;&gt;#&lt;/a&gt; 1：构造并创建 CFHTTPMessageRef 对象&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//构造的方式上一步已讲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageCreateRequest&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;CFAllocatorRef&lt;/span&gt; __&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt; alloc, &lt;span class=&#34;built_in&#34;&gt;CFStringRef&lt;/span&gt; requestMethod, &lt;span class=&#34;built_in&#34;&gt;CFURLRef&lt;/span&gt; url, &lt;span class=&#34;built_in&#34;&gt;CFStringRef&lt;/span&gt; httpVersion) &lt;span class=&#34;built_in&#34;&gt;CF_AVAILABLE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_1, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;2使用cfhttpmessageref对象创建输入流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2使用cfhttpmessageref对象创建输入流&#34;&gt;#&lt;/a&gt; 2：使用 CFHTTPMessageRef 对象创建输入流&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第一个参数传默认&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;CFReadStreamCreateForHTTPRequest&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;CFAllocatorRef&lt;/span&gt; __&lt;span class=&#34;keyword&#34;&gt;nullable&lt;/span&gt; alloc, &lt;span class=&#34;built_in&#34;&gt;CFHTTPMessageRef&lt;/span&gt; request) &lt;span class=&#34;built_in&#34;&gt;CF_DEPRECATED&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_2, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;_11, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;_0, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;_0, &lt;span class=&#34;string&#34;&gt;&amp;quot;Use NSURLSession API for http requests&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;3适配sni环境一个-ip-地址上可以为不同域名分配使用不同的-ssl-证书这同时意味着共享-ip-的虚拟主机也可实现-ssltls-连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3适配sni环境一个-ip-地址上可以为不同域名分配使用不同的-ssl-证书这同时意味着共享-ip-的虚拟主机也可实现-ssltls-连接&#34;&gt;#&lt;/a&gt; 3：适配 SNI 环境（一个 IP 地址上可以为不同域名分配使用不同的 SSL 证书；这同时意味着，共享 IP 的虚拟主机也可实现 SSL/TLS 连接。）&lt;/h5&gt;
&lt;p&gt;因为配置 sni 环境的所有配置都是基于输入流来操作，所以我们构建完成输入流之后来处理 sni，像这样&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inputStream setProperty:&lt;span class=&#34;built_in&#34;&gt;NSStreamSocketSecurityLevelNegotiatedSSL&lt;/span&gt; forKey:&lt;span class=&#34;built_in&#34;&gt;NSStreamSocketSecurityLevelKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//请求的URL的Host&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSDictionary&lt;/span&gt; *sslProperties = @&amp;#123; (__bridge &lt;span class=&#34;type&#34;&gt;id&lt;/span&gt;) kCFStreamSSLPeerName : host &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inputStream setProperty:sslProperties forKey:(__bridge_transfer &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *) kCFStreamPropertySSLSettings];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;4打开输入流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4打开输入流&#34;&gt;#&lt;/a&gt; 4：打开输入流&lt;/h5&gt;
&lt;p&gt;打开输入流分为两步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置代理：[self.inputStream setDelegate:weakSelf]&lt;/li&gt;
&lt;li&gt;加入当前的 runloop：&lt;br /&gt;
&lt;figure class=&#34;highlight crystal&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[_inputStream &lt;span class=&#34;symbol&#34;&gt;removeFromRunLoop:&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.runloop &lt;span class=&#34;symbol&#34;&gt;forMode:&lt;/span&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; runloopMode]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;调用 Open 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5收到代理数据回调&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5收到代理数据回调&#34;&gt;#&lt;/a&gt; 5：收到代理数据回调&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight erlang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;params&#34;&gt;(void)&lt;/span&gt;stream:&lt;span class=&#34;params&#34;&gt;(NSStream *)&lt;/span&gt;aStream handleEvent:&lt;span class=&#34;params&#34;&gt;(NSStreamEvent)&lt;/span&gt;eventCode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中分为几个状态&lt;br /&gt;
 &lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;typedef &lt;span class=&#34;type&#34;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;NSStreamEvent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventNone&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventOpenCompleted&lt;/span&gt; = 1UL &amp;lt;&amp;lt; 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventHasBytesAvailable&lt;/span&gt; = 1UL &amp;lt;&amp;lt; 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventHasSpaceAvailable&lt;/span&gt; = 1UL &amp;lt;&amp;lt; 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventErrorOccurred&lt;/span&gt; = 1UL &amp;lt;&amp;lt; 3,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NSStreamEventEndEncountered&lt;/span&gt; = 1UL &amp;lt;&amp;lt; 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 通常我们会关心 NSStreamEventOpenCompleted、NSStreamEventHasBytesAvailable、NSStreamEventErrorOccurred、&lt;br /&gt;
由于数据是以流的形式回来，我们需要在在 NSStreamEventHasBytesAvailable 下取出数据然后做数据拼接，拼接好完整的数据才可使用，像这样&lt;br /&gt;
 &lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;NSStreamEventHasBytesAvailable&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;UInt8&lt;/span&gt; buffer[BUFFER_SIZE]; &lt;span class=&#34;comment&#34;&gt;//设置缓存区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSInteger&lt;/span&gt; numBytesRead = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSInputStream&lt;/span&gt; *inputstream = (&lt;span class=&#34;built_in&#34;&gt;NSInputStream&lt;/span&gt; *) aStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Read data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        numBytesRead = [inputstream read:buffer maxLength:&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (numBytesRead &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.resultData appendBytes:buffer length:numBytesRead];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (numBytesRead &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 循环结束后我们的 resultData 就是完整的返回数据了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
