<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Molier • Posts by &#34;ios&#34; tag</title>
        <link>https://oliverqueen.cn</link>
        <description>iOS 开发 移动App 博客 杂谈 随笔 相册</description>
        <language>zh-CN</language>
        <pubDate>Sat, 30 Dec 2023 22:16:08 +0800</pubDate>
        <lastBuildDate>Sat, 30 Dec 2023 22:16:08 +0800</lastBuildDate>
        <category>欢迎页</category>
        <category>网络</category>
        <category>底层</category>
        <category>DNS解析</category>
        <category>LocalDNS</category>
        <category>OpenGL</category>
        <category>UI</category>
        <category>动画</category>
        <category>性能优化</category>
        <category>xcode</category>
        <category>cocoapods</category>
        <category>podfile</category>
        <category>webview</category>
        <category>hook</category>
        <category>runtime</category>
        <category>翻译</category>
        <category>优化</category>
        <category>国外文献</category>
        <category>httpdns</category>
        <category>Cocoapods</category>
        <category>架构</category>
        <category>AlertView</category>
        <category>Hook</category>
        <category>杂谈</category>
        <category>Hexo</category>
        <category>个人博客</category>
        <category>网站</category>
        <category>屏幕适配</category>
        <category>iOS 11</category>
        <category>评论插件</category>
        <category>总结</category>
        <category>回味2017展望2018</category>
        <category>热修复</category>
        <category>JSPath</category>
        <category>swift</category>
        <category>网络请求</category>
        <category>Swift</category>
        <category>音频</category>
        <category>唱吧</category>
        <category>K歌</category>
        <category>AVFoundation</category>
        <category>git</category>
        <category>效率工作</category>
        <category>回首2018展望2019</category>
        <category>代码版本控制</category>
        <category>iOS</category>
        <category>Crash防护</category>
        <category>Apple登录</category>
        <category>WWDC2022</category>
        <category>逆向</category>
        <category>算法</category>
        <category>C语言</category>
        <category>排序</category>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2021-05-03-iOS%20Crash%E9%98%B2%E6%8A%A4%E4%BD%A0%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E4%B8%8A%E7%AF%87/</guid>
            <title>iOS Crash防护你看这个就够了 - 上篇</title>
            <link>https://oliverqueen.cn/2021-05-03-iOS%20Crash%E9%98%B2%E6%8A%A4%E4%BD%A0%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E4%B8%8A%E7%AF%87/</link>
            <category>iOS</category>
            <category>Crash防护</category>
            <pubDate>Sat, 30 Dec 2023 22:16:08 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;0x1-为什么要做crash防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x1-为什么要做crash防护&#34;&gt;#&lt;/a&gt; 0x1 为什么要做 Crash 防护&lt;/h1&gt;
&lt;p&gt;在产品开发过程中 Crash 率是一个很重要的指标，也是一个团队中几乎所有的部门都应该关注或者去参与提升的一个指标，他不仅代表着整个产品的质量，也是一个团队整体技术能力的体现。更低的 Crash 率不但能让产品获得更好的用户口碑，在整个流程中也能让团队成员获得更多的成长，加深对 iOS 系统底层的理解，为今后的开发带了更大的帮助。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-1256056152.cos.ap-nanjing.myqcloud.com/1111111111.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;0x2-为什么要写这篇文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x2-为什么要写这篇文章&#34;&gt;#&lt;/a&gt; 0x2 为什么要写这篇文章&lt;/h1&gt;
&lt;p&gt;起因也是因为自己的项目踩了 FB 的 SDK 的坑：2020.7.10，FB 后台下发数据错误，导致大量使用 FB SDK 的 App 发生启动 Crash，影响用户之多，范围之大，再加上当时包括我们的大部分 App 也缺乏相关的防护或者是容错处理，Crash 率瞬间飙升，重新发版又要走发布流程，只能依赖 FB 后台的修复，当时束手无策十分被动，所以决定自己做一套较为完整的 Crash 防护体系，来避免这样的场景再次发生。第二个目的就是，发生问题后我也第一之间查阅了网上的一些资料和其他团队的做法，发现大家的方式各有千秋，方法不同，效果不同，所以我也决定把市面上能找到的好的思路和方法再结合自己的一些想法和经验记录下来。最后也是因为知识是要沉淀、积累和分享的，也算是巩固和加深自己的理解吧。&lt;/p&gt;
&lt;h1 id=&#34;0x3-怎么做&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x3-怎么做&#34;&gt;#&lt;/a&gt; 0x3 怎么做&lt;/h1&gt;
&lt;p&gt;其实当时 Crash 的场景很简单，本来一个 Dictionary 参数 FB 后台却下发了个 String 类型的数据，这样一来解析时候必然会 Crash，解决的话其实只要做一层参数安全校验即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq58dki0g7j31ai0u01fd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq58c923pfj31020t8k5g.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是这么简单的问题，大部分 App 都没处理好，证明在流程上一定有大家注意不到的地方，暴露出来的只是冰山一角，我们机制一定存在着某种问题，或者存在可以优化的地方。&lt;/p&gt;
&lt;p&gt;要想避免这种情况，就要先梳理出处理 Crash 的流程：&lt;/p&gt;
&lt;h2 id=&#34;icrash处理流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icrash处理流程&#34;&gt;#&lt;/a&gt; I：Crash 处理流程&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6lcsxy6jj31bw0u0n1w.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 iOS 系统中基本可以总结出这四个步骤，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crash 防护 - 通过 Hook 等手段，对一些类似容器类进行入参校验等措施，来进来避免 Crash 的发生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crash 拦截 - 如果第一步防护失败，那么在 Crash 走到这一步就要进行拦截，要让我们发现异常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crash 上报 - 对防护的、捕获的 Crash 进行防护，生成有效的日志进行上报，尽可能的还原堆栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crash 后续流程 - Crash 发生后如何做才能最大限度的保护用户体验，如何优雅的 Crash&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iicrash防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iicrash防护&#34;&gt;#&lt;/a&gt; II：Crash 防护&lt;/h2&gt;
&lt;p&gt;Crash 防护方式主要分两种：针对非内存问题通常采用 AOP 方式，内存问题采用 zombie 对象的方式，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6lrlbl0vj30qi07mdg5.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6ls764zyj30qm06cjrq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;aopbr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aopbr&#34;&gt;#&lt;/a&gt; AOP：&amp;lt;br&amp;gt;&lt;/h3&gt;
&lt;p&gt;iOS 中 AOP 的相关知识网上线程的代码也很多，这里就不在赘述，但是在 AOP 这种频繁调用的场景中就需要注意的地方和坑点比较多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AOP 的影响范围问题：当时用了普通的方式对数组相关的方法进行了 Hook，结果上线后发现大量的类似 Crash。 &lt;code&gt;[UIKeyboardLayoutStar release]: message sent to deallocated instance UIKeyboardLayoutStar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6m6njbm8j30o40d0q8q.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
在通过一些其他场景可以判断出是因为 HookNSMutableArr 的相关方法，导致系统类的调用受到了影响。&lt;/p&gt;
&lt;p&gt;通过 Xcode 调试发现，因为 Hook 的本质就是在原有的系统调用前插入一个用户自定义的函数进行方法交换，那么在某种极端情况下（比如多线程），传入该函数的变量被释放，这样一来再走到原本系统调用的时候正常释放时就会出现重复释放的情况。大概的流程为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6mhmeprhj31hm0fu75v.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该场景在测试过程中很难复现，但是一旦到了线上，用户量覆盖够大后该问题就会显现出来。解决方式很简单，Hook 尽量在 MRC 下进行，使用 autorelease pool 进行包装。保证内部变量在当前的 runloop 结束时候进行释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOP 的性能问题：上面说了 AOP 的原理是会多一层方法调用，那么再结合 iOS 的方法转发流程可想而知，AOP 必定会造成性能的损耗，而且在 Crash 防护场景下频繁调用，性能问题一定不能忽略。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6mswloauj310o0u0jx8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过上图看出，方法调用流程最终会返回出对应的 IMP 指针供外部调用，作为动态语言，OC 无法确定开发者会再什么时候插入或者交换哪个函数，所以必须通过这一套流程进行类似校验的逻辑。&lt;/p&gt;
&lt;p&gt;使用过 AOP 的同学一定知道在 AOP 前会先做一层校验&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+(void)hookClass:(Class)classObject isClassMetohd:(BOOL)classMethod fromSelector:(SEL)fromSelector toSelector:(SEL)toSelector &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; = classObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method fromMethod = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;fromSelector&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Method toMethod = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getInstanceMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;toSelector&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  添加前进行检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (classMethod) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getClass(&lt;span class=&#34;params&#34;&gt;classObject&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fromMethod = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getClassMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;fromSelector&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        toMethod = &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getClassMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;toSelector&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_addMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;fromSelector&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getImplementation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;toMethod&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getTypeEncoding(&lt;span class=&#34;params&#34;&gt;toMethod&lt;/span&gt;)&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_replaceMethod(&lt;span class=&#34;params&#34;&gt;class&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;toSelector&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;method_getImplementation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fromMethod&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getTypeEncoding(&lt;span class=&#34;params&#34;&gt;fromMethod&lt;/span&gt;)&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_exchangeImplementations(&lt;span class=&#34;params&#34;&gt;fromMethod&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;toMethod&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 所以在方法我们在上面代码中的 toSelector 中 当我们需要调用回原方法时直接调用对应的函数指针即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6rm11f7dj30nm05a74e.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最终我对直接调用 IMP 的方法做了测试，分别是 Demo 中和 App 中的某一个场景，测试数据如下，对比结果还是较为明显。这也就是为什么 Swift 或者一些其他静态语言比 OC 快的原因。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6rw5k68mj313c0r6n13.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zombiebr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zombiebr&#34;&gt;#&lt;/a&gt; Zombie：&amp;lt;br&amp;gt;&lt;/h3&gt;
&lt;p&gt;使用僵尸对象来解决内存问题一直是苹果主推的方式，Xcode 也有相关设置，在 Debug 下打开相应开关，但是一旦把该功能放到线上做防护或监控就要考虑很多的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;zombie 入口问题：换句话说就是在哪个地方生成 zombie 对象，看了一些相关的 SDK 都是采用 Dealloc 作为入口函数，不是不行，只是不是最优。原因有两点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1: 苹果已经不建议在 ARC 下主动调用 dealloc，目前只能采用 performSelector 或者其他动态调用的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2: 容易漏掉  &lt;code&gt;Objc_destructInstance&lt;/code&gt; ，所有的成员变量、属性都会在这个函数中释放，如果漏掉这个函数就会生成一个并不干净的僵尸对象，内存占用过高，白白浪费内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上两点我最终选择在 Free 函数中生成僵尸对象&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6sr4ebj5j30vx0u0dhq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zombie 内存阈值问题：僵尸对象会占用内存空间，然而在线上环境操作内存一定要小心且一定要有一套完整的逻辑，当超过某一个内存阈值后需要及时清空僵尸对象。内存阈值的确定便成了关键，这里会遇到两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;font color=&#39;red&#39;&amp;gt; 1：内存问题一定会和机型强相关，如何根据不同的机型调整不同的阈值？ &amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;font color=&#39;red&#39;&amp;gt; 2：如何做到根据线上情况灵活动态调整？&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的底线是在加入 zombie 后不能触发 memorywarning，所以我先对大部分机型做了 memorywarning 阈值测试：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6t2xweqcj312g0sg0xq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出当 App 占用内存达到总内存的 57%~69% 时候会触发内存警告，而且由于 iphone 中有一部分内存是系统保留内存并不会给到开发者，所以我们可用的也就 50% 左右，我总结出如下公式：&lt;/p&gt;
&lt;p&gt;公式 1：不能触发内存警告  &lt;code&gt;Y = 0.5 * deviceMem – currentAppMem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;公式 2: 僵尸对象的内存占用再大也不会超过 App 本身的内存  &lt;code&gt;Y = min ( ( 0.5 * deviceMem – currentAppMem ) , currentAppMem)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面两个公式看似完美，但是还是有优化的地方，因为并不是 APP 中所有的变量都有可能成为僵尸对象，可能只是其中的某一部分需要被监控，所以得到最终的内存阈值计算公式：&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=red size=5 face=&amp;quot;黑体&amp;quot;&amp;gt;Y = min ( ( 0.5 * deviceMem – currentAppMem ) , currentAppMem / N )&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;因为 app 占用内存随时在变，所以可以加一个定时器每隔一定时间去更新该值。&lt;/p&gt;
&lt;p&gt;上面公式的 N 还有一个好处就是我们可以后台动态下发，根据线上内存引起 Crash 量，如果 Crash 量大，那可能就需要更大的内存阈值去保存僵尸对象，就可以把 N 调小，反正调大，这样就可以无视机型的差异根据 Crash 的情况进行远程配置。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6tozx4odj316l0u079c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过如图的线上数据可以看出 随着 N 的减小，zombie 的内存阈值在增加，但是并不会超过内存警告阈值，确保了内存健康。&lt;/p&gt;
&lt;p&gt;下图表示了不同的 N 值对应不同的捕获野指针问题的数量，各自 App 可以根据自己的业务情况进行调整。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6tse6e79j31zo0kkk0x.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zombie 更新策略问题：目前大家的做法都是在加入新的 zombie 对象时候检查是否超过阈值，达到阈值后删掉之前的 zombie 对象再加入新的对象，这样的清理逻辑是依赖于新 zombie 对象的加入，如果没有新对象的加入那么缓存空间也不会有变化，zombie 空间一旦生成就无法删掉，无法做到缓存的自清理，等于 App 无故增大了内存占用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6u18gh6cj30wa0saad2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同样借鉴 LRU 最近最久未使用的逻辑，每隔 30s 会检测下缓存情况，超过 30s 还未被使用的 zombie 对象将被删除，30s 是一个经验值，通过大量测试发现，内存问题一般会发生在对象被销毁的 30s 内，超过 30s 再出现的概率及小。这样可以做到缓存自清理的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6u92wzy3j30n00si41c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过 Instrument 测试发现该 zombie 逻辑并不会对 App 本身的内存造成太大的影响。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq6ucxjfn5j31c60u078q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
			&lt;script&gt;
				console.error(&#34;Error: [hexo-tag-aplayer] Specified asset file not found ( https://molier-1256056152.cos.ap-guangzhou.myqcloud.com/%E5%B0%B9%E6%98%94%E7%9C%A0%20-%20%E5%A5%94%E8%B5%B4%E6%98%9F%E7%A9%BA.mp3)&#34;);
			&lt;/script&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/iPa%E9%80%86%E5%90%91%E4%B9%8B%E8%B7%AF/</guid>
            <title>iPa逆向之路</title>
            <link>https://oliverqueen.cn/iPa%E9%80%86%E5%90%91%E4%B9%8B%E8%B7%AF/</link>
            <category>iOS</category>
            <category>逆向</category>
            <pubDate>Tue, 15 Nov 2022 19:40:49 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;逆向工程相对于正向的开发，可能关注的没有那么高，尤其是相比于安卓或者其他平台，苹果的安全机制更严格，逆向的流程也会更繁琐，除了有 ASLR（地址空间布局随机化），还有 FairPlay DRM 的 iPA 加密方式，也就是我们俗称的壳。这个给逆向工作带来了更多的挑战。但是 &lt;code&gt;更好更安全的加密方式也只是增加破解的成本，并不是绝对的安全&lt;/code&gt; ，这也是逆向的前提。&lt;/p&gt;
&lt;p&gt;最近也正在做一些调研的工作，需要从技术层面去分析其他 App 的一些底层逻辑，要用到 iOS 的逆向相关的技术，但是由于笔者做这些工作的时候正处于 MacOS、iOS、Xcode 三个系统的大版本更新期间，一些系统的运行方式和逻辑发生变化，所以导致网上能找到的资料基本都失效了，所以写文档记录下。&lt;/p&gt;
&lt;h2 id=&#34;前置工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置工作&#34;&gt;#&lt;/a&gt; 前置工作&lt;/h2&gt;
&lt;h3 id=&#34;环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境&#34;&gt;#&lt;/a&gt; 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mac 架构： Intel 架构&lt;/li&gt;
&lt;li&gt;MacOS： 13.0.1 (22A400)&lt;/li&gt;
&lt;li&gt;Xcode 版本：Version 14.1 (14B47b)&lt;/li&gt;
&lt;li&gt;iOS 系统版本：iOS 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关工具&#34;&gt;#&lt;/a&gt; 相关工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWFjaG92aWV3Lw==&#34;&gt;MachOView&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;用来查看 Mach-o 的文件结构，以及各个部分的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0ZXZlbnlnYXJkLmNvbS9wcm9qZWN0cy9jbGFzcy1kdW1wLw==&#34;&gt;class-dump&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;class-dump，顾名思义，就是用来 dump 目标对象 的 class 信息的工具。它利用 Objective-C 语言的 runtime 特性，将存储在 Mach-O 文件中的头文件信息提取出 来，并生成对应的.h 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0Fsb25lTW9ua2V5L01vbmtleURldg==&#34;&gt;MonkeyDev&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;非越狱开发插件，可以进行动态库注入，hook 相关操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaG9wcGVyYXBwLmNvbS8=&#34;&gt;Hopper Disassembler&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;Hopper Disassembler 是 Mac 上的一款二进制反汇编器，基本上满足了工作上的反汇编的需要，包括伪代码以及控制流图 (Control Flow Graph)，支持 ARM 指令集并针对 Objective-C 的做了优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ipa下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipa下载&#34;&gt;#&lt;/a&gt; iPa 下载&lt;/h2&gt;
&lt;p&gt;iOS App 的逆向的所有操作都是基于 iPa 的操作，所以大前提是要有目标 iPa，这里提供三种方式来进行 iPa 下载，大家可以选择适合自己的方式下载。&lt;/p&gt;
&lt;h3 id=&#34;方式1三方应用市场&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式1三方应用市场&#34;&gt;#&lt;/a&gt; 方式 1：三方应用市场&lt;/h3&gt;
&lt;p&gt;现在这样的应用市场比较多，多是平替 iTunes 的一些软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaTQuY24v&#34;&gt;爱思助手&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaXRvb2xzLmNuLw==&#34;&gt;iTools&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用如上的三方软件可以很快的下载对应的 ipa 包，但是由于上述市场都是镜像自 AppStore 的内容，并且自己重签名，所以更新的及时性可能没有那么快，也没有那么全，而且因为是被第三方进行了修改重签，所以内容也不一定保证和官方的一致。如果不在乎这些的话还是可以采取这类的方式下载。&lt;/p&gt;
&lt;h3 id=&#34;方式2apple-configuration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式2apple-configuration&#34;&gt;#&lt;/a&gt; 方式 2：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9hcHBsZS1jb25maWd1cmF0b3I=&#34;&gt;Apple Configuration&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;可以直接从 Mac 上的 Apple Store 上下载，官方出品，原本是给手机上安装 app 的。用此方式其实是利用了该 App 的 App 下载机制来进行 ipa 导出的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84np4us32j310y0io75z.jpg&#34; alt=&#34;image-20221114144926709&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择添加 App，然后在弹出的弹窗中选择 App 并且下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84nq4zkpwj30ys0na0vm.jpg&#34; alt=&#34;image-20221114145027227&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候如果你手机上没有安装该 App，则直接会安装成功，此时我们再点击安装下载，然后就会收到 &lt;code&gt;设备上已经存在相同的App，是否覆盖安装的提示&lt;/code&gt; 的弹窗，此时我们 &amp;lt;font color=&#39;red&#39;&amp;gt; 不要理会 &amp;lt;/font &amp;gt; 这个弹窗。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84nvzsytmj30u00y6mz0.jpg&#34; alt=&#34;image-20221114145604307&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后到如下路径就可以取到对应的 ipa&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;~&lt;span class=&#34;regexp&#34;&gt;/Library/&lt;/span&gt;Group Containers&lt;span class=&#34;regexp&#34;&gt;/K36BKF7T3D.group.com.apple.configurator/&lt;/span&gt;Library&lt;span class=&#34;regexp&#34;&gt;/Caches/&lt;/span&gt;Assets&lt;span class=&#34;regexp&#34;&gt;/TemporaryItems/&lt;/span&gt;MobileApps/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;方式3-dumpapp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式3-dumpapp&#34;&gt;#&lt;/a&gt; 方式 3 &lt;a href=&#34;%5Bhttps://dumpapp.com%5D(https://dumpapp.com/)&#34;&gt;DumpApp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;是一个第三的网站，同在线砸壳 + ipa 下载的服务，因为我们最终想要的就是一个砸壳之后的 ipa，所以这个网站直接帮我们做好了，只不过是收费的，每个 app 是 9 元，但是有多个境外的 App 市场，比较全面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84par73tqj30be07saa1.jpg&#34; alt=&#34;image-20221114154450405&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ipa砸壳&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipa砸壳&#34;&gt;#&lt;/a&gt; iPa 砸壳&lt;/h2&gt;
&lt;p&gt;如果 iPa 的获取方式选择方式 3，则可以略过砸壳步骤&lt;/p&gt;
&lt;p&gt;app 上传到 AppStore 后   苹果使用 fairplay DRM 来加密，就是我们所说的壳 DRM 全称 Digital Rights Management，即数字版权保护。苹果为了保护 App Store 分发的音乐 / 视频 / 书籍 / App 免于盗版，开发了 Fairplay DRM 技术。&lt;/p&gt;
&lt;p&gt;所有逆向都是建立在砸壳的前提下，砸壳的方式有两种：&lt;/p&gt;
&lt;h3 id=&#34;静态砸壳&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态砸壳&#34;&gt;#&lt;/a&gt; 静态砸壳&lt;/h3&gt;
&lt;p&gt;就是不依赖程序运行，直接用 ipa 包就可以进行砸壳解密，比如说我已经知道了他的加密算法，或者我通过暴力破解了他的加密算法，然后对 ipa 进行解密，但是这样的方法难度较大，而且如果人家一旦换了加密方式或者有其他的改动，那解密方式就不生效了，常见的静态砸壳工具有以下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[fouldecrypt](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL055YU1pc3R5L2ZvdWxkZWNyeXB0&#34;&gt;NyaMisty/fouldecrypt: A lightweight and simpling iOS binary decryptor (github.com)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xha3IyMzMvSXJpZGl1bQ==&#34;&gt;Iridium&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动态砸壳&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态砸壳&#34;&gt;#&lt;/a&gt; 动态砸壳&lt;/h3&gt;
&lt;p&gt;与静态相反，动态砸壳就是依赖运行时的原理来进行解密，不过与其说是解密，倒不如说是内存提取，因为无论 ipa 包用什么加密方式，最终都是解密后运行到内存里面的，所以我们可以认为 &lt;code&gt;一个ipa在内存上的数据是未加密的&lt;/code&gt; ，所以此时我们只要把内存上的数据提取出来即可，整个过程也不涉及到解密操作，及时后面 Apple 更换加密方式，也不影响动态砸壳的过程。&lt;/p&gt;
&lt;p&gt;动态砸壳的方式和工具有很多，现在基本已经流水线化了，可以使用以下方式和工具来进行处理，前提是要有一个越狱的手机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODkzNDk5OTA0MDA4&#34;&gt;dumpdecrypted&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODkzNDk5OTA0MDE0&#34;&gt;Clutch&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成果检验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成果检验&#34;&gt;#&lt;/a&gt; 成果检验&lt;/h3&gt;
&lt;p&gt;砸壳后需要检查是否砸壳成功，找到对应砸壳后的的 ipa，点进去找到 mach-o 文件，执行如下命令，然后在输出查看 &lt;code&gt;cryptid&lt;/code&gt;  字段如果为 &lt;code&gt;0&lt;/code&gt;  就说明砸壳成功。XXX = mach-o 名字&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight 1c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;otool -l XXXXX &lt;span class=&#34;string&#34;&gt;|grep cry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84ripqxklj30tx02imxg.jpg&#34; alt=&#34;image-20221114170141723&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;头文件导出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头文件导出&#34;&gt;#&lt;/a&gt; 头文件导出&lt;/h2&gt;
&lt;p&gt;砸壳后的的第一步就是将 ipa 文件的头.h 文件导出，然后根据 头文件的方法和属性进行逆向分析，在找到对应的 hook 点。通常我们使用 class-dump，可以去他的官网下载对应的文件，然后将文件拷贝到对应的目录下。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo cp class-dump /usr/local/bin   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一步没什么问题，拷贝完成重启终端就可以调用 class-dump 的方法了.&lt;/p&gt;
&lt;h3 id=&#34;导出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导出&#34;&gt;#&lt;/a&gt; 导出&lt;/h3&gt;
&lt;p&gt;执行下面的命令，导出头文件，需要注意的是：导出后会有上万个个文件，所以目标目录最好不要选 Desktop 或者其他的根目录&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class-dump -S -s -H XXXXX -o /path/to/headers/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有的时候会收到这样的错误&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Error:Cannot find offset for address 0xd80000000101534a in stringAtAddress:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为项目使用了 Oc 和 Swift 的混编，需要赋予 class-dump 文件权限即可&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo chmod 777 /usr/local/bin/class-dump&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后就可以导出成功了。&lt;/p&gt;
&lt;h2 id=&#34;monkeydev&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monkeydev&#34;&gt;#&lt;/a&gt; MonkeyDev&lt;/h2&gt;
&lt;p&gt;这是一个为越狱和非越狱开发人员准备的工具，主要包括四个模块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logos Tweak&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RoZW9zL3RoZW9zL3dpa2kvSW5zdGFsbGF0aW9u&#34;&gt; theos&lt;/span&gt; 提供的 &lt;code&gt;logify.pl&lt;/code&gt;  工具将 &lt;code&gt;*.xm&lt;/code&gt;  文件转成 &lt;code&gt;*.mm&lt;/code&gt;  文件进行编译，集成了 &lt;code&gt;CydiaSubstrate&lt;/code&gt; ，可以使用 &lt;code&gt;MSHookMessageEx&lt;/code&gt;  和 &lt;code&gt;MSHookFunction&lt;/code&gt;  来 &lt;code&gt;Hook&lt;/code&gt;  OC 函数和指定地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CaptainHook Tweak&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JwZXRyaWNoL0NhcHRhaW5Ib29rLw==&#34;&gt; CaptainHook&lt;/span&gt; 提供的头文件进行 OC 函数的 Hook 以及属性的获取。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command-line Tool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接创建运行于越狱设备的命令行工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MonkeyApp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是自动给第三方应用集成 Reveal、Cycript 和注入 dylib 的模块，支持调试 dylib 和第三方应用，支持 Pod 给第三放应用集成 SDK，只需要准备一个砸壳后的 ipa 或者 app 文件即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;p&gt;Monkeydev 依赖&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aGVvcy5kZXYvZG9jcy9pbnN0YWxsYXRpb24=&#34;&gt; Theos&lt;/span&gt;.Theos 是一个越狱开发工具包，由 iOS 越狱界知名人士 Dustin Howett 开发并分享到 GitHub 上。Theos 与其他越狱开发工具相比，最大特点就是简单：下载安装简单、Logos 语法简单、编译发布简单，可以让使用者将精力都放在开发工作上去。&lt;/p&gt;
&lt;h4 id=&#34;安装thoes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装thoes&#34;&gt;#&lt;/a&gt; 安装 Thoes&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo git clone --recursive https://github.com/theos/theos.git /opt/theos&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装monkeydev&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装monkeydev&#34;&gt;#&lt;/a&gt; 安装 Monkeydev&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo /bin/sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;卸载monkeydev&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#卸载monkeydev&#34;&gt;#&lt;/a&gt; 卸载 Monkeydev&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo /bin/sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-uninstall)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;更新monkeydev&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新monkeydev&#34;&gt;#&lt;/a&gt; 更新 Monkeydev&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo /bin/sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-update)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装问题&#34;&gt;#&lt;/a&gt; 安装问题&lt;/h4&gt;
&lt;p&gt;在安装过程中，修改用户  &lt;code&gt;profile&lt;/code&gt;  文件时，找不到  &lt;code&gt;MacOSX Package Types.xcspec&lt;/code&gt;  和  &lt;code&gt;MacOSX Product Types.xcspec&lt;/code&gt;  文件&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;File /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications/MacOSX Package Types.xcspec not found&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个是因为最新的 Xcode14 中 这个路径已经改变，所以原路径无法找到，不过如果大家需要逆向的事 iOS 的 App 到这一步可以不用关心，这个是 MacOS 相关的模板文件。此时打开 Xcode 如果有以下模版文件，并能成功创建工程即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84skm4dlej30li0fbjsb.jpg&#34; alt=&#34;image-20221114173807449&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;编译报错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译报错&#34;&gt;#&lt;/a&gt; 编译报错&lt;/h4&gt;
&lt;p&gt;通过上一步的模板文件创建好工程后，直接真机编译运行，这个时候会提示编译错误&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;iOS &lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt; not found: &lt;span class=&#34;regexp&#34;&gt;/usr/&lt;/span&gt;lib/libstdc++.dylib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为 &lt;code&gt;Xcode 10&lt;/code&gt;  之后删除的 &lt;code&gt;libstdc++&lt;/code&gt;  库。可以参考此&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RibXo1MDIvTW9ua2V5RGV2X1hjb2RlMTQ=&#34;&gt;解决方案&lt;/span&gt;。之后就可以编译成功了，并且手机上可以跑起来。&lt;/p&gt;
&lt;p&gt;第二个错误是 Fishhook 中的错误，这个是是由于 Fishhook 用的是比较老的版本，本身存在 bug，只要去 github 官网找到 fishhook 最新代码 copy 过来即可。&lt;/p&gt;
&lt;h3 id=&#34;文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件结构&#34;&gt;#&lt;/a&gt; 文件结构&lt;/h3&gt;
&lt;p&gt;文件结构如下如图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://upload-images.jianshu.io/upload_images/1609369-0a4b973075bc5df2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/854/format/webp&#34; alt=&#34;image-20221114174320781&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这是一个标准的 MonkeyDemo 的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TargetApp&lt;/code&gt; ：放目标 &lt;code&gt;ipa&lt;/code&gt;  的文件，将需要逆向的破壳 &lt;code&gt;ipa&lt;/code&gt;  放在此处&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Logos&lt;/code&gt; ：编写相关 &lt;code&gt;hook&lt;/code&gt;  的文件，所有 &lt;code&gt;hook&lt;/code&gt;  操作在此处，但是因为该文件下要用了 logos 语句，有一定的学习成本，所以后面的 hook 函数可以直接写在上面的 MonkeyDeomDyLib.m 中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fishhook&lt;/code&gt; ：用来 &lt;code&gt;hook&lt;/code&gt;  系统函数的库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上方的 MonkeyDeomDyLib 就是我们即将注入进去的动态库。&lt;/p&gt;
&lt;h3 id=&#34;动态库注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态库注入&#34;&gt;#&lt;/a&gt; 动态库注入&lt;/h3&gt;
&lt;p&gt;运行 demo 后动态库注入成功，控制台会有如下输出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84swti61vj31le0qn43z.jpg&#34; alt=&#34;image-20221114174950556&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight erlang-repl&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;🎉!!！congratulations!!！🎉\n👍----------------insert dylib success----------------👍&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是如果是和我一样的运行环境，你是大概率看不到的，因为会注入失败。这里尝试了两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert_dylib 同样注入失败，&lt;/li&gt;
&lt;li&gt;optool 注入成功&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面说下 optool 使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载编译 optool&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https:&lt;span class=&#34;regexp&#34;&gt;//gi&lt;/span&gt;thub.com&lt;span class=&#34;regexp&#34;&gt;/alexzielenski/&lt;/span&gt;optool.git&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd optool&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git submodule update --init --recursive&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到编译产物&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h84t2mlrmaj30aa0b7wer.jpg&#34; alt=&#34;image-20221114175525945&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把编译产物拷贝到 &lt;code&gt;/opt/MonkeyDev/bin&lt;/code&gt;  下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;/opt/MonkeyDev/Tools/pack.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;顶部插入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OPTOOL=&amp;quot;$&amp;#123;MONKEYDEV_PATH&amp;#125;/bin/optool&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;同上面一样&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;修改插入动态库工具代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;$OPTOOL&amp;quot; install -c load -p &amp;quot;@executable_path/Frameworks/lib&amp;quot;&amp;quot;$&amp;#123;TARGET_NAME&amp;#125;&amp;quot;&amp;quot;Dylib.dylib&amp;quot; -t &amp;quot;$&amp;#123;BUILD_APP_PATH&amp;#125;/$&amp;#123;APP_BINARY&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后保存重新运行即可注入成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pod使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pod使用&#34;&gt;#&lt;/a&gt; pod 使用&lt;/h3&gt;
&lt;p&gt;在调试 App 时候我们会用到类似 lookIn 或者 FLEX 的等工具来看 App 的层级结构和 沙盒文件，同样需要 pod 来接入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;像平时创建 podfile 文件一样 进入到工程目录 &lt;code&gt;pod init&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在生成的 podfile 中添加 pod，但是要注意是在 &amp;lt;font color=&#39;red&#39;&amp;gt; DemoLib &amp;lt;/font &amp;gt; 的 trarget 中添加，因为我们的 pod 是打入动态库的，然后由动态库带入 App&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight elixir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Uncomment the next line to define a global platform for your project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# platform :ios, &amp;#x27;9.0&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target &lt;span class=&#34;string&#34;&gt;&amp;#x27;Demo&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Comment the next line if you don&amp;#x27;t want to use dynamic frameworks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target &lt;span class=&#34;string&#34;&gt;&amp;#x27;DemoDylib&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Comment the next line if you don&amp;#x27;t want to use dynamic frameworks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pod &lt;span class=&#34;string&#34;&gt;&amp;#x27;FLEX&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pod &lt;span class=&#34;string&#34;&gt;&amp;#x27;LookinServer&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后 &lt;code&gt;pod install&lt;/code&gt;  即可看到效果&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h85lo8xilij31b90u0ada.jpg&#34; alt=&#34;image-20221115102451908&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码hook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码hook&#34;&gt;#&lt;/a&gt; 代码 Hook&lt;/h3&gt;
&lt;p&gt;通过 Lookin 我们可以找到入手点和对应的类名，然后通过之前导出的头文件可以查看类名对应的函数，接下来就是要看下函数里面做了哪些事情，就要用到 Hook 手段，MonkeyDev 给我们封装好了 Hook 相关的方法，包括 OC 和 C 的 Hook 函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CHDeclareClass&lt;/p&gt;
&lt;p&gt;注册类名。也就是注册要被 hook 的函数所在的类，比如&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CHDeclareClass(MYViewController)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CHOptimizedMethod1&lt;/p&gt;
&lt;p&gt;hook 实例方法，你会发现后面跟了数字 1~10，代表被 hook 的函数的参数的个数，比如我将要 hook 的函数只有一个参数 那么就使用 CHOptimizedMethod1 参数含义为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个参数，一般传 self&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数，传返回值类型，没有返回值就是 void&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个参数，函数所在的类名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四个参数，方法名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第五个参数，函数参数的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第六个参数，函数参数的变量&lt;/p&gt;
&lt;p&gt;其中第五第六个参数在 CHOptimizedMethod1 ~10 中会重复 1~10 次&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CHOptimizedMethod1(self, void, MYViewController, appMethod, id, para) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NSLog(@&amp;quot;appMethod被Hook = %@&amp;quot;, para);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CHOptimizedClassMethod3&lt;/p&gt;
&lt;p&gt;hook 类方法，所有函数定义同上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CHConstructor 结构&lt;/p&gt;
&lt;p&gt;用来注册刚才的 hook 操作&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CHConstructor&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 注册将要hook的类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CHLoadLateClass(MYViewController);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	// 注册将要hook 的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CHHook1(MYViewController, appMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面流程执行完成后就可以看到函数被 Hook 了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hopper-disassembler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hopper-disassembler&#34;&gt;#&lt;/a&gt; Hopper Disassembler&lt;/h2&gt;
&lt;p&gt;上面的步骤讲了如何通过 lookin 或者 reveal 等工具来定位类名，然后通过类名在头文件中找到函数名，然后通过 hook 手段来改变函数的一些表现，但是在如何没有拿到.m 文件的前提下看到某个函数的实现呢？比如一个函数中都做了哪些操作，调用了哪些其他函数，以及调用链是怎样的？&lt;/p&gt;
&lt;p&gt;这个时候就需要用到 &lt;code&gt;Hopper Disassembler&lt;/code&gt;  或者 &lt;code&gt;IDA Pro&lt;/code&gt;  这样的工具了，不过目前遇到的困难是在笔者的系统环境下，这两个软件的破解版无法安装，而且 &lt;code&gt;IDA Pro&lt;/code&gt;  的官方试用版还不支持 Arm 的汇编，所以只能使用 Hopper Disassembler 来举例子。打开软件，将 &lt;code&gt;对应App 的Mach-o&lt;/code&gt;  文件拖入 Hopper 中等待它分析完成&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h85mc4b62oj31ec0u075n.jpg&#34; alt=&#34;image-20221115104755241&#34; /&gt;&lt;/p&gt;
&lt;p&gt;处理完后的界面左边会显示方法名，支持搜索查询，中间区域显示的是汇编代码，我们搜索一个在之前 dump 出的头文件中的一个函数名试下。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[XXXXXXXX listenerDownloadLyricWithSongId:resultBlock:]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到中间的部分显示出来函数所对应的汇编代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008vxvgGgy1h861n7q3isj317b0u0dlg.jpg&#34; alt=&#34;image-20221115193733635&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后按快捷键 &lt;code&gt;Option+enter&lt;/code&gt;  即可转为伪 OC 代码，虽然包含一些的寄存器信息，但是也足以分析了。同时双击可以跳转到对应的函数内部。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;p&gt;以上就是目前的逆向调研过程，这里先记录下，后面还会深入研究，有新的发现会同步更新此文章。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2022-08-24-WWDC22%EF%BC%9ARuntime%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%92%8CApp%E5%87%8F%E5%8C%85/</guid>
            <title>WWDC22：Runtime的性能优化和App减包</title>
            <link>https://oliverqueen.cn/2022-08-24-WWDC22%EF%BC%9ARuntime%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%92%8CApp%E5%87%8F%E5%8C%85/</link>
            <category>iOS</category>
            <category>WWDC2022</category>
            <pubDate>Wed, 24 Aug 2022 15:04:39 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;本 Session 讲了为了让你的应用包体积更小，运行更快，启动速度更快，我们对 Swift 和 Objective-C 运行时做了怎样的优化。同时通过本 Session 你将发现如何通过高效的协议检查，更小的消息发送，以及优化后的 ARC 机制，来提高你的 App 性能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/MolierQueen/resource@main/202301102018054.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[&#34;https://music.163.com/#/song?id=1929370102&#34;]&#39;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;WWDC2022 上苹果更新了 Xcode14，里面提到了一些相关的优化。其中讲了通过对 Swift 和 Objective-C 运行时做了一些优化，达到了包体积变得更小、运行速度更快，启动速度更快的目的。如果你是用 Xcode14 来构建 App，那么会有其中三点优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效的协议检查（针对 Swift protocol check）&lt;/li&gt;
&lt;li&gt;更快的消息发送机制（message send）&lt;/li&gt;
&lt;li&gt;release 和 retain 调用优化（release &amp;amp; retain）&lt;/li&gt;
&lt;li&gt;Autorelease elision 的优化（自动释放省略）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/MolierQueen/resource@main/202301102019048.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当你用 Swift 或 Objective-C 编写代码时，其实是会经历三个个步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码，通过 Xcode 编写代码&lt;/li&gt;
&lt;li&gt;编译，使用了 Swift 和 Clang 编译器&lt;/li&gt;
&lt;li&gt;运行，通过 Swift 和 Objective-C 运行时中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gp9rcbq1j215t0u0754.jpg&#34; alt=&#34;image-20220823144936761&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此次的这些关键优化其实就是在第三步骤运行时来完成的，运行时嵌入在我们所有平台的操作系统中。编译器在构建时不能做的事情，运行时可以做。而此次所有的修改其实对于开发者来说是无感透明的，所以任何代码都不用改动，只要你使用 Xcode14 来进行打包编译，便会享受的这些优化点。&lt;/p&gt;
&lt;h2 id=&#34;swift协议检查protocol-checks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swift协议检查protocol-checks&#34;&gt;#&lt;/a&gt; Swift 协议检查（Protocol checks）&lt;/h2&gt;
&lt;p&gt;先来看一个例子！&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CustomLoggable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 协议中定义一个属性 customString，只读属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; customLogString: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个log函数，参数为Any类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;Any&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//如果value遵循CustomLoggable协议，就输出字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; value &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; value &lt;span class=&#34;keyword&#34;&gt;as?&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;CustomLoggable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;debugPrint&lt;/span&gt;(value.customLogString)        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个Event类型 遵循协议，并实现customLogString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Event&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;CustomLoggable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; date: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; customLogString: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;\(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.name)&lt;/span&gt;, on &lt;span class=&#34;subst&#34;&gt;\(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.date)&lt;/span&gt;&amp;quot;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看上面代码，因为 log 函数的参数需要输出字符串，所以在输出前要先判断这个 value 是否遵循 CustomLoggable 协议，Swift 是静态语言，所以一般来说这样的检查都是发生在编译时期。但是编译器不一定能拿到足够的协议元数据信息来完成检查。比如这里并不知道每次传入的 Any 类型是哪个确定类型，也就无法确定是否遵循  &lt;code&gt;CustomLoggable&lt;/code&gt;  协议。所以这种检查常常发生运行时，系统借助计算好的协议检查元数据 (protocol check metadata)，运行库知道这个特殊对象是否符合协议。&lt;/p&gt;
&lt;p&gt;这些元数据的构建虽然大部分在编译期间，但是还是有一部分是要在运行时完成，比如上面的例子，而且一个项目中肯定不止有一个协议，所以随着协议越多运行时的效率就越低，对于用户来说这个时间大部分是启动时间，所以用户感知为启动时间变长。而 Xcode14 新推的的 Swift Runtime 解决了这个问题，只要你是用 Xcode14 编译且运行在 iOS16 及以上版即可。&lt;/p&gt;
&lt;p&gt;按照苹果的说法，他们会把 &lt;code&gt;是否遵循协议&lt;/code&gt; 的这个判断前置到 build 时期，也就是把 &lt;code&gt;协议元数据计算&lt;/code&gt; 的步骤前置到 build 中，具体就是他把这些操作放在 App 可执行文件和启动时任何动态库的 dyld 闭包的一部分&lt;/p&gt;
&lt;p&gt;为什么这样做可以节省启动时间，需要先了解下 app 启动流程，需要一个知识背景 &lt;code&gt;从iOS11开始dyld3被加入，iOS13第三方库也开始使用dyld3加载。&lt;/code&gt; 所以我们要看下 dyld3 的加载流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://upload-images.jianshu.io/upload_images/2438680-b5edfa4c2bcdb205.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1044/format/webp&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;dyld 3&lt;/em&gt; 主要包含了两个过程 进程外（启动前）和进程内（启动后），我们来看启动前做了那些事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程外 &lt;em&gt;Mach-O&lt;/em&gt; 分析器和编译器 （&lt;em&gt;out-of-process mach-o parser&lt;/em&gt;）&lt;br /&gt;
&lt;em&gt;dyld 3&lt;/em&gt; 中将采用提前写入把结果数据缓存成文件的方式构成一个 &lt;em&gt;lauch closure&lt;/em&gt;（可以理解为缓存文件）&lt;/li&gt;
&lt;li&gt;分析依赖库&lt;/li&gt;
&lt;li&gt;执行符号查找&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write closure&lt;/em&gt; 缓存服务 (&lt;em&gt;launch closure cache&lt;/em&gt; )&lt;br /&gt;
 系统程序的 &lt;em&gt;closure&lt;/em&gt; 直接内置在 &lt;em&gt;shared cache&lt;/em&gt; 中，而对于第三方 APP，将在 APP 安装或更新时生成，这样就能保证 &lt;em&gt;closure&lt;/em&gt; 总是在 APP 打开之前准备好。说白了就是把上面做的结果全都缓存起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上看来以前需要在 in-process 中做的事情，现在在 out-of-process 就可以完成，启动时或者运行时直接读取缓存数据即可，加快了启动速度和运行时的性能。其实在笔者看来当我们下载或者更新 App 的时候 App 上的进度条其实是分两部分 &lt;code&gt;正在下载&lt;/code&gt; 和 &lt;code&gt;正在安装&lt;/code&gt; ，此次的优化可能略微提高安装的时长来降低启动速度，提高运行时性能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;on apps that rely heavily in Swift, this could add up to half the launch time&lt;/code&gt;  如果有条件的同学可以试下是否可以提高这么多的启动耗时。&lt;/p&gt;
&lt;h2 id=&#34;消息发送优化message-send&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息发送优化message-send&#34;&gt;#&lt;/a&gt; 消息发送优化（Message send）&lt;/h2&gt;
&lt;p&gt;直接抛结果，苹果这边给到的数据是使用 Xcode14 编译打包的数据可以让 ARM64 上发送消息消耗从 12 字节降低到 8 字节，二进制大小也有 2% 的降低，也就是苹果对包大小和性能都做了优化，默认是同时开启的，由苹果来平衡两者的关系，当然也可以使用 &lt;code&gt;objc_stubs_small&lt;/code&gt;  来仅仅优化包大小。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5grqpljrej215t0u0aax.jpg&#34; alt=&#34;image-20220823161510950&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面我们看下是怎么优化的，同样使用官方代码举例&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 声明一个日历对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NScalendar *cal = [self makeCalendar];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 声明一个日期对象并赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NSDateComponents *dateComponents = [[NSDateComponents alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.year = 2022;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.month = 2022;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.day = 2022;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 把日期转换为date&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NSDate *theDate = [cal dateFromComponents: dateComponents];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 返回date&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return theDate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大家知道 OC 调用方法最终会走到 &lt;code&gt;_objc_msgSend&lt;/code&gt; ，所以上面代码不算最终的 return，会走 7 个  &lt;code&gt;_objc_msgSend&lt;/code&gt; ，其中每一个都需要一条指令来调用就是 bl 如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gsa0ef9kj20n00gidgx.jpg&#34; alt=&#34;image-20220823163343886&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该函数定义为 &lt;code&gt;Id objc_msgSend(id self, SEL _cmd, ...) &lt;/code&gt; ，参数定义为 self 是函数的调用方，SEL 为具体调用哪个函数，具体的方法查找流程就不在这里赘述。&lt;/p&gt;
&lt;p&gt;我们拿其中具体的一个函数调用来分析&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;NSDate *theDate = [cal dateFromComponents: dateComponents]; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如这个函数调用，转化为 mesagesend 的时候就变成这样&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;objc_msgSend(cal, @selector(dateFromComponents))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了告诉运行时调用哪个方法，我们必须传递一个 Selector 给这些 objc_msgSend 调用，就如上图的 &lt;code&gt;@selector(dateFromComponents)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们再来看 &lt;code&gt;Id objc_msgSend(id self, SEL _cmd, ...)&lt;/code&gt;  执行后他是怎么执行汇编指令的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 使用adrp找到该方法的地址   消耗4字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;adrp x1, [selector &amp;quot;dateFromComponents&amp;quot;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 将 地址加载到X1寄存器中  消耗4字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ldr  x1, [x1, selector &amp;quot;dateFromComponents&amp;quot;] &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 执行bl指令跳转到该方法并执行  消耗4字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bl _objc_msgSend&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码看出每次执行方法调用都会 走以上三个步骤，每个步骤消耗 4 字节 一共消耗 12 字节，而前两步是准备 selector，任何一次方法调用都会执行他，目前的策略是每调一个方法都会生成上面三步，那么此时优化空间就来了。&lt;/p&gt;
&lt;p&gt;因为这里存在相同的代码（前两步）， &lt;code&gt;我们可以考虑共享它，并且只在每个 selector 中触发它一次，而不是每次发送消息时都生成这段指令代码&lt;/code&gt; 。所以我们可以把这部分相同代码提取出来，放到一个小助手函数中 (helper function), 并调用该函数。通过使用同一 selector 进行多次调用 (通过传递参数不同，内部指令是相同的，现在封装成一个存根函数，以前是散落在各个 _objc_msgSend 调用处)，我们可以保存所有这些指令字节。所以可以理解为 &lt;code&gt;把前两步封装一下&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gvtbfnh1j20n00git9h.jpg&#34; alt=&#34;image-20220823183604633&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所以原来的调用就变成了&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bl _objc_msgSend$dateFromComponents 4字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bl _objc_msgSend    4字节&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这也就是苹果说的从 12 字节优化到 8 字节，其中 &lt;code&gt;_objc_msgSend$dateFromComponents&lt;/code&gt;  也被称为 &lt;code&gt;selector stub 存根函数&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样 &lt;code&gt;_objc_msgSend&lt;/code&gt;  本身也有一个存根函数写法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gw1kpzuzj20n00giwfd.jpg&#34; alt=&#34;image-20220823184401200&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样一来我们现在就有两个存根函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_objc_msgSend$dateFromComponents:&lt;/li&gt;
&lt;li&gt;_objc_msgSend:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个函数封装了一些通用的东西，共享了最多的代码，使代码尽可能的小，但是这样带来的不足是我需要连着两个 bl 跳转，这对操作系统来说开销较大。所以为了平衡包体积和性能，我们可以使用下面这种方法来提升这一点。我们可以把前面调用的两个存根函数封装成一个 (都封装成_objc_msgSend$dateFromComponents)，这样，我们可以使代码更紧凑，不需要那么多调用。如下图这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gwei63esj20bo07u74l.jpg&#34; alt=&#34;image-20220823185626349&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这就回到了之前的问题，你可以通过 &lt;code&gt;_objc_stubs_small&lt;/code&gt;  标记了只降低包大小，或者采用默认的方式让系统自动平衡，两者的区别在汇编层面就体现在如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gwg7hnugj20n00gidhc.jpg&#34; alt=&#34;image-20220823185804687&#34; /&gt;&lt;/p&gt;
&lt;p&gt;综上：这就是 Meesage send 占用从 12 bytes 降低到 8 bytes 和二进制大小下降 12% 的原因&lt;/p&gt;
&lt;h2 id=&#34;retain-and-release&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#retain-and-release&#34;&gt;#&lt;/a&gt; Retain and release&lt;/h2&gt;
&lt;p&gt;这个优化是苹果这边使 Retain and release 的开销更小，苹果的说法是 Retain and release 的调用开销从 8 字节降低到 4 字节，同时包体积也会有 2% 的优化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gwkqxaenj20n00gidg9.jpg&#34; alt=&#34;image-20220823190226429&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们知道 ARC 相比于 MRC 是开发者不需要再写 retain、release 这些代码，其实并不是不需要，而是编译器帮我们自动在需要的位置插入了这些代码，所以换句话说他们还是存在的，只是你看不到也不用在关心他们。&lt;/p&gt;
&lt;p&gt;还是拿之前的例子来说&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// Retain/release calls inserted by ARC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NScalendar *cal = [self makeCalendar]; // bl    _objc_retain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NSDateComponents *dateComponents = [[NSDateComponents alloc] init]; // bl    _objc_retain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.year = 2022; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.month = 2022;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dateComponents.day = 2022;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NSDate *theDate = [cal dateFromComponents: dateComponents]; // bl    _objc_retain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return theDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// bl    _objc_release &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// bl    _objc_release &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// bl    _objc_release &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在变量创建的时候我们使用 retain 来增加的他的引用计数不被销毁，在方法结束后我们使用 release 来销毁不需要的变量，这也是 iOS 的内存管理机制。在 ARC 下这些都是编译器我们插入的代码，我们无需关心。&lt;/p&gt;
&lt;p&gt;retain 和 release 都是 C 语言的函数，他们携带一个参数就是被操作的对象，同时他遵循 C 语言的 ABI，所以当你调用这些方法的时候系统还会为你做一些额外的事情，比如下图中的 mov 操作，而这些操正是我们优化的用武之地，通过自定义调用重新约定 retain/release 接口，我们可以根据对象指针的位置，适当的使用正确的变量，这样就可以不用移动它。简单的说， &lt;code&gt;就是修改了底层 ABI&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gwylzjkuj20n00giab1.jpg&#34; alt=&#34;image-20220823191546398&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们是怎么做的优化呢？看下之前的流程，我们用下面这行代码举例&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;objc_release(dateComponents); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// mov  x0, x20                    消耗4 字节                                                                                                                                                           &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bl    _objc_release         消耗4字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;流程为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先执行 mov 把副本地址（X20, 也就是对象的地址）存到寄存器 x0&lt;/li&gt;
&lt;li&gt;然后 bl 跳转到 &lt;code&gt;_objc_release&lt;/code&gt;  函数进行释放&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据之前讲的每个指令消耗 4 字节，所以这里消耗 8 字节&lt;/p&gt;
&lt;p&gt;我们修改 ABI 之后其省掉调用 mov 指令 然后原本跳转到_objc_release 函数 改为跳转到 &lt;code&gt;_objc_release_x20&lt;/code&gt;  函数，而 mov 的指令放到 C 语言更底层的 ABI 里面去做，你可以理解为 &lt;code&gt;我们封装了一个新的retain、release函数，你只要传入一个寄存器地址我就去更底层的地方完成mov操作，所以效率更高了&lt;/code&gt; 。现在因为只用执行一条指令，所以内存消耗为 4 字节。现在的流程看起来为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gx83ebs8j20n00giab9.jpg&#34; alt=&#34;image-20220823192452605&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这么看来我们代码里大量的 release 和 retain 都经过这样的样的优化所以整体的二进制包降低 2% 同时调用内存消耗游 8 字节变为 4 字节，同时 ABI 接口修改，去除冗余 mov 指令调用，下沉到 ABI。 &lt;code&gt;由于 ABI 是内嵌系统&lt;/code&gt; ，这里新增 mov 指令占用可以忽略不计。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Apple 果然是坚持用户体验优先，为了更好体验不惜修改 c 的 ABI&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;autorelease-elision自动释放省略优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autorelease-elision自动释放省略优化&#34;&gt;#&lt;/a&gt; Autorelease elision（自动释放省略优化）&lt;/h2&gt;
&lt;p&gt;iOS 中除了使用 release 之外还有另一个 就是 autorelease 自动释放机制，同样在这个地方苹果也做了自动释放省略的优化让自动释放机制效率更高。我们来看下面这个例子&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// Return Value Autoreleases &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;theWWDCDate = [event getWWDCDate];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-(NSDate*)getWWDCDate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return theDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建一个临时对象 (theDate)，并将其返回给调用方 (event)。 &lt;code&gt;getWWDCDate()&lt;/code&gt;  方法中返回临时的 theDate，然后调用完成 (返回 theDate 之后，getWWDCDate 就调用完成)。这时调用方（event）将其保存到自己的变量中（theWWDCDate 中）。&lt;/p&gt;
&lt;p&gt;根据系统插入 retain 和 release 的机制来说应该是这样的，但是明显 retain 处不能进行 release，因为我需要吧 theDate 返回回去，如果这里释放了我就没办法呢返回了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gy19928nj20n00gi3yz.jpg&#34; alt=&#34;image-20220823195254398&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此，为了解决上述问题，需要使用一个特殊的约定用来返回这个临时返回值。这就引入了 Autorelease，这样调用者能够 retain 它。autorelease 在这里保证在调用方可以正常返回该值，而不被提前释放，延长释放生命周期。你之前可能看到过 autorelease 和 autoreleasePools：其实这是一种将 release 操作推迟到稍后某个时间的方法。所以上面的代码改为 Autorelease&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// Return Value Autoreleases &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;theWWDCDate = [[event getWWDCDate] retain];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-(NSDate*)getWWDCDate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return [theDate autorelease]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;系统并不知道他在什么时候会被释放，反正只要不在 retain 的时候释放就行，所以我在 retain 的时候先打个标记，标记他之后可能会被释放。但是这样的操作目前会带来一些开销，其实就是 &lt;code&gt;我虽然打了release标记，但是我明明一会还要retain，没必要多此一举&lt;/code&gt; ，所以基于此我们之前引入了 &lt;code&gt;Autorelease elision&lt;/code&gt;  来减少这部分开销（ &lt;code&gt;如果Autorelease后紧接一个retain我就都不做了&lt;/code&gt; ）。我们先从汇编层面看下 Autorelease elision 做了什么&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5gy8n9wnzj20n00giwf7.jpg&#34; alt=&#34;image-20220823195959365&#34; /&gt;&lt;/p&gt;
&lt;p&gt;提炼出以下代码&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// What the compiler emits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; bl    _getWWDCDate &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; mov   x29, x29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; bl    _objc_retainAutoreleasedReturnValue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; b    _objc_autoreleaseReturnValue   &lt;span class=&#34;comment&#34;&gt;// autorelease -&amp;gt; runtime -&amp;gt; _objc_autoreleaseReturnValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实就是以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们返回值调用 Autorelease 时候系统会调用 &lt;code&gt;_objc_autoreleaseReturnValue&lt;/code&gt;  来返回一个 &lt;code&gt;autoreleased value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 Autorelease 后编译器会添加个标记 &lt;code&gt;mov x29, x29&lt;/code&gt;   而这句指令在实际运行中这个指令会变为二进制的形式变为 &lt;code&gt;0xAA1D03FD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后续的操作就运行时会先判断是否有对应的标记 &lt;code&gt;0xAA1D03FD&lt;/code&gt; ，如果有，这意味着编译器告诉 runtime, 我们将返回一个已经被标记，但是将立即被持有（retain） 的临时变量，后面就不需要再 retain 操作了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5h056kleej20n00gigm5.jpg&#34; alt=&#34;image-20220823210550374&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;static ALWAYS_INLINE bool &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;callerAcceptsOptimizedReturn(const void *ra)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // fd 03 1d aa    mov fp, fp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // arm64 instructions are well-aligned&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (*(uint32_t *)ra == 0xaa1d03fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 返回true 需要优化 把release、rentain删掉&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说白了就是在返回值身上调用 &lt;code&gt;objc_autoreleaseReturnValue&lt;/code&gt;  方法时，runtime 将这个返回值 object 标记（储存在 TLS 中），然后直接返回这个 object（不调用 autorelease）；同时，在外部接收这个返回值的 &lt;code&gt;objc_retainAutoreleasedReturnValue&lt;/code&gt;  里，发现有之前的标记（TLS 中正好存了这个对象），那么直接返回这个 object（清楚之前的标记且不再调用 retain）。&lt;/p&gt;
&lt;p&gt;注意：TLS 相关的含义可以参考 [这里](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlYW5jaGVuc2UuZ2l0aHViLmlvLzIwMTgvMDkvMjAvZWFybGdyZXktc291cmNlLWNvZGUtcmVhZC0xLyNUTFM=&#34;&gt;EarlGrey 源码阅读（一） | SeanChense&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;但是这里有一个问题，以二进制的形式来加载代码并不是很常见，而且我们不但要加载它还要比较他尤其在 CPU 上并不是最优策略，所以这里还是有开销的，因此我们看下如何优化。&lt;/p&gt;
&lt;p&gt;同样执行流程，当执行完 &lt;code&gt; _objc_autoreleaseReturnValue&lt;/code&gt;  函数时候我们会获得一个返回地址，这个地址是一个指针，指向了被标记为 Autorelease 的对象。然后代码继续执行到 &lt;code&gt;_objc_retainAutoreleasedReturnValue&lt;/code&gt;  这里要进行 reatin，而被 reatain 的变量地址我们也可以拿到，所以只要比较这两个指针即可，这样一来我们也不再需要 mov 操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h5h0ws62g0j20n00gidg3.jpg&#34; alt=&#34;image-20220823213224122&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把原来的比较二进制数据改为比较指针。速度更快效率更高&lt;/li&gt;
&lt;li&gt;减少 mov 指令 减少 4 字节，二进制大小预计降低 2%&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这就是 Xcode14+iOS16 的编译期间优化，可以看出苹果也在帮我们完成 OKR 减少包体积，提高启动速度，增加代码执行效率，同时也能看出苹果在追求极致用户体验道路上所做的事情。本文部分翻译自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3ZpZGVvcy9wbGF5L3d3ZGMyMDIyLzExMDM2My8=&#34;&gt; Improve app size and runtime performance&lt;/span&gt;，同时也添加了自己的思考。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2022-06-13-WWDC2022-iOS%E7%AF%87%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/</guid>
            <title>WWDC2022-iOS篇完全解析</title>
            <link>https://oliverqueen.cn/2022-06-13-WWDC2022-iOS%E7%AF%87%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/</link>
            <category>iOS</category>
            <category>WWDC2022</category>
            <pubDate>Mon, 13 Jun 2022 17:05:31 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;Apple 于北京时间 2022 年 6 月 7 日举办了 WWDC2022，作为一名 Apple 开发者，不仅仅是为了保持技术敏感度，同时也希望在第一时间将新的内容呈现在大家眼前。本文对发布会内容做了整理归纳，并着重对 iOS 的新内容进行分析。希望这篇文章对大家有所帮助的同时也给我们的产品带来更多的可能性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h344hz8cl3j21g20pswhk.jpg&#34; alt=&#34;9690f67c1bc2cc62bd8729e5182ef19a&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;相对于 iOS15 来说，iOS16 的整体变化比较大，尤其是在我们看得见的地方，比如一些 UI 样式，交互行为和一些新增的功能。下面会按照 WWDC 的出厂顺序来介绍，其中包含了每个改动点的细节以及个人的理解和后面的展望。&lt;/p&gt;
&lt;h1 id=&#34;developer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#developer&#34;&gt;#&lt;/a&gt; Developer&lt;/h1&gt;
&lt;h2 id=&#34;xcode相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xcode相关&#34;&gt;#&lt;/a&gt; Xcode 相关&lt;/h2&gt;
&lt;p&gt;新版的 Xcode 同样也跟新了相关的内容，帮助开发者提高开发效率。&lt;/p&gt;
&lt;h4 id=&#34;方法吸顶以及代码提示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法吸顶以及代码提示&#34;&gt;#&lt;/a&gt; 方法吸顶以及代码提示&lt;/h4&gt;
&lt;p&gt;在之前的版本中，如果方法函数过多超了一屏展示，随着滚动函数名不可见，而新版的 Xcode 提供了类似 TableViewHeader 的效果，让方法名和实现名字固定在顶部，方便随时查看和复制。对小屏还是比较友好的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342t0jx5qj215h0u040m.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同样在使用初始化方法的时候如果是支持传入参数的初始化方法也会通过斜体来进行参数提示 (Swift 专属)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342t2czj8j20u00akt9s.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;xcode安装体积&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xcode安装体积&#34;&gt;#&lt;/a&gt; Xcode 安装体积&lt;/h4&gt;
&lt;p&gt;新版的 Xcode 优化了包体积，同时在进行安装的时候可以自定义需要哪些平台，需要哪些模拟器，笔者亲测相比之前的无脑把 AppleTV、Apple Watch、ipad 等都安装下来的情况来看，整个包体积减少了十几个 G 左右。对于小存储的 MacBook 是一个福音。&lt;/p&gt;
&lt;h4 id=&#34;xcode编译与调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xcode编译与调试&#34;&gt;#&lt;/a&gt; Xcode 编译与调试&lt;/h4&gt;
&lt;p&gt;根据苹果的描述新版 Xcode 优化项目的编译速度， &lt;code&gt;得益于更强大的并行编译能力，项目构建速度提升至高可达 25%&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改善前：先编译 framework 里的代码，然后生成 module，然后编译 app 里的代码，最终经过链接完成了构建。&lt;/li&gt;
&lt;li&gt;改善后：通过提高并发，缩短了构建的关键的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tn4mxij20yl0u0415.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同时单元测试的效率也提高了 30%&lt;/p&gt;
&lt;p&gt;Xcode14 还支持输出编译期间每个阶段的耗时和详细信息，相比之前的只能通过控制台的名字描述要直观不少。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342x91jz4j21910u0wir.jpg&#34; alt=&#34;编译耗时&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于 LLDB，现在还可以看到执行的过程和信息，对于一些需要长时间跑的命令较为友好，类似于 &lt;code&gt;--verbose&lt;/code&gt;  参数的含义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tgt828j21dg0323yy.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在新版的 Xcode 中除了 App 和系统的日志，同样支持 LLDB 的日志输出，当时在用 LLDB 调试的时候发生 Crash，便可以到相关路径中找到对应日志。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342t3pka9j21ay02kjrp.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;开发者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发者模式&#34;&gt;#&lt;/a&gt; 开发者模式&lt;/h2&gt;
&lt;p&gt;新版的 iOS 和 Watch OS 引入了新的开发者模式，原理和安卓的开发者模式类似，用苹果的话说是为了 &lt;code&gt;开发者模式可防止人们无意中在其设备上安装可能有害的软件，并减少开发者专用功能所暴露的攻击媒介。&lt;/code&gt; ，对于普通人来说确实可以提高安全性，之前只要是加入了开发者账号的手机都可以从 Xcode 编译运行第三方的 App，或者按照企业证书的签名包，而不这些手机主人都是无感的，现在需要手机主人通过多重确认来打开此功能后才可以进行安装非 &lt;code&gt;App Store&lt;/code&gt;  和 &lt;code&gt;Testfilght&lt;/code&gt;  渠道的包。&lt;/p&gt;
&lt;p&gt;但是这个对于开发者来说并不友好，首先是调试过程有会多增加一些步骤，而且在自动化测试方面，所有的手机都要先通过命令来打开开发者模式，并且根据苹果的说法，使用命令行进行开关要确保手机没有密码，否则会被拒绝运行。这里笔者也尝试在未打开 &lt;code&gt;开发者模式&lt;/code&gt; 的情况下进行 Xcode 编译，确实会失败。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342ygml7gj208y01kdfo.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3358k3glij207s087aaa.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;笔者预测该功能可能是为后续的第三方 App 市场做准备，因为现在虽然苹果不支持三方市场，但是普通用户还是可以通过一些三方网站安装重签包，同时他们并不知道这些包会带来潜在的危险，再加上欧盟一些反垄断政策的施压，所以苹果决定逐步开放三方应用市场，这应该就是第一步吧，先让用户意识到这样做可能会有一些危害。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;无论是美国的《美国选择与创新法案》、还是欧盟的《数字市场法案》，都要求苹果在App Store之外为用户提供额外的应用下载渠道。现在看来，苹果方面可能已经认为改变欧盟与美国的态度已经不太可能了，那么既然支持侧载或许无法避免，那么让用户更难发现侧载功能的入口就成为了备选项。&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;lockscreen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lockscreen&#34;&gt;#&lt;/a&gt; LockScreen&lt;/h1&gt;
&lt;h2 id=&#34;锁屏样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁屏样式&#34;&gt;#&lt;/a&gt; 锁屏样式&lt;/h2&gt;
&lt;p&gt;重新修改了锁屏的样式，在优化了时间显示的字体的同时也在锁屏上提供了更多能力，展示更多的信息，并加入了一些新的交互样式，通过在锁屏界面长按来进入锁屏界面的编辑状态，这个动画效果有点类似安卓的编辑桌面的效果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3430h983bg208a0gnhe7.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;iOS16 的锁屏样式可以大致分为两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态锁屏&lt;br /&gt;
比如在 Beta1 中可以看到的天气锁屏，依赖于天气 App 的信息，在点亮屏幕的一瞬间可以在锁定屏幕上动态显示天气的效果，比如雨雪风晴等，持续几秒钟后停止。笔者预测该能力后续会和 Livephoto 关联起来，实现用户自定义动态照片，毕竟现在的 livephoto 设置锁屏之后只有在长按才会触发播放，到时候长按的手势会和设置锁屏的手势冲突，所以 livephoto 必然会变成自动播放，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再长远预测的话也可能后续会把该能力开放给第三方 App 来定制动态锁屏的图片，类型于现在的天气 App。比如 QQ 音乐的专辑封面，歌手的演唱动图等。目前动态背景只支持锁屏界面，解锁后进入桌面便会停止，估计是处于性能考虑，动态桌面的可能性不大，应该仅限于锁屏。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tiho1zg207u0gou0z.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态照片&lt;br /&gt;
 iPhone 一直可以支持设置静态照片为锁屏壁纸，但是 iOS16 给静态照片锁屏提供了更多的玩法。&lt;/li&gt;
&lt;li&gt;照片随机切换：用户可以选定一组照片来作为锁屏壁纸，类似于幻灯片放映的样式，切换的频率可以设置为  &lt;code&gt;每次点亮&lt;/code&gt;  、  &lt;code&gt;每次点击&lt;/code&gt;  、  &lt;code&gt;每小时&lt;/code&gt;  、  &lt;code&gt;每天&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tuul3fg207z0gnqvl.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;照片景深：这个能力算是 iOS16 更新比较大的，通过机器学习模型将照片中的主体突出，可以遮挡在时间上，这里的主体可以是图片中任何可区分的物体，不仅仅是人像模式的照片。(在实际使用中，经常会失败，beta1 还是不够稳定)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzExYno5bmoyMGkyMTJ5YWNpLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h34311bz9nj20i212yaci.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#268px #578px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; &amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzI0OHBnOWoyMG11MTh1ZG1oLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h343248pg9j20mu18udmh.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#292px #574px&amp;quot; style=&amp;quot;zoom:43%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表情壁纸：将 IPhone 输入法中自带的表情进行一定规律的排列组合形成一张壁纸，最多支持输入六个表情。&lt;/li&gt;
&lt;li&gt;颜色壁纸：可以定义一些渐变颜色&lt;/li&gt;
&lt;li&gt;官方背景图壁纸。一些官方图片，支持景深效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MnRxcXZldWoyMGh3MTB3cTViLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tqqveuj20hw10wq5b.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#189px #390px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;锁屏组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁屏组件&#34;&gt;#&lt;/a&gt; 锁屏组件&lt;/h2&gt;
&lt;p&gt;iOS16 在锁屏界面可以展示更多的信息，其中就包括了锁屏小组件的加入。可以看到锁屏顶部分三个区域。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzJkMTZoc2oyMGllMTNhZGllLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3432d16hsj20ie13adie.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#270px #577px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶部：顶部区域是一个小的小组件区域，同时只能容纳一种小组件放置，🇳信息量有限。&lt;/li&gt;
&lt;li&gt;中部：中部区域是固定展示时间的区域，不可放置自定义小组件。只能展示时间信息，但是用户可自定义字体（包括阿拉伯文、天成文）和颜色。&lt;/li&gt;
&lt;li&gt;底部：底部区域为第二个小组件区域，范围较大，最多可容纳 4 个正方形（1*1）的小组件。同时支持排列组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前小组件的支持非常有限，目前只能将系统级的 App 的组件放上去，并不支持第三方 App，笔者尝试写了一个小组件，在主屏幕上可以正常添加，但是在锁定屏幕无法使用，猜测两个原因，一是目前是 Beta1 版可能还没有开放三方 App 的小组件，后续会陆续优化上来；第二个原因可能是处于性能或者其他因素考虑锁频组件和主屏组件不是一套逻辑，并不互通，但是通过查看 Xcode Beta 版本的代码，没有看到相关线索，不过 WWDC 也提到了，一些功能在后续会以 API 的形式像开发者提供。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MnR5bThndGoyMGk2MTMwNzdoLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tym8gtj20i613077h.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#266px #571px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;锁屏通知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁屏通知&#34;&gt;#&lt;/a&gt; 锁屏通知&lt;/h2&gt;
&lt;p&gt;iOS16 调整了锁屏的样式，增加了锁屏界面所展示的信息和交互，所以希望锁屏界面不要被大量的通知遮挡，因此从新调整了通知推送的位置和出现动画。iOS16 之前：通知铺满锁屏，同时新的通知会插到到最上面。从上往下依次排列。iOS16 之后：锁屏区域被限定在底部一小块区域，新来的通知会插到第一层，但是默认只展示 3 个（叠放的形式），想看更多的话跟之前一样，上拉即可。任何新增的通知，包括常驻的音乐播放调都是从下往上增长，通知增长到一定高度就会开始折叠，这样的好处就是可以给锁屏留出空间，不至于被占满。&lt;/p&gt;
&lt;p&gt;这样的修改确实可以让锁屏界面看的更整洁，且能让用户看到自己喜欢的锁屏画面，但是带来一个问题是用户想要查看通知内容时候需要多做一步上拉的操作，可能会稍微影响到 Push 的效果，比如点击率之类的指标。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3432t13nsg207m0go7wr.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;live-activities&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#live-activities&#34;&gt;#&lt;/a&gt; Live Activities&lt;/h2&gt;
&lt;p&gt;上面说的苹果弱化了通知展示的样式，默认采用了折叠策略给锁屏留出了更大的空间，但是为了让用户实时的追踪想要的信息便推出了  &lt;code&gt;Live Activities&lt;/code&gt;  。该控件可以常驻在锁屏界面，且能够实时刷更新的一个 UI 控件，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h342tq7i9qj214g0mg3zz.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;WWDC 上举了一个恰当的例子，比如我在追踪一场比赛，我需要知道实时的比分信息，但是又不方便拿着手机 app 观看直播，所以支持了  &lt;code&gt;Live Activities&lt;/code&gt;  能力的 App 可以再锁屏界面来实时展示比赛信息，同时不需要解锁屏幕，还有优步的信息。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzMxbGNyM2oyMHdjMG13bjFnLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h34331lcr3j20wc0mwn1g.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#321px #227px&amp;quot; style=&amp;quot;zoom: 33%;&amp;quot; /&amp;gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzM3NWh2ZWoyMHc2MG0wanZhLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h343375hvej20w60m0jva.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#334px #228px&amp;quot; style=&amp;quot;zoom: 35%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;这有点类似于锁屏的音乐播放条。同时 IOS16 针对音乐播放调界面也做 UI 优化，可以通过点击来实现封面图展开，同时背景设置为封面的魔法色，实现全屏沉浸式播放。但是笔者实测时候并未在 beta 版上成功使用该功能，SDK 中也没有看到相关代码。应该是在后续的版本开放更新。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzVsb3c4Z2oyMGhrMHhlNDFqLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3435low8gj20hk0xe41j.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#305px #580px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;专注模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#专注模式&#34;&gt;#&lt;/a&gt; 专注模式&lt;/h2&gt;
&lt;p&gt;苹果去年推出了  &lt;code&gt;专注模式&lt;/code&gt;  ，但是专注模式的切换需要到控制中心，或者设置菜单中进行切换，隐藏较深，在这次的 iOS16 中，苹果将专注模式和锁定屏幕绑定起来，也就是实现专注模式和锁定屏幕  &lt;code&gt;一一对应&lt;/code&gt;  的关系，一个锁屏对应一套锁屏组件和一个专注模式。&lt;/p&gt;
&lt;p&gt;比如我下图中两个锁定屏幕分别对应两种模式，工作模式可以设置只接受某些 App 的推送（比如企业微信。WeSing 等），忽略某些不重要的通知。右边的游戏模式可以吧比较关注的电量信息放到锁屏，同时屏蔽通知避免游戏误操作。关键是在 iOS16 上两种模式的切换只要在锁屏上长按就可以进行更改，方便很多。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzV0a3QxZWoyMGcyMHpnYWQxLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3435tkt1ej20g20zgad1.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#337px #744px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;信息app&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息app&#34;&gt;#&lt;/a&gt; 信息 App&lt;/h1&gt;
&lt;h2 id=&#34;消息编辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息编辑&#34;&gt;#&lt;/a&gt; 消息编辑&lt;/h2&gt;
&lt;p&gt;根据 WWDC 的描述，信息 App 带来的三个呼声最高的功能（应该是国外用户）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态编辑信息：对于已经发送出去的信息，如果发现错别字，可以直接在自己刚刚发送的对话气泡上进行修改，像这样，就不需要再撤回然后重新辑后发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3436v6e47g20go080e86.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标记未读（国内玩腻了的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息撤回（国内玩腻了的）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shareapi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shareapi&#34;&gt;#&lt;/a&gt; ShareApi&lt;/h2&gt;
&lt;p&gt;iOS15 中提到了  &lt;code&gt;SharePlay&lt;/code&gt;  的能力，但是当时该能力必须基于 FaceTime。在 iOS16 中，该能力已经扩展的信息 App 中。笔者认为，  &lt;code&gt;SharePlay&lt;/code&gt;  的能力后续会形成套单独的 SDK（类似于 AirPlay 的 SDK），供第三方 App 接入，且不依赖 Facetim 和信息等系统 App。这对于音视频的 App 是有比较大的帮助，可以一起听歌、看视频。但是对于版权的管理要更为严格。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM3cmhidXc2Y2oyMGkyMGx3YWJ3LmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h37rhbuw6cj20i20lwabw.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#389px #472px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;语音输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语音输入&#34;&gt;#&lt;/a&gt; 语音输入&lt;/h1&gt;
&lt;p&gt;苹果在很早的版本就支持语音输入，但是有一个弊端就是语音输入和键盘输入是两个独立的过程。而在 iOS16 中输入文本时，可在语音和触控这两种方式间无缝切换。无需中断听写，照样可用键盘打字、轻点文本栏、移动光标，或插入快速输入建议。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h37rautdseg20go080e89.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;coreml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#coreml&#34;&gt;#&lt;/a&gt; CoreML&lt;/h1&gt;
&lt;h2 id=&#34;livetext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#livetext&#34;&gt;#&lt;/a&gt; LiveText&lt;/h2&gt;
&lt;p&gt;CoreML 是苹果早期发布的机型学习 API，通过他可训练一些人工智能相关的东西，其中 iOS15 推出的  &lt;code&gt;LiveText&lt;/code&gt;  便是其中之一，他可以让我们对图片里面的一些文字做提取操作，在 iOS16 中，apple 增强了  &lt;code&gt;LiveText&lt;/code&gt;  的能力，除了静态图片，还加入了视频帧的支持。  &lt;code&gt;Live Text in Video&lt;/code&gt;  , 根据 WWDC 的描述，在播放视频的时候进行暂停，便可以提取当前帧上的文字内容。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h37rfclnkvj21mp0u0dkd.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选中后除了对文字进行复制操作外，iOS16 还提供了一些其他的快捷功能，其中包括汇率转换、翻译。更重要的是，实况文本的 API 已经开发给开发者使用，很快我们就能从 app 的照片和视频中提取相关的文字信息。&lt;/p&gt;
&lt;h2 id=&#34;visual-look-up&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#visual-look-up&#34;&gt;#&lt;/a&gt; Visual Look Up&lt;/h2&gt;
&lt;p&gt;也是苹果之前基于机器学习提供的一个能力，可以检测照片中的物体，来识别是什么东西，在 iOS16 中，该能力被大幅加强，同时集成到了照片 App 中。用户可以打开一个照片，通过长按，把照片主体拖动出来到相应的 App 中。（拖出的图片为 png 图片）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3437xq1cag207n0gnkk7.gif&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该能力已经提供独立的 API，目前的 Apple 的  &lt;code&gt;可立拍&lt;/code&gt;   App 里面将 Core ML 的能力运用到视频处理中，大家可以下载体验。&lt;/p&gt;
&lt;h1 id=&#34;apple-pay&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apple-pay&#34;&gt;#&lt;/a&gt; Apple Pay&lt;/h1&gt;
&lt;h2 id=&#34;apple-pay-later&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apple-pay-later&#34;&gt;#&lt;/a&gt; Apple pay later&lt;/h2&gt;
&lt;p&gt;类似于国内的京东白条、蚂蚁花呗，不同的是   &lt;code&gt;Apple pay later&lt;/code&gt;   只提供 4 周或者 6 周的分期还款，且无息。&lt;/p&gt;
&lt;h2 id=&#34;钥匙共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#钥匙共享&#34;&gt;#&lt;/a&gt; 钥匙共享&lt;/h2&gt;
&lt;p&gt;通过常用的通讯类 app，安全地共享钱包 app 中的钥匙（智能家居钥匙，汽车钥匙等）。你可以决定钥匙的使用地点和时间，并能随时撤销。&lt;/p&gt;
&lt;h2 id=&#34;追踪订单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#追踪订单&#34;&gt;#&lt;/a&gt; 追踪订单&lt;/h2&gt;
&lt;p&gt;可以查看票据，还能直接在钱包 app 中追踪你的 Apple Pay 订单。商户可以将订单的相续信息推送到消费者的钱包里&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzhlcnF1ZmoyMGVnMHNrZ243LmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3438erqufj20eg0skgn7.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#304px #601px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;apple-map&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apple-map&#34;&gt;#&lt;/a&gt; Apple Map&lt;/h1&gt;
&lt;h2 id=&#34;增加途经点规划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增加途经点规划&#34;&gt;#&lt;/a&gt; 增加途经点规划&lt;/h2&gt;
&lt;p&gt;国内高德百度已经玩了很久的功能，在导航的时候可以在起点和终点之间增加途经点。快车顺风车经常要用的功能。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzhzZjJlZ2oyMGR5MHQwbjA4LmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3438sf2egj20dy0t0n08.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#297px #618px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;实时公交信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实时公交信息&#34;&gt;#&lt;/a&gt; 实时公交信息&lt;/h2&gt;
&lt;p&gt;可以查看公交出行的公交信息，包括公交时间，公交线路，公交价格等，同样也是国内使用了很久的能力。&lt;/p&gt;
&lt;h2 id=&#34;共享交通工具查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享交通工具查看&#34;&gt;#&lt;/a&gt; 共享交通工具查看&lt;/h2&gt;
&lt;p&gt;可以在地图上看到附近的共享汽车、共享滑板车、共享单车等。同样也是国能很多共享单车厂商实现了的能力。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDM0MzliM21lb2oyMGhxMHcwNzZxLmpwZw==&#34;&gt;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3439b3meoj20hq0w076q.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;image#307px #554px&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;apple-tv-amp-apple-news&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apple-tv-amp-apple-news&#34;&gt;#&lt;/a&gt; Apple TV &amp;amp;amp; Apple News&lt;/h1&gt;
&lt;p&gt;Apple TV 和 Apple News 是两个不同的东西，之所以放到一起说是因为他们在 iOS16 中提供了相同的能力，都新增了体育板块，可以每周免费观看两场比赛，同时可以和 iPhone 联动，在锁屏上展示   &lt;code&gt;Live Activities&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;家长控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#家长控制&#34;&gt;#&lt;/a&gt; 家长控制&lt;/h1&gt;
&lt;p&gt;家长控制的粒度更细，除了是否可以启动某个 App，还可以详细控制某个 App 的权限，比如禁止某个 App 访问摄像头权限，来避免儿童色情的问题。之后的开发者可能要在权限控制这里做额外的判断。除了允许、拒绝、未决定外，新增了家长控制的枚举条件。&lt;/p&gt;
&lt;h1 id=&#34;homekit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homekit&#34;&gt;#&lt;/a&gt; HomeKit&lt;/h1&gt;
&lt;p&gt;接入了更多智能家居品牌。同时和其他主流品牌一起在 HomeKit 的基础上创立了新的智能家居协议标准   &lt;code&gt;matter&lt;/code&gt;  。可以让智能家居跨平台协同操作。目前已经有一部分厂商支持了   &lt;code&gt;matter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h3439rmf5bj21sq0sqtcw.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;crarplay&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crarplay&#34;&gt;#&lt;/a&gt; CrarPlay&lt;/h1&gt;
&lt;p&gt;苹果也看出了现在汽车发展的趋势就是大屏幕，而且一辆车往往不止一块屏幕，所以在 iOS16 上，苹果针对这个现象重新优化了 CraePlay，新的 CarPlay 不仅仅可以通过车机来控制 iPhone，还可以通过 iPhone 来设置车机的主题。 支持新 CarPlay 的车型将于 2023 年下半年生产，前期支持的车型为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h343a6xc3bj21vm0tmtbn.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;新一代 CarPlay 车载将出类拔萃的 iPhone 体验带入车内。它可为车内所有的驾驶员屏幕提供内容，包括仪表盘在内，让你的爱车和 iPhone 在体验上融为一体。车载的收音机、空调等功能可直接通过 CarPlay 车载来控制。而多种个性化选项，包括小组件以及精选的仪表盘设计，更带来独特的驾驶体验。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h343ak4evxj221o0t60ya.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;以上就是 WWDC 中关于 iOS 的相关内容，笔者第一时间更新了 iOS16 的 Beta 版本，但也遇到一些问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS16 官方最低支持到 iPhone 8 系列，但是 iPhone 8 更新后，很多功能无法使用，建议使用 iPhoneXs 以及以上机型体验。&lt;/li&gt;
&lt;li&gt;WWDC 中提到的大部分功能现在都无法在 Beta1 中体验。且最新的 XcodeBeta 中也没有相关的新 Api，不过 WWDC 上也说了，iOS16 上的功能会在后续稍晚的时候以 API 的形式提供。&lt;/li&gt;
&lt;li&gt;Beta1 耗电发热非常夸张，尤其是在锁屏界面。可能还需相关优化，目前手机必须连着电源使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文中提到得到一些功能更新虽然和国内开发者关系不大，但是毕竟都是业务层面的东西，底层都是通用的，毕竟技术无国界，也希望能将更新的技术用到自己的项目中，提高用户的产品体验，向用户展示出我们的专业能力和创新能力。希望这篇文章能对 iOS 开发者和产品同学在后续的技术、产品规划上有一定的帮助。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2022-05-26-Apple%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
            <title>Apple登录流程详解</title>
            <link>https://oliverqueen.cn/2022-05-26-Apple%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
            <category>iOS</category>
            <category>Apple登录</category>
            <pubDate>Thu, 26 May 2022 10:53:20 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;1背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1背景&#34;&gt;#&lt;/a&gt; 1：背景&lt;/h2&gt;
&lt;p&gt;2019 年苹果推出 苹果登录（Sign in with Apple）方式，要求 2020 年 4 月之后运行在 iOS13 及以上系统的 APP 如果使用第三方或社交登录服务（如 Facebook、谷歌、 Twitter、Linkedln 或亚马逊等），必须向用户提供 “以苹果账号登录” 服务的选项。其中苹果的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uY2RuanNvbi5jb20vdHZhMS5zaW5haW1nLmNuL2xhcmdlL2U2YzlkMjRlZ3kxaDJmempqd3d1YWoyMTY0MHA0NDRkLmpwZw==&#34;&gt;审核细则 4.8&lt;/span&gt; 也明确的规定了这一点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2lmep99kij21ns0rkaba.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=&amp;quot;#dd0000&amp;quot;&amp;gt; 不过需要注意的一点是腾讯系列的产品如果只是使用微信、QQ 登录并不算第三方登录，所以可以添加 AppleID 登录方式。&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2fzjjwwuaj21640p444d.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2前置配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2前置配置&#34;&gt;#&lt;/a&gt; 2：前置配置&lt;/h2&gt;
&lt;h4 id=&#34;21-xcode工程配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-xcode工程配置&#34;&gt;#&lt;/a&gt; 2.1 Xcode 工程配置&lt;/h4&gt;
&lt;p&gt;选中工程 trager，在 capabilities 中添加 AppleID 登录的能力&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g28b5w8aj21960u0769.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-开发者账号配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-开发者账号配置&#34;&gt;#&lt;/a&gt; 2.2 开发者账号配置&lt;/h4&gt;
&lt;p&gt;基于授权码的后端验证方式需要此步骤，如果使用 JWT 验证方式则不依赖此步骤，不过建议按顺序看完多做了解。&lt;/p&gt;
&lt;p&gt;该步骤的最终目的是获取用于校验客户端身份的所需内容，其中包括以下三个内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成一个用于校验客户端身份的密钥文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 KeyID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 iss（TeamID）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;font color=&amp;quot;#dd0000&amp;quot;&amp;gt; 注意：该步骤需要登录 Apple 开发者账号并对其进行功能的配置、开启、以及描述文件更新等操作，可能需要证书管理团队或者有相关权限的人员来处理，并由他们将对应信息输出 &amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;步骤一能力开启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤一能力开启&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤一：能力开启&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;进入开发者账号，选择需要支持 AppleID 登录能力的应用并进入打开其 AppleID 登录的功能&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g335dozbj219o0kiwg6.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g36gha89j216x0u0gnx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;步骤二更新profile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤二更新profile&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤二：更新 profile&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;对 app 的任何更改都会导致现有的 profile 文件失效，所以需要重新生成 profile 描述文件。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g38wg6kij20ia08qmxk.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
按照如下路径操作，点进已经 &lt;code&gt;invalid&lt;/code&gt;  的描述文件并重新生成&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3em4u2oj21fq0lc75x.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;步骤三生成密钥文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤三生成密钥文件&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤三：生成密钥文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;进入如下界面点击 &lt;code&gt;加号&lt;/code&gt; 进行生成&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3hh2cz2j216m0ms406.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;填完并勾选 &lt;code&gt;Sigin with apple&lt;/code&gt;  后点击右侧的 &lt;code&gt;Configure&lt;/code&gt;  进行配置，在配置页面选择需要开启苹果登录的 app 并保存，然后回到上一页并开始注册&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3kyolw0j21m10u043i.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3ps0bfjj21v70u0td1.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3qw6gvmj22120s0dkq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最终注册成功后会有 KeyID、TeamID 和可供下载的密钥文件&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3umbtqzj21wg0s4gqg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;密钥文件格式为.p8 实际是文本文件&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g3yn74llj212g0badht.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=&amp;quot;#dd0000&amp;quot;&amp;gt; 注意：密钥文件只能被下载一次，下载后保存在安全的地方，丢了的话只能重新申请了 &amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;3登录流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3登录流程&#34;&gt;#&lt;/a&gt; 3：登录流程&lt;/h2&gt;
&lt;p&gt;登录流程分两大块，一个是客户端部分，一个是后端部分，其中后端部分有两种校验方式 &lt;code&gt;基于授权码的后端验证&lt;/code&gt; 、 &lt;code&gt;基于JWT的算法验证&lt;/code&gt; ，稍后会一一讲解。总体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/e6c9d24egy1h2g4un5dizj20ve0u0dip.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;31-客户端侧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-客户端侧&#34;&gt;#&lt;/a&gt; 3.1 客户端侧&lt;/h4&gt;
&lt;h5 id=&#34;步骤一授权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤一授权&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤一：授权&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;对于客户端来说 AppleID 登录与传统的三方登录流程一样，分为 &lt;code&gt;调用接口&lt;/code&gt; 与 &lt;code&gt;回调信息获取&lt;/code&gt; 两步，唯一不同点是苹果登录的 API 是在 iOS SDK 内部封装，只用导入对应头文件即可&lt;br /&gt;
 &lt;code&gt;#import &amp;lt;AuthenticationServices/AuthenticationServices.h&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于登录入口，苹果对 AppleID 登录的 UI 有严格的限制，因此专门提供了提供了一套继承于 &lt;code&gt;UIControl&lt;/code&gt;  等控件来供开发者使用 &lt;code&gt;ASAuthorizationAppleIDButton&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ASAuthorizationAppleIDButton * appleIDBtn = [ASAuthorizationAppleIDButton buttonWithType:ASAuthorizationAppleIDButtonTypeDefault style:ASAuthorizationAppleIDButtonStyleWhite];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;appleIDBtn.frame = &lt;span class=&#34;built_in&#34;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[appleIDBtn addTarget:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; action:&lt;span class=&#34;keyword&#34;&gt;@selector&lt;/span&gt;(didAppleIDBtnClicked) forControlEvents:&lt;span class=&#34;built_in&#34;&gt;UIControlEventTouchUpInside&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.view addSubview:appleIDBtn];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中按钮的 &lt;code&gt;文案类型&lt;/code&gt; 和 &lt;code&gt;UI风格&lt;/code&gt; 可以通过枚举进行配置&lt;br /&gt;
 &lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//  文案类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef &lt;span class=&#34;type&#34;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;NSInteger&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonType&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonTypeSignIn&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonTypeContinue&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonTypeSignUp&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;API_AVAILABLE&lt;/span&gt;(ios(13.2), macos(10.15.1), tvos(13.1)) &lt;span class=&#34;type&#34;&gt;API_UNAVAILABLE(watchos)&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonTypeDefault&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonTypeSignIn&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;type&#34;&gt;NS_SWIFT_NAME&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButton&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;ButtonType&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;API_AVAILABLE&lt;/span&gt;(ios(13.0), macos(10.15), tvos(13.0)) &lt;span class=&#34;type&#34;&gt;API_UNAVAILABLE&lt;/span&gt;(watchos);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//  &lt;span class=&#34;type&#34;&gt;UI&lt;/span&gt;风格&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef &lt;span class=&#34;type&#34;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;NSInteger&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonStyle&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonStyleWhite&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonStyleWhiteOutline&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButtonStyleBlack&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;type&#34;&gt;NS_SWIFT_NAME&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDButton&lt;/span&gt;.&lt;span class=&#34;type&#34;&gt;Style&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;API_AVAILABLE&lt;/span&gt;(ios(13.0), macos(10.15), tvos(13.0)) &lt;span class=&#34;type&#34;&gt;API_UNAVAILABLE&lt;/span&gt;(watchos);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 但是并不推荐这种方式使用，原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：固定 UI 无法满足业务的定制化需求&lt;/li&gt;
&lt;li&gt;2：文案固定，多语言配置需要在单独的地方去配置文案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以建议自己写 UI，直接在点击事件中调用 AppleID 的相关 API 进行授权登陆操作，具体代码为，其中 &lt;code&gt;ASAuthorizationAppleIDRequest&lt;/code&gt;  为是否使用 Keychain 信息，如果如果 KeyChain 里面也有登录信息的话，可以直接使用里面保存的用户名和密码进行登录。可以根据实际业务需求来&lt;br /&gt;
 &lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;KINFO&lt;/span&gt;(@&lt;span class=&#34;string&#34;&gt;&amp;quot;[AppleLoginWrapper]开始苹果登录鉴权&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;@available&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13.0&lt;/span&gt;, &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProvider&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;provider &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProvider&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDRequest&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;request &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [provider createRequest];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    request.requestedScopes &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; @[ &lt;span class=&#34;type&#34;&gt;ASAuthorizationScopeFullName&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;ASAuthorizationScopeEmail&lt;/span&gt; ]; &lt;span class=&#34;comment&#34;&gt;//请求的用户信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationPasswordRequest&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; keychainRequest &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[[&lt;span class=&#34;type&#34;&gt;ASAuthorizationPasswordProvider&lt;/span&gt; alloc] &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;] createRequest];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ASAuthorizationController&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;vc &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;ASAuthorizationController&lt;/span&gt; alloc] initWithAuthorizationRequests:@[ request ,keychainRequest]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vc.delegate &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vc.presentationContextProvider &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [vc performRequests];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Fallback on earlier versions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;KINFO&lt;/span&gt;(@&lt;span class=&#34;string&#34;&gt;&amp;quot;[AppleLoginWrapper]iOS系统低于13&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;步骤二信息回调&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤二信息回调&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤二：信息回调&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;依赖的两个 delegate&lt;br /&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark- 代理 ASAuthorizationControllerDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  其中`authorization.credential`包含了Token，用户ID等授权所需信息，可上报到后台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(&lt;span class=&#34;built_in&#34;&gt;NSError&lt;/span&gt; *)error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; mark- 代理ASAuthorizationControllerPresentationContextProviding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//  展示在哪个Window上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.view.window;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;步骤三用户id状态校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤三用户id状态校验&#34;&gt;#&lt;/a&gt; &lt;strong&gt;步骤三：用户 ID 状态校验&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;防止用户注销 AppleId 或 停止使用 Apple ID 的状态处理&lt;br /&gt;
 &lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&#34;type&#34;&gt;UIApplication&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;)application didFinishLaunchingWithOptions:(&lt;span class=&#34;type&#34;&gt;NSDictionary&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Override point for customization after application launch.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;@available&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13.0&lt;/span&gt;, &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 注意 存储用户标识信息需要使用钥匙串来存储 这里使用NSUserDefaults 做的简单示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; userIdentifier &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] valueForKey:@&lt;span class=&#34;string&#34;&gt;&amp;quot;appleID&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (userIdentifier) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProvider&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; appleIDProvider &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [[&lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProvider&lt;/span&gt; alloc] &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [appleIDProvider getCredentialStateForUserID:userIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                              completion:&lt;span class=&#34;operator&#34;&gt;^&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProviderCredentialState&lt;/span&gt; credentialState, &lt;span class=&#34;type&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; _Nullable error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (credentialState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProviderCredentialAuthorized&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 授权状态有效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProviderCredentialRevoked&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProviderCredentialNotFound&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 未登录授权，直接弹出登录页面，引导用户登录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ASAuthorizationAppleIDProviderCredentialTransferred&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// 授权AppleID提供者凭据转移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;32-sever侧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-sever侧&#34;&gt;#&lt;/a&gt; 3.2 Sever 侧&lt;/h4&gt;
&lt;p&gt;基于上面流程图，Sever 侧校验 Token 有效性的方式有两种：&lt;/p&gt;
&lt;h5 id=&#34;方式一基于授权码的后端验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式一基于授权码的后端验证&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方式一：基于授权码的后端验证&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;后端在收到客户端传递的包含 token 的信息后进行验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建 client_secret&lt;br /&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-----BEGIN PRIVATE KEY-----&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BASE64编码后的密钥 (步骤&lt;span class=&#34;number&#34;&gt;2.2&lt;/span&gt;中获得)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----END PRIVATE KEY-----&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public  byte&lt;span class=&#34;literal&#34;&gt;[]&lt;/span&gt; read&lt;span class=&#34;constructor&#34;&gt;Key()&lt;/span&gt; throws Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String temp = &lt;span class=&#34;string&#34;&gt;&amp;quot;密钥文件中间的编码字符串&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;Base64&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;decode&lt;span class=&#34;constructor&#34;&gt;Base64(&lt;span class=&#34;params&#34;&gt;temp&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;构建client_secret关键代码：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String client_id = &lt;span class=&#34;string&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 被授权的APP ID(步骤2.2中获得)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Object&amp;gt; header = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;&lt;span class=&#34;literal&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;header.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;kid&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;密钥id&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 参考后台配置(步骤2.2中获得)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Object&amp;gt; claims = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;&lt;span class=&#34;literal&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;claims.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;team id&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 参考后台配置 team id(步骤2.2中获得)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;long now = &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;current&lt;span class=&#34;constructor&#34;&gt;TimeMillis()&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt; / &lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;claims.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;iat&amp;quot;&lt;/span&gt;, now);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;claims.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, now + &lt;span class=&#34;number&#34;&gt;86400&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt; * &lt;/span&gt;&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 最长半年，单位秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;claims.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;aud&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;https://appleid.apple.com&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;claims.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;, client_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PKCS8EncodedKeySpec pkcs8EncodedKeySpec = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;constructor&#34;&gt;PKCS8EncodedKeySpec(&lt;span class=&#34;params&#34;&gt;readKey&lt;/span&gt;()&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;KeyFactory keyFactory = &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;KeyFactory&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;get&lt;span class=&#34;constructor&#34;&gt;Instance(&lt;span class=&#34;string&#34;&gt;&amp;quot;EC&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PrivateKey privateKey = keyFactory.generate&lt;span class=&#34;constructor&#34;&gt;Private(&lt;span class=&#34;params&#34;&gt;pkcs8EncodedKeySpec&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String client_secret = &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;Jwts&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;builder&lt;span class=&#34;literal&#34;&gt;()&lt;/span&gt;.set&lt;span class=&#34;constructor&#34;&gt;Header(&lt;span class=&#34;params&#34;&gt;header&lt;/span&gt;)&lt;/span&gt;.set&lt;span class=&#34;constructor&#34;&gt;Claims(&lt;span class=&#34;params&#34;&gt;claims&lt;/span&gt;)&lt;/span&gt;.sign&lt;span class=&#34;constructor&#34;&gt;With(SignatureAlgorithm.ES256, &lt;span class=&#34;params&#34;&gt;privateKey&lt;/span&gt;)&lt;/span&gt;.compact&lt;span class=&#34;literal&#34;&gt;()&lt;/span&gt;;       &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;验证客户端 Token&lt;br /&gt;
&lt;figure class=&#34;highlight qml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;url&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;https://appleid.apple.com/auth/token&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// POST 请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HttpSynClient client = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HttpSynClient(&lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; form = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;form.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;, client_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;form.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;, client_secret);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;form.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;, code);form.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;authorization_code&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;form.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;redirect_uri&amp;quot;&lt;/span&gt;, redirectUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HttpResponse result = client.excutePost(&lt;span class=&#34;built_in&#34;&gt;url&lt;/span&gt;, form);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;上述步骤结束后即可将结果回调给客户端，进行登录或者是错误处理
&lt;ul&gt;
&lt;li&gt;成功示例&lt;br /&gt;
 &lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;a0996b16cfb674c0eb0d29194c880455b.0.nsww.5fi5MVC-i3AVNhddrNg7Qw&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;token_type&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;Bearer&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;expires_in&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;3600&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;refresh_token&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;r9ee922f1c8b048208037f78cd7dfc91a.0.nsww.KlV2TeFlTr7YDdZ0KtvEQQ&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;id_token&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;eyJraWQiOiJBSURPUEsxIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY29tLnNreW1pbmcuYXBwbGVsb2dpbmRlbW8iLCJleHAiOjE1NjU2NjU1OTQsImlhdCI6MTU2NTY2NDk5NCwic3ViIjoiMDAwMjY2LmRiZTg2NWIwYWE3MjRlMWM4ODM5MDIwOWI5YzdkNjk1LjAyNTYiLCJhdF9oYXNoIjoiR0ZmODhlX1ptc0pqQ2VkZzJXem85ZyIsImF1dGhfdGltZSI6MTU2NTY2NDk2M30.J6XFWmbr0a1hkJszAKM2wevJF57yZt-MoyZNI9QF76dHfJvAmFO9_RP9-tz4pN4ua3BuSJpUbwzT2xFD_rBjsNWkU-ZhuSAONdAnCtK2Vbc2AYEH9n7lB2PnOE1mX5HwY-dI9dqS9AdU4S_CjzTGnvFqC9H5pt6LVoCF4N9dFfQnh2w7jQrjTic_JvbgJT5m7vLzRx-eRnlxQIifEsHDbudzi3yg7XC9OL9QBiTyHdCQvRdsyRLrewJT6QZmi6kEWrV9E21WPC6qJMsaIfGik44UgPOnNnjdxKPzxUAa-Lo1HAzvHcAX5i047T01ltqvHbtsJEZxAB6okmwco78JQA&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;失败示例&lt;br /&gt;
 &lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;invalid_client&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;方式二基于jwt验证原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式二基于jwt验证原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方式二：基于 JWT 验证原理&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取苹果公钥，并保存&lt;/p&gt;
&lt;p&gt;用到公钥接口  &lt;code&gt;https://appleid.apple.com/auth/keys&lt;/code&gt; &lt;br /&gt;
 返回值样例&lt;br /&gt;
 &lt;figure class=&#34;highlight prolog&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;kty&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;kid&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;AIDOPK1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;sig&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;RS256&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;lxrwmuYSAsTfn-lUu4goZSXBD9ackM9OJuwUVQHmbZo6GW4Fu_auUdN5zI7Y1dEDfgt7m7QXWbHuMD01HLnD4eRtY-RNwCWdjNfEaY_esUPY3OVMrNDI15Ns13xspWS3q-13kdGv9jHI28P87RvMpjz_JCpQ5IM44oSyRnYtVJO-320SB8E2Bw92pmrenbp67KRUzTEVfGU4-obP5RZ09OxvCr1io4KJvEOjDJuuoClF66AT72WymtoMdwzUmhINjR0XSqK6H0MdWsjw7ysyd_JhmqX5CAaT9Pgi0J8lU_pcl215oANqjy7Ob-VMhug9eGyxAWVfu_1u6QJKePlE-w&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;AQAB&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证客户端的 Token 有效性&lt;/p&gt;
&lt;p&gt;客户端会传以下几个值给服务端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;userID：授权的用户唯一标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;email、fullName：授权的用户资料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;authorizationCode：授权 code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;identityToken：授权用户的 JWT 凭证&lt;br /&gt;
示例 identityToken：授权用户的 JWT 凭证&lt;br /&gt;
 &lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;eyJraWQiOiJBSURPUEsxIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY29tLmZ1bi5BcHBsZUxvZ2luIiwiZXhwIjoxNTY4NzIxNzY5LCJpYXQiOjE1Njg3MjExNjksInN1YiI6IjAwMDU4MC4wODdjNTU0ZGNlMzU0NjZmYTg1YzVhNWQ1OTRkNTI4YS4wODAxIiwiY19oYXNoIjoiel9KY0RscFczQjJwN3ExR0Nna1JaUSIsImF1dGhfdGltZSI6MTU2ODcyMTE2OX0.WmSa4LzOzYsdwTqAJ_8mub4Ls3eyFkxZoGLoy-U7DatsTd_JEwAs3_OtV4ucmj6ENT3153iCpYY6vBxSQromOMcXsN74IrUQew24y_zflN2g4yU8ZVvBCbTrR_6p9f2fbeWjZiyNcbPCha0dv45E3vBjyHhmffWnk3vyndBBiwwuqod4pyCZ3UECf6Vu-o7dygKFpMHPS1ma60fEswY5d-_TJAFk1HaiOfFo0XbL6kwqAGvx8HnraIxyd0n8SbBVxV_KDxf15hdotUizJDW7N2XMdOGQpNFJim9SrEeBhn9741LWqkWCgkobcvYBZsrvnUW6jZ87SLi15rvIpq8_fw&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
token 被解密后分为三个部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;header: 包括了 key id 与加密算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;payload:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iss: 签发机构，苹果&lt;/li&gt;
&lt;li&gt;aud: 接收者，目标 app&lt;/li&gt;
&lt;li&gt;exp：过期时间&lt;/li&gt;
&lt;li&gt;iat: 签发时间&lt;/li&gt;
&lt;li&gt;sub: 用户 id&lt;/li&gt;
&lt;li&gt;c_hash: 一个哈希数列&lt;/li&gt;
&lt;li&gt;auth_time: 签名时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;signature: 用于验证 JWT 的签名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Token 验证原理：&lt;/p&gt;
&lt;p&gt;因为 idnetityToken 使用非对称加密 RSASSA【RSA 签名算法】 和 ECDSA【椭圆曲线数据签名算法】，当验证签名的时候，利用公钥来解密 Singature，当解密内容与 base64UrlEncode (header) + “.” + base64UrlEncode (payload) 的内容完全一样的时候，表示验证通过。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;防止中间人攻击原理：&lt;/p&gt;
&lt;p&gt;该 token 是苹果利用私钥生成的一段 JWT，并给出公钥我们对 token 进行验证，由于中间人并没有苹果的私钥，所以它生成出来的 token 是没有办法利用苹果给出的公钥进行验证的，确保的 token 的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-总结&#34;&gt;#&lt;/a&gt; 4 总结&lt;/h2&gt;
&lt;p&gt;目前使用的是基于授权码的后端验证方式，每次收到客户端登录请求后都会像苹果服务器发送 post 请求来验证，导致受网络影响较大。如果改成第一种方式后，除了获取公钥外不再依赖网络请求，可降低网络异常情况带来的损失。但是服务端要定期刷新公钥，防止公钥变化带来的验证失败&lt;/p&gt;
&lt;h2 id=&#34;5-参考文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-参考文档&#34;&gt;#&lt;/a&gt; 5 参考文档&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIub2t0YS5jb20vYmxvZy8yMDE5LzA2LzA0L3doYXQtdGhlLWhlY2staXMtc2lnbi1pbi13aXRoLWFwcGxl&#34;&gt;https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2NuL3NpZ24taW4td2l0aC1hcHBsZS8=&#34;&gt;https://developer.apple.com/cn/sign-in-with-apple/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vc2lnbmlud2l0aGFwcGxlcmVzdGFwaS9nZW5lcmF0ZV9hbmRfdmFsaWRhdGVfdG9rZW5z&#34;&gt;https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://oliverqueen.cn/2021-05-05-iOS-Crash%E9%98%B2%E6%8A%A4%E4%BD%A0%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E4%B8%8B%E7%AF%87/</guid>
            <title>iOS Crash防护你看这个就够了-下篇</title>
            <link>https://oliverqueen.cn/2021-05-05-iOS-Crash%E9%98%B2%E6%8A%A4%E4%BD%A0%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E4%B8%8B%E7%AF%87/</link>
            <category>iOS</category>
            <category>Crash防护</category>
            <pubDate>Wed, 05 May 2021 10:23:42 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;0x1-previously&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x1-previously&#34;&gt;#&lt;/a&gt; 0x1: Previously&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://oliverqueen.cn/2021/05/03/iOS%20Crash%E9%98%B2%E6%8A%A4%E4%BD%A0%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E4%B8%8A%E7%AF%87/&#34;&gt;上篇&lt;/a&gt; 中讲到了 Crash 处理流程分为四个环节，也分析了 Crash 防护的方法，本章来讲下其余三个环节。&lt;/p&gt;
&lt;h1 id=&#34;0x2-crash的拦截&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x2-crash的拦截&#34;&gt;#&lt;/a&gt; 0x2: Crash 的拦截&lt;/h1&gt;
&lt;p&gt;所有的未被防护住的 Crash 最终会走到这里，在这里我们必须要保证拦截的  &lt;code&gt;全面性&lt;/code&gt; 、 &lt;code&gt;稳定性&lt;/code&gt; 尽可能多的拦截到所有类型的异常，同时拦截逻辑本身不能产生异常。那么我们需要通过以下几个方面去考虑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdingyue.ws.126.net%2F2020%2F0504%2Fa0ef0444j00q9saus002gc000xc00irm.jpg&amp;amp;refer=http%3A%2F%2Fdingyue.ws.126.net&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=jpeg?sec=1622826899&amp;amp;t=2b1dd016c1ac10c52097431b7fa9af7d&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;i-crash类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#i-crash类型&#34;&gt;#&lt;/a&gt; I: Crash 类型&lt;/h2&gt;
&lt;p&gt;和多数操作系统一样，iOS 的异常也基本分为  &lt;code&gt;用户层&lt;/code&gt;   &lt;code&gt;系统底层&lt;/code&gt;   &lt;code&gt;信号&lt;/code&gt;  这三个类别，接下来我们看下每种异常都做了哪些事情&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7dqhr2e2j31860qg79l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mach Exception &amp;lt;br&amp;gt;&lt;br /&gt;
Mach 异常，分为两种情况，第一种是本身就是硬件层面或者系统层面的异常，这个大家比较好理解，因为 mach 是微内核，所以底层的内核级别的包括硬件的异常都是 mach 异常。另一种是 iOS 系统独有的逻辑或者说是苹果独有的。就是用户层面的异常也都首先下沉到 mach 层再发出来，也等于是另一种意义上的 mach 异常。苹果官方文档上写的是为了统一机制才做了这样的处理，但是没有说具体原因。他的触发流程大概为下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7yp0q2aaj30f60uqtaf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我去看 Runtime 的源码进一步证明了这个说法，runloop 中大量使用这种方式监听 mach 异常消息，一旦 Crash 随时准备打破循环，因为系统也需要监听 crash，统一出口将对监听来说对系统将变得非常方便。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7yvd5gpvj30pc02mt9o.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;根据代码上下文可以判断出，苹果会监听统一的异常端口，在出现异常后进行相应的操作，也印证了我当时的推断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exception &amp;lt;br&amp;gt;&lt;br /&gt;
 很常见的异常，触发流程大概为&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7z1qkeksj30g60lkaax.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;signal &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;signal 的产生流程大概分为几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于  &lt;code&gt;MachExcption&lt;/code&gt;  转换而成的 signal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于 Exception 而发出的 abort 信号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户自定义的信号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是需要注意一点：&amp;lt;font color=red size=3 face=&amp;quot;黑体&amp;quot;&amp;gt; 收到 signal 不一定会 Crash，但是 Crash 一定会有 Signal 发出 &amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-crash传递流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ii-crash传递流程&#34;&gt;#&lt;/a&gt; II: Crash 传递流程&lt;/h2&gt;
&lt;p&gt;上面分析了每种 Crash 的类型，那么这三种类型的 Crash 是如何在 App 生命周期中传递的呢？他们又是如何相互转化以及相互之间有什么关系呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7z8sxdxoj313o0n07hs.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;帮大家提取下上图中的几个关键信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1：Exception 最终会转化为 Mach Exception&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2：通过 Mach 端口拦截的较为全面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3：如果发生了 exception 那么就不会抛出对应的 signal 只能抛出 abort ();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4：通过捕获 signal 是无法拦截到 exception。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-拦截的选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iii-拦截的选择&#34;&gt;#&lt;/a&gt; III: 拦截的选择&lt;/h2&gt;
&lt;p&gt;通过上面的分析大家一定会说通过 Mach 端口的拦截更加全面，毕竟苹果自己也在用。但是在实际使用中有一个问题，mach 会拦截所有的异常以及信号量，也就是随便一个操作（比如发一个自定义 signal 等）可能都被 mach 捕获，那么如果在其捕获回调中再进行捕获就会很容易发生死锁，而且容易和系统的处理产生冲突。当时看了 PLCrash 的文档，也看到了开发者写的一句话：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7znanxjrj315y03odjv.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样说明了大家确实被坑过。&lt;/p&gt;
&lt;p&gt;那接下来只剩 signal 和 exception，其实细心的同学早已发现这两个的优缺点是一个互补的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;singal 能捕获除 Exception 之外的所有异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exception 只能获取应用层的异常而对信号量无法处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么最终的方式采用 singnal + exception 的方式进行捕获，最终的流程为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq7zrbfy5xj30c40okdgu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iv-坑点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iv-坑点&#34;&gt;#&lt;/a&gt; IV: 坑点&lt;/h2&gt;
&lt;p&gt;上面的流程图可以看出在每一个 CustomHandle 之前都会有一个 PreviousHandle，其实是因为在 iOS 系统中只能存在一个 customHandel，如果你的项目中接入了或者准备接入多个 Crash 防护相关的 SDK（虽然不建议这么做），那么多个 Handle 之间一定会产生冲突，导致堆栈不明确，或者丢失。所以在注册我们的 handle 前先将之前的 handle 指针保存下来，等我们的 handle 处理完后在通过函数指针调用回去，这样就能保证每一个 handle 都能被正常调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;exception：通过 &lt;code&gt;NSGetUncaughtExceptionHandler&lt;/code&gt;  获得之前 handle 指针，之后再通过 &lt;code&gt;NSSetUncaughtExceptionHandler(oldHandler);&lt;/code&gt;  调用回去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;signal: 使用 &lt;code&gt;sigaction&lt;/code&gt;  函数获得之前的 handle 指针。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x3-堆栈获取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x3-堆栈获取&#34;&gt;#&lt;/a&gt; 0x3: 堆栈获取&lt;/h1&gt;
&lt;p&gt;因为苹果使用了 (Address Space Layout Randomization) 地址空间配置随机加载技术，所以线上堆栈必须要通过符号表堆栈还原进行解读，不然的话就是内存地址。所以当我们使用 NSThread 的相关函数在 Debug 下虽然能看到可读性行的堆栈，但是在线上包上并不可取，那我们要怎么获取堆栈呢？先来看下符号表的构造：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq80i60uhsj30ya0eih1g.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之前拿到这样的符号表，我们通常手动还原，找一个相同系统的真机，找到对应库的基地址按照符号表上函数的偏移量进行计算（通过 LLDB 的相关函数）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq80lfgy0hj30q208i0te.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过看 Mach-o 相关接口可以找到相关函数进行端内符号表还原，大致流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取函数地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遍历 Mach-o 中的所有 image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取每个 image 的基地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过堆栈偏移地址获取栈帧函数地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将函数地址翻译成函数名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找到对应 Image 的 symple table 段的 nlist_64 结构体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 nlist_64.n_un.n_strx 获取函数对应的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终的效果:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq80unfse1j31fc0cin8n.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;0x4-crash后续&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x4-crash后续&#34;&gt;#&lt;/a&gt; 0x4: Crash 后续&lt;/h1&gt;
&lt;p&gt;通常在 AppCrash 后会在 handle 中做些上报操作.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq80xn75voj31cc04ydg7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是这样做有两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;苹果不推荐在 Handle 中做太多操作，而且数据上报等网络请求属于耗时操作，有可能没有完成 App 就被杀死。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App 直接闪退，体验不好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过查看 runloop 源码可以看出，在 Crash 发生后当前 runloop 中断&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=&#39;red&#39;&amp;gt; 注意：runloop 本次循环还在继续，但是循环已经被打破，本次循环结束后 app 才退出 &amp;lt;/font&amp;gt; 既下图的 retVal 被置为 NO&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq810qv4osj317e0nawla.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;iOS Crash 发生后   runloop 中的 do-while 循环的条件会被置为 NO，然后 Handler 函数走完之后当前循环后直接结束，不会在进行下一次循环了，此时我们只需要再 handler 中再重启 runloop，便可以继续执行代码，通过观察 runloop 源码可以看出 这样的操作是在之前已经中断但是还没结束的 runloop 中开启一个新的 runloop，他依然可以接受各种事件，比如交互事件等，前提是每个 model 都要开启，因为不同操作是发生在不同阶段的。  但是之前 runloop 中的内容处于不可控状态，且之前的东西被永远的留在内存中，不可恢复，所以在做完相关操作后要立即结束 App，避免其他异常情况，这种做法类似于一种安全模式，在安全模式中处理相关的东西。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq814a1gryj31f00ac3zo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;函数调用：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; continueAfterCrash()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CFRunLoopRef&lt;/span&gt; runLoop = &lt;span class=&#34;built_in&#34;&gt;CFRunLoopGetCurrent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CFArrayRef&lt;/span&gt; allModes = &lt;span class=&#34;built_in&#34;&gt;CFRunLoopCopyAllModes&lt;/span&gt;(runLoop);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *mode &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (__bridge &lt;span class=&#34;built_in&#34;&gt;NSArray&lt;/span&gt; *)allModes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;CFRunLoopRunInMode&lt;/span&gt;((&lt;span class=&#34;built_in&#34;&gt;CFStringRef&lt;/span&gt;)mode, &lt;span class=&#34;number&#34;&gt;1.0e10&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.cdnjson.com/tva1.sinaimg.cn/large/008i3skNly1gq81k7k7xcj30cq0um0wg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在新的 runloop 中我们做一些操作后再调用 abort 退出 App，比如弹出友好提示之类的操作，告知用户 app 即将退出，但是该操作存在风险，需要注意以下情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新开 runloop 后之前的 runloop 内容便会永远的留在内存中变成不可控的状态如果一旦被访问可能会有异常，所以在做完我们必要的操作后要及时结束 App。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全模式必须保证稳定，在新 runloop 中执行的上报、弹窗或者其他逻辑必须要使用系统原生的 API，不能依赖任何第三方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不要做太多的操作，及时结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x5-参考资料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x5-参考资料&#34;&gt;#&lt;/a&gt; 0x5: 参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24=&#34;&gt;Apple iOS Api&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcGVuc291cmNlLmFwcGxlLmNvbS8=&#34;&gt;iOS Open Sourcre&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcGVuc291cmNlLmFwcGxlLmNvbS9zb3VyY2UvQ0YvQ0YtMTE1MS4xNi8=&#34;&gt;CFRunloop&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29wZW5zb3VyY2UuYXBwbGUuY29tL3RhcmJhbGxzL3hudS94bnUtMzI0OC42MC4xMC50YXIuZ3o=&#34;&gt;XNU 3248.60.10 源码&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGNvZGUvZGlhZ25vc2luZ19pc3N1ZXNfdXNpbmdfY3Jhc2hfcmVwb3J0c19hbmRfZGV2aWNlX2xvZ3MvYW5hbHl6aW5nX2FfY3Jhc2hfcmVwb3J0&#34;&gt;Understanding Crash Reports on iPhone OS&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《深入解析 MAC OS X &amp;amp; IOS 操作系统》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x6-最后&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x6-最后&#34;&gt;#&lt;/a&gt; 0x6: 最后&lt;/h1&gt;
&lt;p&gt;大概这就是所有 Crash 防护的流程，通过两篇文章讲解，希望大家对 iOS 系统的 Crash 流程能有些许的了解，并没有贴太多的源码，其实还是解耦度不够，思路有了代码就很简单了。&lt;/p&gt;
&lt;p&gt;
        &lt;div id=&#34;aplayer-yREUnHKW&#34; class=&#34;aplayer aplayer-tag-marker&#34; style=&#34;margin-bottom: 20px;&#34;&gt;&lt;/div&gt;
			  &lt;script&gt;
				  var options = {&#34;narrow&#34;:false,&#34;autoplay&#34;:true,&#34;showlrc&#34;:0,&#34;mutex&#34;:true,&#34;music&#34;:[{&#34;title&#34;:&#34;错位时空&#34;,&#34;author&#34;:&#34;艾辰&#34;,&#34;url&#34;:&#34;https://molier-1256056152.cos.ap-guangzhou.myqcloud.com/%E8%89%BE%E8%BE%B0%20-%20%E9%94%99%E4%BD%8D%E6%97%B6%E7%A9%BA.mp3&#34;,&#34;pic&#34;:&#34;https://bkimg.cdn.bcebos.com/pic/a8ec8a13632762d0f7037ac288a71ffa513d26976830?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UxMTY=,g_7,xp_5,yp_5/format,f_auto&#34;,&#34;lrc&#34;:&#34;https://歌词.lrc&#34;}]};
				  options.element = document.getElementById(&#34;aplayer-yREUnHKW&#34;);
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  &lt;/script&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
